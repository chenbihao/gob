import{_ as s,c as n,o as a,b as e}from"./app-BSoEOH6w.js";const l={},p=e(`<h1 id="自动部署" tabindex="-1"><a class="header-anchor" href="#自动部署"><span>自动部署</span></a></h1><p>相关的命令详见：<a href="../command/deploy">deploy</a></p><p>部署自动化其实不是一个框架的刚需，有很多方式可以将一个服务进行自动化部署，比如现在比较流行的 Docker 化或者 CI/CD 流程。</p><p>但是一些比较个人比较小的项目，比如一个博客、一个官网网站，这些部署流程往往都太庞大了，更需要一个服务，能快速将在开发机器上写好、调试好的程序上传到目标服务器，并且更新应用程序。</p><p>这就是gob框架实现的发布自动化。</p><h2 id="ssh" tabindex="-1"><a class="header-anchor" href="#ssh"><span>SSH</span></a></h2><p>所有的部署自动化工具，基本都依赖本地与远端服务器的连接，这个连接可以是 FTP，可以是 HTTP，但是更经常的连接是 SSH 连接。</p><p>基本上，SSH 账号是我们拿到 Web 服务器的首要凭证，所以要设计的自动化发布系统也是依赖 SSH 的。</p><p>对应的配置文件如下 <code>config/dev/ssh.yaml</code>，你可以看看每个配置的说明：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">timeout</span><span class="token punctuation">:</span> 1s</span>
<span class="line"><span class="token key atrule">network</span><span class="token punctuation">:</span> tcp</span>
<span class="line"><span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.159.128</span>
<span class="line"><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">22</span></span>
<span class="line"><span class="token key atrule">username</span><span class="token punctuation">:</span> demo</span>
<span class="line"><span class="token key atrule">web-pwd</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;123456&quot;</span></span>
<span class="line"><span class="token key atrule">web-key</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">rsa_key</span><span class="token punctuation">:</span> <span class="token string">&quot;C:/Users/.ssh/id_rsa_manjarovm_demo_key&quot;</span></span>
<span class="line">  <span class="token key atrule">known_hosts</span><span class="token punctuation">:</span> <span class="token string">&quot;C:/Users/.ssh/known_hosts&quot;</span></span>
<span class="line"><span class="token key atrule">web-ubuntu</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.159.129</span>
<span class="line">  <span class="token key atrule">username</span><span class="token punctuation">:</span> cbh</span>
<span class="line">  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;5233&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SSH 的连接方式有两种，一种是直接使用用户名密码来连接远程服务器，还有一种是使用 rsa key 文件来连接远端服务器，所以这里的配置需要同时支持两种配置。</p><p>对于使用 rsa key 文件的方式，需要设置 rsk_key 的私钥地址和负责安全验证的 known_hosts。</p><h2 id="deploy" tabindex="-1"><a class="header-anchor" href="#deploy"><span>deploy</span></a></h2><p>我们的 gob 框架是同时支持前后端的开发框架，所以自动化部署是需要同时支持前后端部署的，也就是说它的命令也需要支持前后端的部署，</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">./gob deploy frontend ，部署前端</span>
<span class="line">./gob deploy backend ，部署后端</span>
<span class="line">./gob deploy all ，同时部署前后端</span>
<span class="line">./gob deploy rollback ，部署回滚</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="部署前端" tabindex="-1"><a class="header-anchor" href="#部署前端"><span>部署前端</span></a></h3><p>你可以通过命令</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">./gob deploy frontend</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者 跳过编译环节</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">./gob deploy frontend <span class="token parameter variable">-s</span><span class="token operator">=</span>true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第一个方法会直接运行 npm run build，把前端代码生成在dist目录下，然后把dist目录下的文件上传到远端服务器，然后执行前置命令和后置命令。</p><p>而第二个方法会掉过编译，直接把dist目录下的文件上传到远端服务器，然后执行前置命令和后置命令。</p><h3 id="部署后端" tabindex="-1"><a class="header-anchor" href="#部署后端"><span>部署后端</span></a></h3><p>命令 <code>./gob deploy backend</code> 会自动编译gob二进制文件，然后上传到服务器上。</p><p>如果你的 post_action 设置的是重启远端服务器进程，那么实际上就是一个完整的cd行为了。</p><h3 id="前后端一起部署" tabindex="-1"><a class="header-anchor" href="#前后端一起部署"><span>前后端一起部署</span></a></h3><p>命令 <code>./gob deploy all</code></p><h3 id="部署回滚" tabindex="-1"><a class="header-anchor" href="#部署回滚"><span>部署回滚</span></a></h3><p>每次部署执行，都会在本地的 deploy 目录下创建一个目录，目录名为当前时间戳，比如<code>20221214203745</code>。</p><p>如果你想回滚到上一次部署的版本，可以执行命令 <code>./gob deploy rollback 20221214203745 backend</code>。</p><p>实际上做的事情就是将 deploy 目录下的时间戳对应的文件再进行一次发布。</p>`,31),i=[p];function t(c,d){return a(),n("div",null,i)}const r=s(l,[["render",t],["__file","deploy.html.vue"]]),u=JSON.parse('{"path":"/guide/deploy.html","title":"自动部署","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"自动部署","description":null},"headers":[{"level":2,"title":"SSH","slug":"ssh","link":"#ssh","children":[]},{"level":2,"title":"deploy","slug":"deploy","link":"#deploy","children":[{"level":3,"title":"部署前端","slug":"部署前端","link":"#部署前端","children":[]},{"level":3,"title":"部署后端","slug":"部署后端","link":"#部署后端","children":[]},{"level":3,"title":"前后端一起部署","slug":"前后端一起部署","link":"#前后端一起部署","children":[]},{"level":3,"title":"部署回滚","slug":"部署回滚","link":"#部署回滚","children":[]}]}],"git":{"updatedTime":1718016868000,"contributors":[{"name":"被水淹没","email":"994523036@qq.com","commits":1},{"name":"陈壁浩","email":"chenbihao@qljy.com","commits":1}]},"filePathRelative":"guide/deploy.md"}');export{r as comp,u as data};

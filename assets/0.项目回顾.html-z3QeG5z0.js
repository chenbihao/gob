import{_ as o,r as e,o as c,c as i,a as s,b as n,d as t,e as p}from"./app-5fT5CoY1.js";const l={},u=s("h1",{id:"自我回顾",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#自我回顾"},[s("span",null,"自我回顾")])],-1),k=s("p",null,"梳理复习在使用 Golang 搭建一个 web 框架过程中的迭代步骤。",-1),r={href:"https://github.com/chenbihao/gob",target:"_blank",rel:"noopener noreferrer"},d=p(`<h2 id="_01、搭建-web-server" tabindex="-1"><a class="header-anchor" href="#_01、搭建-web-server"><span>01、搭建 Web Server</span></a></h2><h3 id="net-http-标准库" tabindex="-1"><a class="header-anchor" href="#net-http-标准库"><span>net-http 标准库</span></a></h3><p>Web Server 的本质就是通过接收并解析 HTTP 请求传输的文本字符，处理后包装成 HTTP 响应文本返回给客户端。</p><p>Go 官方提供了 <code>net/http</code> 库，方便我们直接创建 web 服务：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 创建一个Foo路由和处理函数</span>
http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/foo&quot;</span><span class="token punctuation">,</span> fooHandler<span class="token punctuation">)</span>

<span class="token comment">// 创建一个bar路由和处理函数</span>
http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/bar&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Hello, %q&quot;</span><span class="token punctuation">,</span> html<span class="token punctuation">.</span><span class="token function">EscapeString</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监听8080端口</span>
log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>net/http</code> 库主要提供了三类对外库函数（功能、func）：</p><ul><li>为服务端提供创建 HTTP 服务的函数（名字中一般包含 Serve 字样）</li><li>为客户端提供调用 HTTP 服务的类库（以 HTTP 的 method 同名）</li><li>提供中转代理的一些函数（Proxy*）</li></ul><p>核心结构（模块、struct）：</p><ul><li>Client 负责构建 HTTP 客户端</li><li>Server 负责构建 HTTP 服务端</li><li>ServerMux 负责 HTTP 服务端路由</li><li>Transport、Request、Response、Cookie 负责客户端和服务端传输对应的不同模块</li></ul><p>核心函数（能力、method）：</p><ul><li>第一层：标准库创建 HTTP 服务是通过创建一个 Server 数据结构完成的</li><li>第二层：<code>Server</code> 数据结构在 <code>for</code> 循环中不断监听每一个连接</li><li>第三层：每个连接默认开启一个 Goroutine 为其服务</li><li>第四五层：<code>serverHandler</code> 结构代表请求对应的处理逻辑，并且通过这个结构进行具体业务逻辑处理</li><li>第六层：Server 数据结构如果没有设置处理函数 Handler，默认使用 <code>DefaultServerMux</code> 处理请求</li><li>第七层：<code>DefaultServerMux</code> 是使用 map 结构来存储和查找路由规则</li></ul><h2 id="_02、控制请求上下文" tabindex="-1"><a class="header-anchor" href="#_02、控制请求上下文"><span>02、控制请求上下文</span></a></h2><h3 id="context-标准库" tabindex="-1"><a class="header-anchor" href="#context-标准库"><span>Context 标准库</span></a></h3><blockquote><p>包上下文定义 Context 类型，该类型跨 API 边界和进程之间传输截止时间、取消信号和其他请求范围的值。</p><p>对服务器的传入请求应创建 Context，对服务器的传出调用应接受 Context。它们之间的函数调用链必须传播 Context，也可以将其替换为使用 WithCancel、WithDeadline、WithTimeout 或 WithValue 创建的派生 Context。当一个 Context 被取消时，从它派生的所有 Context 也会被取消。</p><p>不要将 Contexts 存储在结构类型中; 相反，将 Context 显式传递给每个需要它的函数。Context 应为第一个参数，通常命名为 ctx。</p></blockquote><p>库函数（功能、func）：</p><ul><li><code>WithCancel</code>：直接创建可以操作退出的子节点，</li><li><code>WithTimeout</code>：为子节点设置了超时时间（还有多少时间结束）</li><li><code>WithDeadline</code>：为子节点设置了结束时间线（在什么时间结束）</li></ul><p>核心结构（模块、struct）：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Context <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当 Context 被取消或者到了 deadline，返回一个被关闭的 channel</span>
    <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">//函数句柄</span>
<span class="token keyword">type</span> CancelFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在树形逻辑链条上， <strong>一个节点其实有两个角色：一是下游树的管理者；二是上游树的被管理者</strong>，那么就对应需要有两个能力：</p><ul><li>一个是能让整个下游树结束的能力，也就是函数句柄 <code>CancelFunc</code>；</li><li>另外一个是在上游树结束的时候被通知的能力，也就是 <code>Done()</code> 方法。同时因为通知是需要不断监听的，所以 <code>Done()</code> 方法需要通过 <code>channel</code> 作为返回值让使用方进行监听。</li></ul><p>官方示例：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> shortDuration <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建截止时间</span>
	d <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>shortDuration<span class="token punctuation">)</span>
    <span class="token comment">// 创建有截止时间的 Context</span>
	ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithDeadline</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 使用 select 监听 1s 和有截止时间的 Context 哪个先结束</span>
	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;overslept&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="net-http-标准库中应用的-context-逻辑" tabindex="-1"><a class="header-anchor" href="#net-http-标准库中应用的-context-逻辑"><span>net-http 标准库中应用的 Context 逻辑</span></a></h3><p><img src="https://cos.noobbb.cn/pictures/202312/19_Context生成层次.jpg" alt="Context生成层次.jpg"></p><p>每个连接的 Context 都是基于 baseContext 复制来的。</p><p>对应到代码中就是，在为某个连接开启 Goroutine 的时候，为当前连接创建了一个 <code>connContext</code>，这个 <code>connContext</code> 是基于 server 中的 Context （ <code>baseContext</code>）而来。</p><p>这两处都可以注入修改：</p><ul><li><code>BaseContext</code> 是整个 Context 生成的源头，如果我们不希望使用默认的 <code>context.Backgroud()</code>，可以替换这个源头。</li><li>而在每个连接生成自己要使用的 Context 时，会调用 <code>ConnContext</code> ，它的第二个参数是 <code>net.Conn</code>，能让我们对某些特定连接进行设置，比如要针对性设置某个调用 IP。</li></ul><p>源代码：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
    <span class="token comment">// BaseContext 用来为整个链条创建初始化 Context</span>
    <span class="token comment">// 如果没有设置的话，默认使用 context.Background()</span>
	BaseContext <span class="token keyword">func</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context<span class="token punctuation">{</span><span class="token punctuation">}</span>
	
    <span class="token comment">// ConnContext 用来为每个连接封装 Context</span>
    <span class="token comment">// 参数中的 context.Context 是从 BaseContext 继承来的</span>
	ConnContext <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="目标-封装一个自己的-context" tabindex="-1"><a class="header-anchor" href="#目标-封装一个自己的-context"><span>目标：封装一个自己的 Context</span></a></h3><p>前置：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 创建 framework 包存放框架文件</span>
<span class="token comment">// framework 包外为业务文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>目标：封装一个自己的 Context：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 未封装的原生控制器的使用</span>
<span class="token keyword">func</span> <span class="token function">Foo1</span><span class="token punctuation">(</span>request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 期待封装 Context 后的控制器使用</span>
<span class="token keyword">func</span> <span class="token function">Foo2</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>framework<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	obj <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span>   <span class="token boolean">nil</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 从请求体中获取参数</span>
 	fooInt <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">FormInt</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token comment">// 构建返回结构</span>
	obj<span class="token punctuation">[</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> fooInt
    <span class="token comment">// 输出返回结构</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>request</code> 和 <code>response</code> 封装到自定义的 Context 中，</p><p>并且兼容标准库的 Context 接口，<code>context.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 自定义 Context</span>
<span class="token keyword">type</span> Context <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	request        <span class="token operator">*</span>http<span class="token punctuation">.</span>Request
	responseWriter http<span class="token punctuation">.</span>ResponseWriter
	<span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 直接返回原生 Context</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">BaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// implement context.Context （实现标准 Context 接口）</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">BaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">BaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">BaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key any<span class="token punctuation">)</span> any <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">BaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且自己封装 Context 最终需要提供四类功能函数：</p><ul><li><code>base</code> 封装基本的函数功能（比如获取 http.Request 结构）</li><li><code>context</code> 实现标准 Context 接口</li><li><code>request</code> 封装了 http.Request 的对外接口（query url、form post、json post 等）</li><li><code>response</code> 封装了 http.ResponseWriter 对外接口（Json、HTML、Text 等）</li></ul><p>ControllerHandler 定义，框架目录 <code>controller.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ControllerHandler <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>控制器使用，业务目录 <code>controller.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">FooControllerHandler</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>framework<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
        <span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="目标-为单个请求设置超时" tabindex="-1"><a class="header-anchor" href="#目标-为单个请求设置超时"><span>目标：为单个请求设置超时</span></a></h3><p>自定义 Context 设置超时：</p><ol><li>继承 request 的 Context，创建出一个设置超时时间的 Context；</li><li>创建一个新的 Goroutine 来处理具体的业务逻辑；</li><li>设计事件处理顺序，当前 Goroutine 监听超时时间 Contex 的 Done() 事件，和具体的业务处理结束事件，哪个先到就先处理哪个。</li></ol><p>业务 <code>controller.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">FooControllerHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>framework<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// 生成一个超时的 Context</span>
	durationCtx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">BaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token comment">// 当所有事情处理结束后调用 cancel，告知 durationCtx 的后续 Context 结束</span>
	<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	finish <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment">// 这个 channel 负责通知结束</span>
	panicChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 这个 channel 负责通知 panic 异常</span>

	<span class="token comment">// 创建一个新的 Goroutine 来处理业务逻辑</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> p <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				panicChan <span class="token operator">&lt;-</span> p
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		
		<span class="token comment">// 这里做具体的业务</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		
		c<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span>
		finish <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> p <span class="token operator">:=</span> <span class="token operator">&lt;-</span>panicChan<span class="token punctuation">:</span>      
		<span class="token comment">// 监听 panic</span>
		c<span class="token punctuation">.</span><span class="token function">WriterMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">defer</span> c<span class="token punctuation">.</span><span class="token function">WriterMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 考虑边界情况，加锁</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&quot;panic&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>finish<span class="token punctuation">:</span>                
		<span class="token comment">// 监听结束事件</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;finish&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>durationCtx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    
		<span class="token comment">// 监听超时事件</span>
		c<span class="token punctuation">.</span><span class="token function">WriterMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">defer</span> c<span class="token punctuation">.</span><span class="token function">WriterMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 考虑边界情况，加锁</span>
		c<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&quot;time out&quot;</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span><span class="token function">SetHasTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 考虑边界情况，当触发超时后避免其他协程重复写入 （todo:没作写保护）</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>框架上下文添加超时与写保护 <code>context.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 自定义 Context</span>
<span class="token keyword">type</span> Context <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	hasTimeout <span class="token builtin">bool</span>        <span class="token comment">// 是否超时标记位</span>
	writerMux  <span class="token operator">*</span>sync<span class="token punctuation">.</span>Mutex <span class="token comment">// 写保护机制</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">NewContext</span><span class="token punctuation">(</span>r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">)</span> <span class="token operator">*</span>Context <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Context<span class="token punctuation">{</span>
		request<span class="token punctuation">:</span>        r<span class="token punctuation">,</span>
		responseWriter<span class="token punctuation">:</span> w<span class="token punctuation">,</span>
		ctx<span class="token punctuation">:</span>            r<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		writerMux<span class="token punctuation">:</span>      <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">...</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">SetHasTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ctx<span class="token punctuation">.</span>hasTimeout <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">HasTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span>hasTimeout
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">WriterMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>sync<span class="token punctuation">.</span>Mutex <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span>writerMux
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03、自定义路由功能" tabindex="-1"><a class="header-anchor" href="#_03、自定义路由功能"><span>03、自定义路由功能</span></a></h2><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标"><span>目标</span></a></h3><p>路由一般使用的是请求头里的 <code>Method</code> 和 <code>Request-URI</code> 这两个部分。</p><p>希望使用者高效、易用地使用路由模块，基本需求可以有哪些呢？</p><ul><li>需求 1：HTTP 方法匹配</li><li>需求 2：静态路由匹配</li><li>需求 3：批量通用前缀</li><li>需求 4：动态路由匹配</li><li>扩展需求：分组嵌套</li></ul><h3 id="如何实现" tabindex="-1"><a class="header-anchor" href="#如何实现"><span>如何实现</span></a></h3><p>简单来讲，核心结构 <code>Core</code> 去实现 Handler 接口（<code>ServeHTTP</code>），来接管请求处理。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">ServeHTTP</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且在 <code>ServeHTTP</code> 函数里面，实现框架上下文 Context 的封装以及路由功能 router。</p><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h3><p>最终代码 <code>main.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token comment">// 核心框架初始化</span>
	core <span class="token operator">:=</span> framework<span class="token punctuation">.</span><span class="token function">NewCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 设置路由</span>
	<span class="token function">registerRouter</span><span class="token punctuation">(</span>core<span class="token punctuation">)</span>

	server <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>
		<span class="token comment">// 自定义的请求核心处理函数</span>
		Handler<span class="token punctuation">:</span> core<span class="token punctuation">,</span>
		<span class="token comment">// 请求监听地址</span>
		Addr<span class="token punctuation">:</span> <span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义 ControllerHandler ，框架文件夹 <code>controller.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ControllerHandler <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并且简单实现几个业务 Controller ，例如业务文件夹的 <code>user_controller.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">UserLoginController</span><span class="token punctuation">(</span>c <span class="token operator">*</span>framework<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;ok, UserLoginController&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>业务文件夹的注册路由 ，<code>router.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 注册路由规则</span>
<span class="token keyword">func</span> <span class="token function">registerRouter</span><span class="token punctuation">(</span>core <span class="token operator">*</span>framework<span class="token punctuation">.</span>Core<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 需求1+2:HTTP方法+静态路由匹配</span>
	core<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/user/login&quot;</span><span class="token punctuation">,</span> UserLoginController<span class="token punctuation">)</span>

	<span class="token comment">// 需求3:批量通用前缀</span>
	subjectApi <span class="token operator">:=</span> core<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;/subject&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 需求4:动态路由</span>
		subjectApi<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">&quot;/:id&quot;</span><span class="token punctuation">,</span> SubjectDelController<span class="token punctuation">)</span>
		subjectApi<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token string">&quot;/:id&quot;</span><span class="token punctuation">,</span> SubjectUpdateController<span class="token punctuation">)</span>
		subjectApi<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/:id&quot;</span><span class="token punctuation">,</span> SubjectGetController<span class="token punctuation">)</span>
		subjectApi<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/list/all&quot;</span><span class="token punctuation">,</span> SubjectListController<span class="token punctuation">)</span>
		
		<span class="token comment">// 扩展需求：分组嵌套</span>
		subjectInnerApi <span class="token operator">:=</span> subjectApi<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;/info&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			subjectInnerApi<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/name&quot;</span><span class="token punctuation">,</span> SubjectNameController<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用接口设计通用的分组定义，并且实现 <code>group.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// IGroup 代表前缀分组</span>
<span class="token keyword">type</span> IGroup <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// 实现HttpMethod方法</span>
	<span class="token function">Get</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> ControllerHandler<span class="token punctuation">)</span>
	<span class="token function">Post</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> ControllerHandler<span class="token punctuation">)</span>
	<span class="token function">Put</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> ControllerHandler<span class="token punctuation">)</span>
	<span class="token function">Delete</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> ControllerHandler<span class="token punctuation">)</span>

	<span class="token comment">// 实现嵌套group</span>
	<span class="token function">Group</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> IGroup
<span class="token punctuation">}</span>

<span class="token comment">// Group struct 实现了IGroup</span>
<span class="token keyword">type</span> Group <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	core   <span class="token operator">*</span>Core  <span class="token comment">// 指向core结构</span>
	parent <span class="token operator">*</span>Group <span class="token comment">// 指向上一个Group，如果有的话</span>
	prefix <span class="token builtin">string</span> <span class="token comment">// 这个group的通用前缀</span>
<span class="token punctuation">}</span>

<span class="token comment">// 初始化Group</span>
<span class="token keyword">func</span> <span class="token function">NewGroup</span><span class="token punctuation">(</span>core <span class="token operator">*</span>Core<span class="token punctuation">,</span> prefix <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Group <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Group<span class="token punctuation">{</span>
		core<span class="token punctuation">:</span>   core<span class="token punctuation">,</span>
		parent<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
		prefix<span class="token punctuation">:</span> prefix<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现Get方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>uri <span class="token builtin">string</span><span class="token punctuation">,</span> handler ControllerHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	uri <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">getAbsolutePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> uri
	g<span class="token punctuation">.</span>core<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">...</span>  <span class="token comment">//  POST、PUT、DELETE</span>

<span class="token comment">// 获取当前group的绝对路径</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">getAbsolutePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> g<span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> g<span class="token punctuation">.</span>prefix
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> g<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">getAbsolutePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> g<span class="token punctuation">.</span>prefix
<span class="token punctuation">}</span>

<span class="token comment">// 实现 Group 方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Group</span><span class="token punctuation">(</span>uri <span class="token builtin">string</span><span class="token punctuation">)</span> IGroup <span class="token punctuation">{</span>
	cgroup <span class="token operator">:=</span> <span class="token function">NewGroup</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>core<span class="token punctuation">,</span> uri<span class="token punctuation">)</span>
	cgroup<span class="token punctuation">.</span>parent <span class="token operator">=</span> g
	<span class="token keyword">return</span> cgroup
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心框架代码，包含 Handler 接口实现、初始化路由、分组接口实现 。<code>core.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 框架核心结构</span>
<span class="token keyword">type</span> Core <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	router      <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Tree    <span class="token comment">// all routers              // 一级匹配HTTP方法，二级字典树匹配</span>
<span class="token punctuation">}</span>

<span class="token comment">// 初始化Core结构</span>
<span class="token keyword">func</span> <span class="token function">NewCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Core <span class="token punctuation">{</span>
	<span class="token comment">// 初始化路由</span>
	router <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Tree<span class="token punctuation">{</span><span class="token punctuation">}</span>
	router<span class="token punctuation">[</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">NewTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	router<span class="token punctuation">[</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">NewTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	router<span class="token punctuation">[</span><span class="token string">&quot;PUT&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">NewTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	router<span class="token punctuation">[</span><span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">NewTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Core<span class="token punctuation">{</span>router<span class="token punctuation">:</span> router<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 匹配GET 方法, 增加路由规则</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Core<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">,</span> handler ControllerHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>router<span class="token punctuation">[</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">AddRouter</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;add router error: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">...</span>  <span class="token comment">//  POST、PUT、DELETE</span>

<span class="token comment">// 前缀分组</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Core<span class="token punctuation">)</span> <span class="token function">Group</span><span class="token punctuation">(</span>prefix <span class="token builtin">string</span><span class="token punctuation">)</span> IGroup <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">NewGroup</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 匹配路由，如果没有匹配到，返回nil</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Core<span class="token punctuation">)</span> <span class="token function">FindRouteByRequest</span><span class="token punctuation">(</span>request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> ControllerHandler <span class="token punctuation">{</span>
	<span class="token comment">// uri 和 method 全部转换为大写，保证大小写不敏感</span>
	uri <span class="token operator">:=</span> request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path
	method <span class="token operator">:=</span> request<span class="token punctuation">.</span>Method
	upperMethod <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span>

	<span class="token comment">// 查找第一层map</span>
	<span class="token keyword">if</span> methodHandlers<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>router<span class="token punctuation">[</span>upperMethod<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> methodHandlers<span class="token punctuation">.</span><span class="token function">FindHandler</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 框架核心结构实现 Handler 接口</span>
<span class="token comment">// 所有请求都进入这个函数, 这个函数负责路由分发</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Core<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token comment">// 封装自定义context</span>
	ctx <span class="token operator">:=</span> <span class="token function">NewContext</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span>

	<span class="token comment">// 寻找路由</span>
	router <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">FindRouteByRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
	<span class="token keyword">if</span> router <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果没有找到，这里打印日志</span>
		ctx<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">&quot;not found&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 调用路由函数，如果返回err 代表存在内部错误，返回500状态码</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">router</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&quot;inner error&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字典树的实现 ，<code>trie.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 代表树结构</span>
<span class="token keyword">type</span> Tree <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	root <span class="token operator">*</span>node <span class="token comment">// 根节点</span>
<span class="token punctuation">}</span>

<span class="token comment">// 代表节点</span>
<span class="token keyword">type</span> node <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	isLast   <span class="token builtin">bool</span>                <span class="token comment">// 是否可以成为最终的路由规则。该节点是否能成为一个独立的uri, 是否终极节点</span>
	segment  <span class="token builtin">string</span>              <span class="token comment">// uri中的字符串，代表这个节点表示的路由中某个段的字符串</span>
	handler ControllerHandler    <span class="token comment">// 代表这个节点中包含的控制器，用于最终加载调用</span>
	childs   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node             <span class="token comment">// 代表这个节点下的子节点</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>node <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>node<span class="token punctuation">{</span>
		isLast<span class="token punctuation">:</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>
		segment<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
		childs<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Tree <span class="token punctuation">{</span>
	root <span class="token operator">:=</span> <span class="token function">newNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Tree<span class="token punctuation">{</span>root<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 判断一个segment是否是通用segment，即以:开头</span>
<span class="token keyword">func</span> <span class="token function">isWildSegment</span><span class="token punctuation">(</span>segment <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>segment<span class="token punctuation">,</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 过滤下一层满足segment规则的子节点</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token function">filterChildNodes</span><span class="token punctuation">(</span>segment <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>childs<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 如果segment是通配符，则所有下一层子节点都满足需求</span>
	<span class="token keyword">if</span> <span class="token function">isWildSegment</span><span class="token punctuation">(</span>segment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n<span class="token punctuation">.</span>childs
	<span class="token punctuation">}</span>
	nodes <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>childs<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// 过滤所有的下一层子节点</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cnode <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>childs <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">isWildSegment</span><span class="token punctuation">(</span>cnode<span class="token punctuation">.</span>segment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果下一层子节点有通配符，则满足需求</span>
			nodes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> cnode<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> cnode<span class="token punctuation">.</span>segment <span class="token operator">==</span> segment <span class="token punctuation">{</span>
			<span class="token comment">// 如果下一层子节点没有通配符，但是文本完全匹配，则满足需求</span>
			nodes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> cnode<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> nodes
<span class="token punctuation">}</span>

<span class="token comment">// 判断路由是否已经在节点的所有子节点树中存在了</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token function">matchNode</span><span class="token punctuation">(</span>uri <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>node <span class="token punctuation">{</span>
	<span class="token comment">// 使用分隔符将uri切割为两个部分</span>
	uri <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">TrimPrefix</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token comment">//  【/】开头的 url 去 Split 后第一层是空的，节省一层</span>
	segments <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token comment">// 第一个部分用于匹配下一层子节点</span>
	segment <span class="token operator">:=</span> segments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">isWildSegment</span><span class="token punctuation">(</span>segment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		segment <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>segment<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 匹配符合的下一层子节点</span>
	cnodes <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">filterChildNodes</span><span class="token punctuation">(</span>segment<span class="token punctuation">)</span>

	<span class="token comment">// 如果当前子节点没有一个符合，那么说明这个uri一定是之前不存在, 直接返回nil</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>cnodes<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 如果只有一个segment，则是最后一个标记</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>segments<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果segment已经是最后一个节点，判断这些cnode是否有isLast标志</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tn <span class="token operator">:=</span> <span class="token keyword">range</span> cnodes <span class="token punctuation">{</span>
			<span class="token keyword">if</span> tn<span class="token punctuation">.</span>isLast <span class="token punctuation">{</span>
				<span class="token keyword">return</span> tn
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 都不是最后一个节点</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 如果有2个segment, 递归每个子节点继续进行查找</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tn <span class="token operator">:=</span> <span class="token keyword">range</span> cnodes <span class="token punctuation">{</span>
		tnMatch <span class="token operator">:=</span> tn<span class="token punctuation">.</span><span class="token function">matchNode</span><span class="token punctuation">(</span>segments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> tnMatch <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> tnMatch
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 增加路由节点</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>tree <span class="token operator">*</span>Tree<span class="token punctuation">)</span> <span class="token function">AddRouter</span><span class="token punctuation">(</span>uri <span class="token builtin">string</span><span class="token punctuation">,</span> handler ControllerHandler<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	n <span class="token operator">:=</span> tree<span class="token punctuation">.</span>root  
	
	<span class="token comment">// 确认路由是否冲突</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span><span class="token function">matchNode</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;route exist: &quot;</span> <span class="token operator">+</span> uri<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	uri <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">TrimPrefix</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token comment">//  【/】开头的 url 去 Split 后第一层是空的，节省一层</span>
	segments <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// 对每个segment</span>
	<span class="token keyword">for</span> index<span class="token punctuation">,</span> segment <span class="token operator">:=</span> <span class="token keyword">range</span> segments <span class="token punctuation">{</span>

		<span class="token comment">// 最终进入Node segment的字段</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">isWildSegment</span><span class="token punctuation">(</span>segment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			segment <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>segment<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		isLast <span class="token operator">:=</span> index <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>segments<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>

		<span class="token keyword">var</span> objNode <span class="token operator">*</span>node <span class="token comment">// 标记是否有合适的子节点</span>

		childNodes <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">filterChildNodes</span><span class="token punctuation">(</span>segment<span class="token punctuation">)</span>
		<span class="token comment">// 如果有匹配的子节点</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>childNodes<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果有segment相同的子节点，则选择这个子节点</span>
			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cnode <span class="token operator">:=</span> <span class="token keyword">range</span> childNodes <span class="token punctuation">{</span>
				<span class="token keyword">if</span> cnode<span class="token punctuation">.</span>segment <span class="token operator">==</span> segment <span class="token punctuation">{</span>
					objNode <span class="token operator">=</span> cnode
					<span class="token keyword">break</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> objNode <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token comment">// 创建一个当前node的节点</span>
			cnode <span class="token operator">:=</span> <span class="token function">newNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			cnode<span class="token punctuation">.</span>segment <span class="token operator">=</span> segment
			<span class="token keyword">if</span> isLast <span class="token punctuation">{</span>
				cnode<span class="token punctuation">.</span>isLast <span class="token operator">=</span> <span class="token boolean">true</span>  
				cnode<span class="token punctuation">.</span>handler <span class="token operator">=</span> handler
			<span class="token punctuation">}</span>
			n<span class="token punctuation">.</span>childs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>childs<span class="token punctuation">,</span> cnode<span class="token punctuation">)</span>
			objNode <span class="token operator">=</span> cnode
		<span class="token punctuation">}</span>
		n <span class="token operator">=</span> objNode
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 匹配uri</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>tree <span class="token operator">*</span>Tree<span class="token punctuation">)</span> <span class="token function">FindHandler</span><span class="token punctuation">(</span>uri <span class="token builtin">string</span><span class="token punctuation">)</span> ControllerHandler <span class="token punctuation">{</span>
	<span class="token comment">// 直接复用matchNode函数，uri是不带通配符的地址</span>
	matchNode <span class="token operator">:=</span> tree<span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">matchNode</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
	<span class="token keyword">if</span> matchNode <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> matchNode<span class="token punctuation">.</span>handler
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04、利用中间件提升扩展性" tabindex="-1"><a class="header-anchor" href="#_04、利用中间件提升扩展性"><span>04、利用中间件提升扩展性</span></a></h2><h3 id="目标-1" tabindex="-1"><a class="header-anchor" href="#目标-1"><span>目标</span></a></h3><p>03 说过，核心结构 <code>Core</code> 去实现 Handler 接口（<code>ServeHTTP</code>），来接管请求处理。</p><p>并且在 <code>ServeHTTP</code> 函数里面，实现框架上下文 Context 的封装以及路由功能 router。</p><p>在此基础上，把非业务逻辑的通用型需求，抽取成中间件来使用。</p><ul><li>扩展需求 1：全局注册中间件</li><li>扩展需求 2：为单个路由注册中间件</li><li>扩展需求 3：为组嵌套中的单个路由注册中间件</li></ul><p>以上都可以注册单个或者多个中间件</p><h3 id="如何实现-1" tabindex="-1"><a class="header-anchor" href="#如何实现-1"><span>如何实现</span></a></h3><p>改造成链路调用。</p><p>引入 pipeline 思想，将所有中间件做成一个链条，通过这个链条的调用，来实现中间件机制。</p><p>在架构层面，中间件机制就相当于，在每个请求的横切面统一注入了一个逻辑。</p><h3 id="代码实现-1" tabindex="-1"><a class="header-anchor" href="#代码实现-1"><span>代码实现</span></a></h3><p>最终使用效果，业务文件夹 <code>router.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 注册路由规则</span>
<span class="token keyword">func</span> <span class="token function">registerRouter</span><span class="token punctuation">(</span>core <span class="token operator">*</span>framework<span class="token punctuation">.</span>Core<span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token comment">// 扩展需求1：core中使用use注册全局中间件 （需放在前面）</span>
	core<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>middleware<span class="token punctuation">.</span><span class="token function">Recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> middleware<span class="token punctuation">.</span><span class="token function">Cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	
	<span class="token comment">// 扩展需求2：在core中使用middleware.Test3() 为单个路由增加中间件</span>
	core<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/user/login&quot;</span><span class="token punctuation">,</span> middleware<span class="token punctuation">.</span><span class="token function">Test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserLoginController<span class="token punctuation">)</span>

	subjectApi <span class="token operator">:=</span> core<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;/subject&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token operator">...</span>
		<span class="token comment">// 扩展需求3：在 group 中使用 middleware.Test3() 为单个路由增加中间件</span>
		subjectApi<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/middleware/test3&quot;</span><span class="token punctuation">,</span> middleware<span class="token punctuation">.</span><span class="token function">Test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SubjectAddController<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	core<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/timeout&quot;</span><span class="token punctuation">,</span> middleware<span class="token punctuation">.</span><span class="token function">Timeout</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">,</span> TimeoutController<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字典树中的 Handler 改造成控制器链路 Handlers，找到路由 node 时也就能找到对应的控制器链路，<code>trie.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 代表节点</span>
<span class="token keyword">type</span> node <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span> 
	handlers <span class="token punctuation">[</span><span class="token punctuation">]</span>ControllerHandler <span class="token comment">// 中间件+控制器</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
<span class="token comment">// 增加路由节点</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>tree <span class="token operator">*</span>Tree<span class="token punctuation">)</span> <span class="token function">AddRouter</span><span class="token punctuation">(</span>uri <span class="token builtin">string</span><span class="token punctuation">,</span> handlers <span class="token punctuation">[</span><span class="token punctuation">]</span>ControllerHandler<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
				cnode<span class="token punctuation">.</span>handlers <span class="token operator">=</span> handlers
	<span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 匹配uri</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>tree <span class="token operator">*</span>Tree<span class="token punctuation">)</span> <span class="token function">FindHandler</span><span class="token punctuation">(</span>uri <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ControllerHandler <span class="token punctuation">{</span>
	matchNode <span class="token operator">:=</span> tree<span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">matchNode</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
	<span class="token keyword">if</span> matchNode <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> matchNode<span class="token punctuation">.</span>handlers
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改造框架上下文，由上下文存储 handler 链条，并且维护一个链路下标，<code>context.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 自定义 Context</span>
<span class="token keyword">type</span> Context <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	handlers <span class="token punctuation">[</span><span class="token punctuation">]</span>ControllerHandler <span class="token comment">// 当前请求的handler链条</span>
	index    <span class="token builtin">int</span>                 <span class="token comment">// 当前请求调用到调用链的哪个节点</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewContext</span><span class="token punctuation">(</span>r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">)</span> <span class="token operator">*</span>Context <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Context<span class="token punctuation">{</span>
		<span class="token operator">...</span>
		writerMux<span class="token punctuation">:</span>      <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		index<span class="token punctuation">:</span>          <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 为context设置handlers</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">SetHandlers</span><span class="token punctuation">(</span>handlers <span class="token punctuation">[</span><span class="token punctuation">]</span>ControllerHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ctx<span class="token punctuation">.</span>handlers <span class="token operator">=</span> handlers
<span class="token punctuation">}</span>

<span class="token comment">// 核心函数，调用context的下一个函数 </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	ctx<span class="token punctuation">.</span>index<span class="token operator">++</span>
	<span class="token keyword">if</span> ctx<span class="token punctuation">.</span>index <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>ctx<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Next()</code> 函数会在框架的两个地方被调用：</p><ul><li>第一个是在此次请求处理的入口处，即 Core 的 ServeHttp；</li><li>第二个是在<strong>每个中间件</strong>的逻辑代码中，用于调用下个中间件。</li></ul><p>上面是链路的改造，使框架中间件链路能顺利连起来，下面开始中间件注册。</p><ul><li>首先为 Group 和 Core 两个结构增加注册中间件入口 <code>Use()</code></li><li>并且在路由注册时，需要支持可变参数（<code>handlers ...ControllerHandler</code>）、聚合控制器（<code>allHandlers</code>）。</li></ul><p>改造 Group，使中间件思想融入嵌套分组中 <code>group.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> IGroup <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// 实现HttpMethod方法</span>
	<span class="token function">Get</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>ControllerHandler<span class="token punctuation">)</span>
	<span class="token function">Post</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>ControllerHandler<span class="token punctuation">)</span>
	<span class="token function">Put</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>ControllerHandler<span class="token punctuation">)</span>
	<span class="token function">Delete</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>ControllerHandler<span class="token punctuation">)</span>

	<span class="token comment">// 实现嵌套group</span>
	<span class="token function">Group</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> IGroup
	<span class="token comment">// 嵌套中间件</span>
	<span class="token function">Use</span><span class="token punctuation">(</span>middlewares <span class="token operator">...</span>ControllerHandler<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> Group <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	middlewares <span class="token punctuation">[</span><span class="token punctuation">]</span>ControllerHandler <span class="token comment">// 存放中间件</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现Get方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>uri <span class="token builtin">string</span><span class="token punctuation">,</span> handlers <span class="token operator">...</span>ControllerHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	uri <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">getAbsolutePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> uri
	allHandlers <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">getMiddlewares</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handlers<span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment">// 聚合</span>
	g<span class="token punctuation">.</span>core<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> allHandlers<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">...</span>  <span class="token comment">// NewGroup  //  POST、PUT、DELETE</span>

<span class="token comment">// 获取某个group的middleware</span>
<span class="token comment">// 这里就是获取除了Get/Post/Put/Delete之外设置的middleware</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">getMiddlewares</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ControllerHandler <span class="token punctuation">{</span>
	<span class="token keyword">if</span> g<span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> g<span class="token punctuation">.</span>middlewares
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">getMiddlewares</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span>middlewares<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注册中间件</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Use</span><span class="token punctuation">(</span>middlewares <span class="token operator">...</span>ControllerHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	g<span class="token punctuation">.</span>middlewares <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>middlewares<span class="token punctuation">,</span> middlewares<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心同步修改实现，增加全局中间件应用 ，<code>core.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 框架核心结构</span>
<span class="token keyword">type</span> Core <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	middlewares <span class="token punctuation">[</span><span class="token punctuation">]</span>ControllerHandler <span class="token comment">// 从 core 这边设置的中间件   </span>
<span class="token punctuation">}</span>

<span class="token operator">...</span> <span class="token comment">// NewCore</span>

<span class="token comment">// 匹配 GET 方法, 增加路由规则</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Core<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">,</span> handlers <span class="token operator">...</span>ControllerHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 将core的middleware 和 handlers结合起来</span>
	allHandlers <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>middlewares<span class="token punctuation">,</span> handlers<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>router<span class="token punctuation">[</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">AddRouter</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> allHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;add router error: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">...</span>  <span class="token comment">//  POST、PUT、DELETE   、Group</span>

<span class="token comment">// 注册全局中间件</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Core<span class="token punctuation">)</span> <span class="token function">Use</span><span class="token punctuation">(</span>middlewares <span class="token operator">...</span>ControllerHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>middlewares <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>middlewares<span class="token punctuation">,</span> middlewares<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 匹配路由，如果没有匹配到，返回nil</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Core<span class="token punctuation">)</span> <span class="token function">FindRouteByRequest</span><span class="token punctuation">(</span>request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ControllerHandler <span class="token punctuation">{</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 框架核心结构实现 Handler 接口</span>
<span class="token comment">// 所有请求都进入这个函数, 这个函数负责路由分发</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Core<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 封装自定义context</span>
	ctx <span class="token operator">:=</span> <span class="token function">NewContext</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span>

	<span class="token comment">// 寻找路由</span>
	handlers <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">FindRouteByRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
	<span class="token keyword">if</span> handlers <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果没有找到，这里打印日志</span>
		ctx<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">&quot;not found&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 设置context中的handlers字段</span>
	ctx<span class="token punctuation">.</span><span class="token function">SetHandlers</span><span class="token punctuation">(</span>handlers<span class="token punctuation">)</span>

	<span class="token comment">// 调用路由函数，如果返回err 代表存在内部错误，返回500状态码</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&quot;inner error&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="中间件的编写" tabindex="-1"><a class="header-anchor" href="#中间件的编写"><span>中间件的编写</span></a></h3><p>在中间件中调用下一个链路（<code>ctx.Next()</code>），形成闭环。例如超时 <code>timeout.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Timeout</span><span class="token punctuation">(</span>d time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> framework<span class="token punctuation">.</span>ControllerHandler <span class="token punctuation">{</span>
	<span class="token comment">// 使用函数回调</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>framework<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		finish <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		panicChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token comment">// 执行业务逻辑前预操作：初始化超时context</span>
		durationCtx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">BaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>
		<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> p <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					panicChan <span class="token operator">&lt;-</span> p
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">// 使用next执行具体的业务逻辑</span>
			ctx<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			finish <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 执行业务逻辑后操作</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> p <span class="token operator">:=</span> <span class="token operator">&lt;-</span>panicChan<span class="token punctuation">:</span>
			ctx<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&quot;time out&quot;</span><span class="token punctuation">)</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>finish<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;finish&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>durationCtx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			ctx<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&quot;time out&quot;</span><span class="token punctuation">)</span>
			ctx<span class="token punctuation">.</span><span class="token function">SetHasTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05、封装让框架更好用" tabindex="-1"><a class="header-anchor" href="#_05、封装让框架更好用"><span>05、封装让框架更好用</span></a></h2><h3 id="目标-2" tabindex="-1"><a class="header-anchor" href="#目标-2"><span>目标</span></a></h3><p>尽量在 context 这个数据结构中，封装“读取请求数据”和“封装返回数据”中的方法。</p><ul><li><p>读取请求数据</p><ul><li>Header 信息 <ul><li>基础信息，比如请求地址、请求方法、请求 IP、请求域名、Cookie 信息等。</li><li>更细节的内容编码格式、缓存时长等，由于涉及的 HTTP 协议细节内容比较多，我们很难将每个细节都封装出来，但是它们都是以 key=value 的形式传递到服务端的，所以这里也考虑封装一个通用的方法。</li></ul></li><li>Body 信息（HTTP 是已经以某种形式封装好的） <ul><li>可能是 JSON 格式、XML 格式、其他格式</li><li>也可能是 Form 表单格式 <ul><li>它可能包含 File 文件，请求参数和返回值肯定和其他的 Form 表单字段是不一样的，需要我们对其单独封装一个函数</li></ul></li></ul></li></ul></li><li><p>封装返回数据</p><ul><li>Header 头部 <ul><li>我们经常要设置的是返回状态码和 Cookie，所以单独为其封装。</li><li>其他的 Header 同样是 key=value 形式设置的，设置一个通用的方法即可。</li></ul></li><li>返回 Body 体 <ul><li>比如 JSON、JSONP、XML、HTML 或者其他文本格式，要针对不同的 Body 体形式，进行不同的封装</li></ul></li></ul></li></ul><h3 id="如何实现-2" tabindex="-1"><a class="header-anchor" href="#如何实现-2"><span>如何实现</span></a></h3><p>首先，定义一个清晰的、包含若干个方法的接口，可以让使用者更加清晰明了地使用框架，同时做到“实现解耦”。</p>`,110),v={href:"https://github.com/spf13/cast",target:"_blank",rel:"noopener noreferrer"},m={href:"https://golang.org/pkg/html/template/",target:"_blank",rel:"noopener noreferrer"},b=p(`<h3 id="代码实现-2" tabindex="-1"><a class="header-anchor" href="#代码实现-2"><span>代码实现</span></a></h3><h4 id="irequest-接口定义与实现" tabindex="-1"><a class="header-anchor" href="#irequest-接口定义与实现"><span>IRequest 接口定义与实现</span></a></h4><p>读取请求数据 IRequest，<code>request.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 代表请求包含的方法</span>
<span class="token keyword">type</span> IRequest <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// 请求地址 url 中带的参数</span>
	<span class="token comment">// 形如: foo.com?a=1&amp;b=bar&amp;c[]=bar</span>
	<span class="token function">QueryInt</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">QueryInt64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">QueryFloat64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">QueryFloat32</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">float32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">QueryBool</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">QueryString</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">QueryStringSlice</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">Query</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token comment">// 路由匹配中带的参数</span>
	<span class="token comment">// 形如 /book/:id</span>
	<span class="token function">ParamInt</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">ParamInt64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">ParamFloat64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">ParamFloat32</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">float32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">ParamBool</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">ParamString</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">Param</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token comment">// form 表单中带的参数</span>
	<span class="token function">FormInt</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">FormInt64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">FormFloat64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">FormFloat32</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">float32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">FormBool</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">FormString</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">FormStringSlice</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">FormFile</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>multipart<span class="token punctuation">.</span>FileHeader<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">Form</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token comment">// json body</span>
	<span class="token function">BindJson</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token comment">// xml body</span>
	<span class="token function">BindXml</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token comment">// 其他格式</span>
	<span class="token function">GetRawData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>

	<span class="token comment">// 基础信息</span>
	<span class="token function">Uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token function">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token function">ClientIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>

	<span class="token comment">// header</span>
	<span class="token function">Headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	<span class="token function">Header</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token comment">// cookie</span>
	<span class="token function">Cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	<span class="token function">Cookie</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> defaultMultipartMemory <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span> <span class="token comment">// 32 MB</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> IRequest <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span> <span class="token comment">// 确保类型实现接口</span>

<span class="token comment">// 获取请求地址中所有参数</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">QueryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> ctx<span class="token punctuation">.</span>request <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">...</span> <span class="token comment">// Query* </span>

<span class="token comment">// 获取路由参数</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Param</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> ctx<span class="token punctuation">.</span>params <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ctx<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			<span class="token keyword">return</span> val
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token operator">...</span> <span class="token comment">// Param* </span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">FormAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> ctx<span class="token punctuation">.</span>request <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>PostForm
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">FormFile</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>multipart<span class="token punctuation">.</span>FileHeader<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>MultipartForm <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">ParseMultipartForm</span><span class="token punctuation">(</span>defaultMultipartMemory<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	f<span class="token punctuation">,</span> fh<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">FormFile</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> fh<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>

<span class="token operator">...</span> <span class="token comment">// Form* </span>

<span class="token comment">// 将body文本解析到obj结构体中</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">BindJson</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> ctx<span class="token punctuation">.</span>request <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// 读取文本</span>
		body<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 重新填充request.Body，为后续的逻辑二次读取做准备</span>
		ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Body <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">NopCloser</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span>

		<span class="token comment">// 解析到obj结构体中</span>
		err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;ctx.request empty&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// xml body</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">BindXml</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> ctx<span class="token punctuation">.</span>request <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		body<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Body <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">NopCloser</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span>

		err <span class="token operator">=</span> xml<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;ctx.request empty&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 其他格式</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">GetRawData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> ctx<span class="token punctuation">.</span>request <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		body<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Body <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">NopCloser</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> body<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;ctx.request empty&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 基础信息</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>RequestURI <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Method <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Host <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">ClientIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> ctx<span class="token punctuation">.</span>request
	ipAddress <span class="token operator">:=</span> r<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;X-Real-Ip&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> ipAddress <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		ipAddress <span class="token operator">=</span> r<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;X-Forwarded-For&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> ipAddress <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		ipAddress <span class="token operator">=</span> r<span class="token punctuation">.</span>RemoteAddr
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ipAddress
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Header
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Header</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	vals <span class="token operator">:=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Values</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">if</span> vals <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> vals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	cookies <span class="token operator">:=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">Cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ret <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cookie <span class="token operator">:=</span> <span class="token keyword">range</span> cookies <span class="token punctuation">{</span>
		ret<span class="token punctuation">[</span>cookie<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> cookie<span class="token punctuation">.</span>Value
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ret
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Cookie</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cookies <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> cookies<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> val<span class="token punctuation">,</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="iresponse-接口定义与实现" tabindex="-1"><a class="header-anchor" href="#iresponse-接口定义与实现"><span>IResponse 接口定义与实现</span></a></h4><p>封装返回数据 IResponse，<code>response.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// IResponse 代表返回方法</span>
<span class="token keyword">type</span> IResponse <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Json</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse
	<span class="token function">Jsonp</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse
	<span class="token function">Xml</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse
	<span class="token function">Html</span><span class="token punctuation">(</span>template <span class="token builtin">string</span><span class="token punctuation">,</span> obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse
	<span class="token function">Text</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse

	<span class="token comment">// 重定向</span>
	<span class="token function">Redirect</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> IResponse
	<span class="token comment">// header</span>
	<span class="token function">SetHeader</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">)</span> IResponse
	<span class="token function">SetCookie</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">,</span> maxAge <span class="token builtin">int</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain <span class="token builtin">string</span><span class="token punctuation">,</span> secure<span class="token punctuation">,</span> httpOnly <span class="token builtin">bool</span><span class="token punctuation">)</span> IResponse
	<span class="token function">SetStatus</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">)</span> IResponse
	<span class="token function">SetOkStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> IResponse
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> IResponse <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span> <span class="token comment">// 确保类型实现接口</span>

<span class="token comment">// Jsonp输出</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Jsonp</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	<span class="token comment">// 获取请求参数callback</span>
	callbackFunc<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">QueryString</span><span class="token punctuation">(</span><span class="token string">&quot;callback&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;callback_function&quot;</span><span class="token punctuation">)</span>
	ctx<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/javascript&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// 输出到前端页面的时候需要注意下进行字符过滤，否则有可能造成xss攻击</span>
	callback <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">JSEscapeString</span><span class="token punctuation">(</span>callbackFunc<span class="token punctuation">)</span>

	<span class="token comment">// 输出函数名</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span>responseWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> ctx <span class="token punctuation">}</span>
	<span class="token comment">// 输出左括号</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> ctx<span class="token punctuation">.</span>responseWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>	<span class="token keyword">return</span> ctx <span class="token punctuation">}</span>
	<span class="token comment">// 数据函数参数</span>
	ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>	<span class="token keyword">return</span> ctx <span class="token punctuation">}</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> ctx<span class="token punctuation">.</span>responseWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>	<span class="token keyword">return</span> ctx <span class="token punctuation">}</span>
	<span class="token comment">// 输出右括号</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> ctx<span class="token punctuation">.</span>responseWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>	<span class="token keyword">return</span> ctx <span class="token punctuation">}</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

<span class="token comment">// xml输出</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Xml</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	byt<span class="token punctuation">,</span> err <span class="token operator">:=</span> xml<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">SetStatus</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	ctx<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/html&quot;</span><span class="token punctuation">)</span>
	ctx<span class="token punctuation">.</span>responseWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>byt<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

<span class="token comment">// html输出</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Html</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">,</span> obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	<span class="token comment">// 读取模版文件，创建template实例</span>
	t<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;output&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> ctx <span class="token punctuation">}</span>
	<span class="token comment">// 执行Execute方法将obj和模版进行结合</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>responseWriter<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ctx
	<span class="token punctuation">}</span>

	ctx<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/html&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

<span class="token comment">// string</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Text</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	out <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> values<span class="token operator">...</span><span class="token punctuation">)</span>
	ctx<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/text&quot;</span><span class="token punctuation">)</span>
	ctx<span class="token punctuation">.</span>responseWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

<span class="token comment">// 重定向</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Redirect</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>responseWriter<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">,</span> path<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusMovedPermanently<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

<span class="token comment">// header</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">SetHeader</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	ctx<span class="token punctuation">.</span>responseWriter<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

<span class="token comment">// Cookie</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">SetCookie</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">,</span> maxAge <span class="token builtin">int</span><span class="token punctuation">,</span> path <span class="token builtin">string</span><span class="token punctuation">,</span> domain <span class="token builtin">string</span><span class="token punctuation">,</span> secure <span class="token builtin">bool</span><span class="token punctuation">,</span> httpOnly <span class="token builtin">bool</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	<span class="token keyword">if</span> path <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		path <span class="token operator">=</span> <span class="token string">&quot;/&quot;</span>
	<span class="token punctuation">}</span>
	http<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>responseWriter<span class="token punctuation">,</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">{</span>
		Name<span class="token punctuation">:</span>     key<span class="token punctuation">,</span>
		Value<span class="token punctuation">:</span>    url<span class="token punctuation">.</span><span class="token function">QueryEscape</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>
		MaxAge<span class="token punctuation">:</span>   maxAge<span class="token punctuation">,</span>
		Path<span class="token punctuation">:</span>     path<span class="token punctuation">,</span>
		Domain<span class="token punctuation">:</span>   domain<span class="token punctuation">,</span>
		SameSite<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
		Secure<span class="token punctuation">:</span>   secure<span class="token punctuation">,</span>
		HttpOnly<span class="token punctuation">:</span> httpOnly<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

<span class="token comment">// 设置状态码</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">SetStatus</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	ctx<span class="token punctuation">.</span>responseWriter<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

<span class="token comment">// 设置200状态</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">SetOkStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	ctx<span class="token punctuation">.</span>responseWriter<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Json</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	byt<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">SetStatus</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	ctx<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>
	ctx<span class="token punctuation">.</span>responseWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>byt<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_06、优雅关闭" tabindex="-1"><a class="header-anchor" href="#_06、优雅关闭"><span>06、优雅关闭</span></a></h2><h3 id="目标-3" tabindex="-1"><a class="header-anchor" href="#目标-3"><span>目标</span></a></h3><p>优雅关闭服务：关闭进程的时候，不能暴力关闭进程，要等进程中的所有请求都逻辑处理结束后才关闭进程。</p><p>分为两步：</p><ul><li>控制关闭进程的操作</li><li>等待所有逻辑都处理结束</li></ul><h3 id="如何实现-3" tabindex="-1"><a class="header-anchor" href="#如何实现-3"><span>如何实现</span></a></h3><h4 id="关闭进程的相关操作" tabindex="-1"><a class="header-anchor" href="#关闭进程的相关操作"><span>关闭进程的相关操作</span></a></h4><ul><li><code>Ctrl + C</code>： <ul><li>向进程发送信号 <code>SIGINT</code> 中断。可以被阻塞和处理的。</li></ul></li><li><code>Ctrl + \\</code>： <ul><li>向进程发送信号 <code>SIGQUIT</code>，和 <code>SIGINT</code> 差不多，可以被阻塞和处理的，默认行为会产生 core 文件。</li></ul></li><li><code>Kill 命令</code>： <ul><li><code>kill pid</code> 会向进程发送 <code>SIGTERM</code> 信号，可以被阻塞和处理的</li><li><code>kill -9 pid</code> 会向进程发送 <code>SIGKILL</code> 信号，不能被阻塞和处理的</li></ul></li></ul><p>在 Golang 标准库中提供了 <code>os/signal</code> 这个库可以用来捕获信号。</p><h4 id="等待所有逻辑都处理结束" tabindex="-1"><a class="header-anchor" href="#等待所有逻辑都处理结束"><span>等待所有逻辑都处理结束</span></a></h4>`,17),f=s("code",null,"net/http",-1),g={href:"https://github.com/braintree/manners",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/tylerstillwater/graceful",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/facebookarchive/grace",target:"_blank",rel:"noopener noreferrer"},h=p(`<p>在 1.8 版本之后，<code>net/http</code> 引入了 <code>server.Shutdown</code> 来进行优雅重启。</p><p>标准库里实现了 <code>inShutdown</code> 原子标记，用来标记服务器是否正在关闭，真正执行操作的是 <code>closeIdleConns</code> 方法。这个方法循环判断所有连接中的请求是否已经完成操作（是否处于 Idle 状态）。</p><h3 id="代码实现-3" tabindex="-1"><a class="header-anchor" href="#代码实现-3"><span>代码实现</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 核心框架初始化</span>
	core <span class="token operator">:=</span> framework<span class="token punctuation">.</span><span class="token function">NewCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 设置路由</span>
	<span class="token function">registerRouter</span><span class="token punctuation">(</span>core<span class="token punctuation">)</span>
	server <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>
		<span class="token comment">// 自定义的请求核心处理函数</span>
		Handler<span class="token punctuation">:</span> core<span class="token punctuation">,</span>
		<span class="token comment">// 请求监听地址</span>
		Addr<span class="token punctuation">:</span> <span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 这个goroutine是启动服务的goroutine</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 当前的goroutine等待信号量</span>
	quit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">)</span>
	signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>quit<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGINT<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGQUIT<span class="token punctuation">)</span>
	<span class="token operator">&lt;-</span>quit <span class="token comment">// 这里会阻塞当前goroutine等待信号</span>

	<span class="token comment">// 设置超时关闭限制</span>
	timeoutCtx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	
	<span class="token comment">// 调用Server.Shutdown graceful结束</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span>timeoutCtx<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Server Shutdown:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_07、理想框架到底长什么样" tabindex="-1"><a class="header-anchor" href="#_07、理想框架到底长什么样"><span>07、理想框架到底长什么样</span></a></h2><h3 id="开源框架怎么比较" tabindex="-1"><a class="header-anchor" href="#开源框架怎么比较"><span>开源框架怎么比较</span></a></h3><p>可以参考的框架评判标准：</p><ul><li><strong>核心模块</strong><ul><li>服务启动方式、路由分发机制、上下文封装性、中间件机制设计等。</li><li>理想的核心模块必须要有设计感，有自己的思想，代码质量、性能都不能出问题。</li></ul></li><li><strong>功能完备</strong><ul><li>是否提供日志模块、是否提供脚手架、命令行工具、缓存机制、ORM 等。</li><li>希望不同水平的同学能写出基本一样的代码，那就要靠框架这个顶层设计来规范。</li></ul></li><li><strong>框架扩展</strong><ul><li>扩展功能时改动是否较大、是否支持功能实现的可插拔等。</li><li>框架要做的事情应该是定义模块与模块之间的交互标准，而不应该直接定义模块的具体实现方式。</li></ul></li><li><strong>框架性能</strong><ul><li>框架每秒支持多少请求、是否有性能问题等。</li><li>不应该把各个框架孤立出来看，应该将差不多量级的性能归为一组。</li></ul></li><li><strong>文档完备</strong> / <strong>社区活跃</strong><ul><li>是否有完善的文档支持、社区是否足够活跃、咨询问题多久回复等。</li><li>从项目官网、GitHub 或邮件组上获取信息。</li></ul></li></ul><h3 id="框架选择" tabindex="-1"><a class="header-anchor" href="#框架选择"><span>框架选择</span></a></h3>`,9),q={href:"https://web-frameworks-benchmark.netlify.app/result",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/mingrammer/go-web-framework-stars",target:"_blank",rel:"noopener noreferrer"},x=s("li",null,[s("strong",null,"Beego"),n("：功能很全的一个框架，设计感较为古早，从零快速开发场景适用。")],-1),S=s("li",null,[s("strong",null,"Echo"),n("：轻量，除了路由、Context 之外，都以 Middleware 形式提供，扩展性强，适合个人开发者。")],-1),P=s("strong",null,"Gin",-1),F={href:"https://github.com/julienschmidt/httprouter",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/gin-contrib",target:"_blank",rel:"noopener noreferrer"},_=p('<p>在保证框架的核心模块能满足要求的情况下，我们一般在功能完备性和框架扩展性之间取舍。</p><ul><li>并发低、人少、开发快，可以优先考虑功能完备性；</li><li>高并发、团队、改动框架需求大，可以优先考虑扩展性；</li><li>更多灵活性，可以考虑从 <code>net/http</code> 标准库开始自研；</li></ul><p>原则：<strong>只选最适合的</strong></p><h2 id="_08、09、集成-gin-替换已有核心" tabindex="-1"><a class="header-anchor" href="#_08、09、集成-gin-替换已有核心"><span>08、09、集成 Gin 替换已有核心</span></a></h2><h3 id="新旧框架差距-细节与生态" tabindex="-1"><a class="header-anchor" href="#新旧框架差距-细节与生态"><span>新旧框架差距：细节与生态</span></a></h3><p>例如 <code>Recovery</code> 的错误捕获，Gin 也很细节的处理了底层连接的异常，并且进行堆栈信息打印等（细节处理）。</p><p>例如路由处理，Gin 选用了压缩后的基数树（radix tree），并且使用 <code>indices</code>、 <code>unsafe.Pointer</code> 等，优化查询效率减少资源消耗。</p>',7),I={href:"https://github.com/orgs/gin-contrib/repositories",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/gin-gonic/contrib",target:"_blank",rel:"noopener noreferrer"},A=s("p",null,[n("这些中间件包含了 Web 开发各个方面的功能，比如提供跨域请求的 cors 中间件、提供本地缓存的 cache 中间件、集成了 pprof 工具的 pprof 中间件、自动生成全链路 trace 的 opengintracing 中间件等等。 "),s("strong",null,"如果你用一个自己的框架，就需要重建生态一一开发，这是非常烦琐的，而且工作量巨大"),n("。")],-1),G=s("h3",{id:"站在巨人的肩膀才能做得更好",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#站在巨人的肩膀才能做得更好"},[s("span",null,"站在巨人的肩膀才能做得更好")])],-1),T=s("p",null,[n("只有站在巨人的肩膀才能做得更好，如果是为了学习，直接从零自己边造轮子边学是个好方法； "),s("strong",null,"但是如果你的目标是工业使用，那从零开始就非常不明智了"),n("。")],-1),M=s("strong",null,"其实很多市面上的框架，也都是基于已有的轮子来再开发的",-1),N={href:"https://github.com/julienschmidt/httprouter",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/go-macaron/macaron",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/go-martini/martini",target:"_blank",rel:"noopener noreferrer"},B=p('<p>所以，我们先从零搭建出框架的核心部分，然后基于 Gin 来做进一步拓展和完善整个框架。</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p><strong>现代框架的理念不在于实现，而更多在于组合</strong>。基于某些基础组件或者基础实现，不断按照自己或者公司的需求，进行二次改造和二次开发，从而打造出适合需求的形态。</p><p>比如 PHP 领域的 Laravel 框架，就是将各种底层组件、Symfony、Eloquent ORM、Monolog 等进行组装，而框架自身提供统一的组合调度方式；比如 Ruby 领域的 Rails 框架，整合了 Ruby 领域的各种优秀开源库。</p><p><strong>而框架的重点在于如何整理组件库、如何提供更便捷的机制，让程序员迅速解决问题</strong>。</p><h3 id="如何借力-开源项目的许可协议" tabindex="-1"><a class="header-anchor" href="#如何借力-开源项目的许可协议"><span>如何借力，开源项目的许可协议</span></a></h3><p>最主流的开源许可证有 6 种：Apache、BSD、GPL、LGPL、MIT、Mozillia。</p><p>BSD 许可证、MIT 许可证和 Apache 许可证属于三个比较宽松的许可，都允许对源代码进行修改，且可以在闭源软件中使用，区别在于对新的修改，是否必须使用原先的许可证格式，以及修改后的软件是否能以原软件的名义进行销售等。</p>',8),H={href:"https://github.com/gin-gonic/gin/blob/master/LICENSE",target:"_blank",rel:"noopener noreferrer"},W=p(`<ul><li>允许被许可人使用、复制、修改、合并、出版发行、散布、再许可、售卖软件及软件副本。</li><li>唯一条件是在软件和软件副本中必须包含著作权声明和本许可声明。</li></ul><p>只需要在软件中包含著作权声明和许可协议声明就行，且不要求新的文件必须使用 MIT 协议。</p><h3 id="如何将-gin-迁移进框架" tabindex="-1"><a class="header-anchor" href="#如何将-gin-迁移进框架"><span>如何将 Gin 迁移进框架</span></a></h3><h4 id="复制项目与替换引用" tabindex="-1"><a class="header-anchor" href="#复制项目与替换引用"><span>复制项目与替换引用</span></a></h4><p>复制项目进 <code>framework</code> 目录的 <code>gin</code> 子目录里</p><ul><li>将 Gin 目录下的 <code>go.mod</code> 的内容复制到我们项目的 <code>go.mod</code> 里，并将 Gin 目录下的 <code>go.mod</code> 和 <code>go.sum</code> 删除。</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 这里我从 module gob 改为为 module github.com/chenbihao/gob</span>
<span class="token comment">// 引用到包相关的也需要改</span>
<span class="token comment">// 例如 main.go 中的 import &quot;gob/framework&quot; 需改成 &quot;github.com/chenbihao/gob/framework&quot;</span>
module github<span class="token punctuation">.</span>com<span class="token operator">/</span>用户名<span class="token operator">/</span>项目名  <span class="token comment">// 不一定要项目地址，可以自定义</span>

<span class="token keyword">go</span> <span class="token number">1.20</span>

require <span class="token punctuation">(</span>
	<span class="token operator">...</span>  
	github<span class="token punctuation">.</span>com<span class="token operator">/</span>spf13<span class="token operator">/</span>cast v1<span class="token punctuation">.</span><span class="token number">6.0</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将 Gin 中原有 Gin 库的引用地址，统一替换为当前项目的地址</li></ul><p>将 Gin 框架中引用 <code>github.com/gin-gonic/gin</code> 的地方替换为 <code>github.com/用户名/项目名/framework/gin</code></p><p>做完上述两步的操作之后，项目 <code>github.com/chenbihao/gob</code> 就包含了 Gin 1.9.1 了。</p><h4 id="迁移功能" tabindex="-1"><a class="header-anchor" href="#迁移功能"><span>迁移功能</span></a></h4><p>梳理下目前已经实现的模块：</p>`,12),K=p("<li>Context（Gin 已有，逻辑差不多） <ul><li>作用：请求控制器，控制每个请求的超时等逻辑；</li><li><code>Core</code> 数据结构对应 Gin 中的 <code>Engine</code>，</li><li><code>Group</code> 数据结构对应 Gin 的 <code>Group</code> 结构，</li><li><code>Context</code> 数据结构对应 Gin 的 <code>Context</code> 数据结构。</li></ul></li>",1),O={href:"https://github.com/julienschmidt/httprouter",target:"_blank",rel:"noopener noreferrer"},U=s("ul",null,[s("li",null,"作用：让请求更快寻找目标函数，并且支持通配符、分组等方式制定路由规则；")],-1),j=p("<li>中间件（Gin 已有，无返回错误） <ul><li>作用：能将通用逻辑转化为中间件，并串联中间件实现业务逻辑；</li></ul></li><li>封装（Gin 部分实现） <ul><li>作用：提供易用的逻辑，把 <code>request</code> 和 <code>response</code> 封装在 Context 结构中；</li></ul></li><li>重启（直接用） <ul><li>作用：实现优雅关闭机制，让服务可以重启。</li></ul></li>",3),J=p(`<p>Context 实现基本一致，路由实现更好，中间件调整成无返回错误。</p><p>以上直接用实现得更好的 gin 框架内容，保留我们自己封装的优雅关闭，以及 <code>request</code> 和 <code>response</code> 。</p><h4 id="代码实现-4" tabindex="-1"><a class="header-anchor" href="#代码实现-4"><span>代码实现</span></a></h4><p><code>main.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 核心框架初始化</span>
	<span class="token comment">// core := framework.NewCore()</span>
	core <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   
	
	<span class="token comment">// 设置路由  </span>
	<span class="token function">registerRouter</span><span class="token punctuation">(</span>core<span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册路由也改为 gin 的用法，<code>router.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 注册路由规则</span>
<span class="token comment">// func registerRouter(core *framework.Core) {</span>
<span class="token keyword">func</span> <span class="token function">registerRouter</span><span class="token punctuation">(</span>core <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	core<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>gin<span class="token punctuation">.</span><span class="token function">Recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 使用 gin 的 Recovery 中间件</span>
	core<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>middleware<span class="token punctuation">.</span><span class="token function">Cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// gin.Engine 的方法为全大写</span>
	core<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/user/login&quot;</span><span class="token punctuation">,</span> middleware<span class="token punctuation">.</span><span class="token function">Test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserLoginController<span class="token punctuation">)</span>
	
	subjectApi <span class="token operator">:=</span> core<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;/subject&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		subjectApi<span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">&quot;/:id&quot;</span><span class="token punctuation">,</span> SubjectDelController<span class="token punctuation">)</span>
		subjectApi<span class="token punctuation">.</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">&quot;/:id&quot;</span><span class="token punctuation">,</span> SubjectUpdateController<span class="token punctuation">)</span>
		subjectApi<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/:id&quot;</span><span class="token punctuation">,</span> SubjectGetController<span class="token punctuation">)</span>
		subjectApi<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/list/all&quot;</span><span class="token punctuation">,</span> SubjectListController<span class="token punctuation">)</span>
		subjectInnerApi <span class="token operator">:=</span> subjectApi<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;/info&quot;</span><span class="token punctuation">)</span>
		subjectInnerApi<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/name&quot;</span><span class="token punctuation">,</span> SubjectNameController<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	core<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/timeout&quot;</span><span class="token punctuation">,</span> middleware<span class="token punctuation">.</span><span class="token function">Timeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">,</span> TimeoutController<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>context.go</code> 迁入 <code>gin</code> 文件夹里，并且改名为 <code>gob_context.go</code>，只保留 <code>BaseContext()</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">BaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>中间件改动，<code>middleware</code> 文件夹：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">MiddlewareName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> framework<span class="token punctuation">.</span>ControllerHandler <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>framework<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>  
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span><span class="token punctuation">}</span>

<span class="token comment">// framework.ControllerHandler 改成 gin.HandlerFunc ，</span>
<span class="token comment">// *framework.Context 改成 *gin.Context  并且去掉返回错误</span>

<span class="token keyword">func</span> <span class="token function">MiddlewareName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>业务 <code>controller.go</code> 改动：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">UserLoginController</span><span class="token punctuation">(</span>c <span class="token operator">*</span>framework<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>

<span class="token comment">// 把 *framework.Context  改成 *gin.Context</span>
<span class="token comment">// 去掉返回错误，并且把相关 IResponse 调整一下</span>

<span class="token keyword">func</span> <span class="token function">UserLoginController</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>request.go</code> 与 <code>response.go</code> 迁入 <code>gin</code> 文件夹里，并且改名为 <code>gob_request.go</code> 与 <code>gob_response.go</code>，</p><p>改造 <code>gob_request.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// const defaultMultipartMemory = 32 &lt;&lt; 20 // 32 MB</span>

<span class="token comment">// 代表请求包含的方法</span>
<span class="token keyword">type</span> IRequest <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// 请求地址url中带的参数</span>
	<span class="token function">DefaultQueryInt</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultQueryInt64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultQueryFloat64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultQueryFloat32</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">float32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultQueryBool</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultQueryString</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultQueryStringSlice</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>

	<span class="token comment">// 路由匹配中带的参数</span>
	<span class="token function">DefaultParamInt</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultParamInt64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultParamFloat64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultParamFloat32</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">float32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultParamBool</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultParamString</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultParam</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token comment">// form表单中带的参数</span>
	<span class="token function">DefaultFormInt</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultFormInt64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultFormFloat64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultFormFloat32</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">float32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultFormBool</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultFormString</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultFormStringSlice</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token function">DefaultFormFile</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>multipart<span class="token punctuation">.</span>FileHeader<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">DefaultForm</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> IRequest <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span> <span class="token comment">// 确保类型实现接口</span>

<span class="token comment">// 获取请求地址中所有参数</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">QueryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	ctx<span class="token punctuation">.</span><span class="token function">initQueryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span>queryCache
<span class="token punctuation">}</span>

<span class="token comment">// gin 已经实现的</span>
<span class="token comment">//func (ctx *Context) Query(key string) interface{} {</span>

<span class="token operator">...</span> <span class="token comment">// DefaultQuery*</span>

<span class="token comment">// 获取路由参数</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">DefaultParam</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ctx<span class="token punctuation">.</span>Params<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> val
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token operator">...</span> <span class="token comment">// DefaultParam*</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">FormAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	ctx<span class="token punctuation">.</span><span class="token function">initFormCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span>formCache
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">DefaultFormFile</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>multipart<span class="token punctuation">.</span>FileHeader<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> ctx<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>MultipartForm <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">ParseMultipartForm</span><span class="token punctuation">(</span>defaultMultipartMemory<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	f<span class="token punctuation">,</span> fh<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">FormFile</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> fh<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>

<span class="token operator">...</span> <span class="token comment">// DefaultForm*</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>gob_response.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// IResponse 代表返回方法</span>
<span class="token keyword">type</span> IResponse <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// Json 输出</span>
	<span class="token function">IJson</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse
	<span class="token comment">// Jsonp 输出</span>
	<span class="token function">IJsonp</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse
	<span class="token comment">// xml 输出</span>
	<span class="token function">IXml</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse
	<span class="token comment">// html 输出</span>
	<span class="token function">IHtml</span><span class="token punctuation">(</span>template <span class="token builtin">string</span><span class="token punctuation">,</span> obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse
	<span class="token comment">// string</span>
	<span class="token function">IText</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse

	<span class="token comment">// 重定向</span>
	<span class="token function">IRedirect</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> IResponse

	<span class="token comment">// header</span>
	<span class="token function">ISetHeader</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">)</span> IResponse
	<span class="token comment">// Cookie</span>
	<span class="token function">ISetCookie</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">,</span> maxAge <span class="token builtin">int</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain <span class="token builtin">string</span><span class="token punctuation">,</span> secure<span class="token punctuation">,</span> httpOnly <span class="token builtin">bool</span><span class="token punctuation">)</span> IResponse
	<span class="token comment">// 设置状态码</span>
	<span class="token function">ISetStatus</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">)</span> IResponse
	<span class="token comment">// 设置200状态</span>
	<span class="token function">ISetOkStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> IResponse
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> IResponse <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span> <span class="token comment">// 确保类型实现接口</span>

<span class="token comment">// Jsonp输出</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">IJsonp</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	<span class="token comment">// 获取请求参数callback</span>
	callbackFunc <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">&quot;callback&quot;</span><span class="token punctuation">)</span>
	ctx<span class="token punctuation">.</span><span class="token function">ISetHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/javascript&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// 输出到前端页面的时候需要注意下进行字符过滤，否则有可能造成xss攻击</span>
	callback <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">JSEscapeString</span><span class="token punctuation">(</span>callbackFunc<span class="token punctuation">)</span>

	<span class="token comment">// 输出函数名</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> ctx <span class="token punctuation">}</span>
	<span class="token comment">// 输出左括号</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> ctx <span class="token punctuation">}</span>
	<span class="token comment">// 数据函数参数</span>
	ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> ctx <span class="token punctuation">}</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> ctx <span class="token punctuation">}</span>
	<span class="token comment">// 输出右括号</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> ctx <span class="token punctuation">}</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

<span class="token comment">// xml输出</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">IXml</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	byt<span class="token punctuation">,</span> err <span class="token operator">:=</span> xml<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">ISetStatus</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	ctx<span class="token punctuation">.</span><span class="token function">ISetHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/html&quot;</span><span class="token punctuation">)</span>
	ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>byt<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

<span class="token comment">// html输出</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">IHtml</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">,</span> obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	<span class="token comment">// 读取模版文件，创建template实例</span>
	t<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;output&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ctx
	<span class="token punctuation">}</span>
	<span class="token comment">// 执行Execute方法将obj和模版进行结合</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ctx
	<span class="token punctuation">}</span>
	ctx<span class="token punctuation">.</span><span class="token function">ISetHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/html&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

<span class="token comment">// string</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">IText</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	out <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> values<span class="token operator">...</span><span class="token punctuation">)</span>
	ctx<span class="token punctuation">.</span><span class="token function">ISetHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/text&quot;</span><span class="token punctuation">)</span>
	ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">IRedirect</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> path<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusMovedPermanently<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">ISetHeader</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">ISetCookie</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">,</span> maxAge <span class="token builtin">int</span><span class="token punctuation">,</span> path <span class="token builtin">string</span><span class="token punctuation">,</span> domain <span class="token builtin">string</span><span class="token punctuation">,</span> secure <span class="token builtin">bool</span><span class="token punctuation">,</span> httpOnly <span class="token builtin">bool</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	<span class="token keyword">if</span> path <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		path <span class="token operator">=</span> <span class="token string">&quot;/&quot;</span>
	<span class="token punctuation">}</span>
	http<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">{</span>
		Name<span class="token punctuation">:</span>     key<span class="token punctuation">,</span>
		Value<span class="token punctuation">:</span>    url<span class="token punctuation">.</span><span class="token function">QueryEscape</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>
		MaxAge<span class="token punctuation">:</span>   maxAge<span class="token punctuation">,</span>
		Path<span class="token punctuation">:</span>     path<span class="token punctuation">,</span>
		Domain<span class="token punctuation">:</span>   domain<span class="token punctuation">,</span>
		SameSite<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
		Secure<span class="token punctuation">:</span>   secure<span class="token punctuation">,</span>
		HttpOnly<span class="token punctuation">:</span> httpOnly<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">ISetStatus</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">ISetOkStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">IJson</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> IResponse <span class="token punctuation">{</span>
	byt<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">ISetStatus</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	ctx<span class="token punctuation">.</span><span class="token function">ISetHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>
	ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>byt<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ctx
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!note] 注意：在运行时需要 build 整个项目，否则会导致找不到方法</p><p>Goland 中可以配置成：package 模式，包路径为：github.com/chenbihao/gob</p></blockquote><h4 id="代码验证" tabindex="-1"><a class="header-anchor" href="#代码验证"><span>代码验证</span></a></h4><p>调用 <code>go test ./...</code> 来运行 Gin 程序的所有测试用例，显示成功则表示我们的迁移成功。</p><p>并且通过 <code>go build &amp;&amp; ./gob</code> 可以看到熟悉的 gin 调试模式的输出。</p><h2 id="_10、11、面向接口编程-封装服务" tabindex="-1"><a class="header-anchor" href="#_10、11、面向接口编程-封装服务"><span>10、11、面向接口编程：封装服务</span></a></h2><p>先接口后实现的方式，其实不仅仅是一种代码优化手段，更是一种编程思想：面向接口编程</p><h3 id="如何理解面向接口编程" tabindex="-1"><a class="header-anchor" href="#如何理解面向接口编程"><span>如何理解面向接口编程</span></a></h3><h4 id="抽象业务" tabindex="-1"><a class="header-anchor" href="#抽象业务"><span>抽象业务</span></a></h4><p>首先，接口实现了对业务逻辑的抽象，设计接口就是抽象业务的过程。</p><h4 id="屏蔽具体实现" tabindex="-1"><a class="header-anchor" href="#屏蔽具体实现"><span>屏蔽具体实现</span></a></h4><p>其次，接口的使用能让调用方对能力敏感，而对具体实现不敏感。</p><h4 id="面向接口-对象-过程" tabindex="-1"><a class="header-anchor" href="#面向接口-对象-过程"><span>面向接口/对象/过程</span></a></h4><p>面向过程：缺点是一旦需求有一些变化，整个链路的改动都会受影响。</p><p>面向对象：抽象性强，但是封装性还不够。</p><p>面向接口：</p><p>面对业务，我们并不先定义具体的对象、思考对象有哪些属性，而是 <strong>先思考如何抽象接口，把接口的定义放在第一步，然后多个模块之间梳理如何通过接口进行交互，最后才是实现具体的模块</strong>。</p><h3 id="接口服务的理论基础" tabindex="-1"><a class="header-anchor" href="#接口服务的理论基础"><span>接口服务的理论基础</span></a></h3><p>按照面向接口编程的理念，将每个模块看成是一个服务，服务的具体实现不关心，关心的是服务提供的能力，即接口协议。</p><p><strong>定义好每个模块服务的接口协议，规范服务与服务之间的调用，并且管理每个服务的具体实现。</strong></p><p>每个模块服务都做两件事情：</p><ol><li><strong>服务提供者</strong>（service provider）： <ul><li>提供是 “创建服务实例的方法”</li><li>和自己提供的接口协议做绑定，这样当其他人要使用这个接口协议时能找到自己；</li></ul></li><li><strong>服务容器</strong>（service container）： <ul><li>提供 “实例化服务的方法”</li><li>使用到其他接口协议的时候，去框架主体中寻找。</li></ul></li></ol><p>在框架初始化启动的时候，可以选择在服务容器中绑定多个服务提供者，每个服务提供者对应一个凭证。</p><p>当要使用到某个服务的时候，再根据这个凭证去服务容器中，获取这个服务提供者提供的服务。</p><p>**服务实例拥有哪些能力，即符合哪个接口协议，是预先在框架主体中定义好的。</p><h3 id="服务提供者的接口定义" tabindex="-1"><a class="header-anchor" href="#服务提供者的接口定义"><span>服务提供者的接口定义</span></a></h3><p>服务提供者需要以下能力：</p><ul><li>三个基础能力 <ul><li>获取服务凭证的能力 <code>Name</code>；</li><li>注册服务实例化的方法的能力 <code>Register</code>；</li><li>获取服务实例化方法参数的能力 <code>Params</code>；</li></ul></li><li>两个与实例化控制相关的方法 <ul><li>控制实例化时机方法 <code>IsDefer</code></li><li>实例化预处理的方法 <code>Boot</code>。</li></ul></li></ul><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1"><span>小结</span></a></h3><p>定义好每个模块服务的接口，规范服务与服务之间的调用，并且管理每个服务的具体实现</p><h3 id="服务容器的实现" tabindex="-1"><a class="header-anchor" href="#服务容器的实现"><span>服务容器的实现</span></a></h3><h4 id="目标-4" tabindex="-1"><a class="header-anchor" href="#目标-4"><span>目标</span></a></h4><p>框架的核心设计就是：框架主体作为一个服务容器，其他各个服务模块都作为服务提供者，在服务容器中注册自己的服务凭证和服务接口，通过服务凭证来获取具体的服务实例。</p><p>这样，功能的具体实现交给了各个服务模块，我们只需要规范服务提供者也就是服务容器中的接口协议。</p><h4 id="如何实现-4" tabindex="-1"><a class="header-anchor" href="#如何实现-4"><span>如何实现</span></a></h4><h5 id="服务容器接口设计" tabindex="-1"><a class="header-anchor" href="#服务容器接口设计"><span>服务容器接口设计</span></a></h5><p><strong>一个服务容器主要的功能是：为服务提供注册绑定、提供获取服务实例</strong>，所以服务容器至少有两个方法：</p><ul><li>注册方法 <code>Bind</code>、以及扩展出判断是否已绑定 <code>IsBind</code> 方法。</li><li>获取实例方法 <code>Make</code>，以及扩展出不返回 error 的 <code>MustMake</code> 方法。</li></ul><p>考虑 <code>Make</code> 的一种拓展场景：</p><ul><li>在获取服务实例的时候，按照不同参数初始化的 <code>MakeNew</code> 的方法，根据参数获取不同实例。</li></ul><h5 id="服务容器具体设计" tabindex="-1"><a class="header-anchor" href="#服务容器具体设计"><span>服务容器具体设计</span></a></h5><p>定义一个 GobContainer 数据结构，并且有 <code>map[string]interface{}</code> 结构 <code>instances</code>，其中 key 为关键字，value 为具体的服务实例，在 <code>Make</code> 系列的方法中，可以根据这个结构获取对应的服务实例。</p><p>服务提供方也需要设计一个 <code>map[string]ServiceProvider</code> 来存储它们，这样在 Bind 操作的时候，只需要将服务提供方绑定到某个关键字凭证上即可。</p><h5 id="容器与框架结合" tabindex="-1"><a class="header-anchor" href="#容器与框架结合"><span>容器与框架结合</span></a></h5><p>绑定操作是全局的操作，而获取操作是在单个请求中使用的。所以在全局，我们为服务容器绑定了服务提供方，就能在单个请求中获取这个服务。</p><p>可以 <strong>将服务容器存放在 Engine 中，并且在 Engine 初始化 Context 的时候，将服务容器传递进入 Context</strong>。</p><h4 id="代码实现-5" tabindex="-1"><a class="header-anchor" href="#代码实现-5"><span>代码实现</span></a></h4><p>服务提供者接口定义 <code>framework/provider.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> framework

<span class="token comment">// NewInstance 定义了如何创建一个新实例，所有服务容器的创建服务</span>
<span class="token keyword">type</span> NewInstance <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>

<span class="token comment">// ServiceProvider 定义一个服务提供者需要实现的接口</span>
<span class="token keyword">type</span> ServiceProvider <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// Register 在服务容器中注册了一个实例化服务的方法，是否在注册的时候就实例化，需要参考 IsDefer 接口。</span>
	<span class="token function">Register</span><span class="token punctuation">(</span>Container<span class="token punctuation">)</span> NewInstance
	<span class="token comment">// Boot 在调用实例化服务的时候会调用，可以把一些准备工作：基础配置，初始化参数的操作放在这个里面。</span>
	<span class="token comment">// 如果 Boot 返回 error，整个服务实例化就会实例化失败，返回错误</span>
	<span class="token function">Boot</span><span class="token punctuation">(</span>Container<span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token comment">// IsDefer 决定是否在注册的时候实例化这个服务，如果不是则在第一次 make 的时候进行实例化操作</span>
	<span class="token comment">// false 表示不需要延迟实例化，在注册的时候就实例化。true 表示延迟实例化</span>
	<span class="token function">IsDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
	<span class="token comment">// Params params 定义传递给 NewInstance 的参数，可以自定义多个，建议将 container 作为第一个参数</span>
	<span class="token function">Params</span><span class="token punctuation">(</span>Container<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token comment">// Name 代表了这个服务提供者的凭证</span>
	<span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务容器的接口设计与具体实现 <code>framework/container.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Container 是一个服务容器，提供绑定服务和获取服务的功能</span>
<span class="token keyword">type</span> Container <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// Bind 绑定一个服务提供者，如果关键字凭证已经存在，会进行替换操作，返回 error</span>
	<span class="token function">Bind</span><span class="token punctuation">(</span>provider ServiceProvider<span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token comment">// IsBind 关键字凭证是否已经绑定服务提供者</span>
	<span class="token function">IsBind</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
	<span class="token comment">// Make 根据关键字凭证获取一个服务</span>
	<span class="token function">Make</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token comment">// MustMake 根据关键字凭证获取一个服务，如果未绑定服务提供者，那么会 panic。</span>
	<span class="token comment">// 在使用这个接口的时候请保证服务容器已经为这个关键字凭证绑定了服务提供者。</span>
	<span class="token function">MustMake</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token comment">// MakeNew 根据关键字凭证获取一个服务，只是这个服务并不是单例模式的</span>
	<span class="token comment">// 它是根据服务提供者注册的启动函数和传递的 params 参数实例化出来的</span>
	<span class="token comment">// 这个函数在需要为不同参数启动不同实例的时候非常有用</span>
	<span class="token function">MakeNew</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// GobContainer 是服务容器的具体实现</span>
<span class="token keyword">type</span> GobContainer <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Container                            <span class="token comment">// 强制要求 GobContainer 实现 Container 接口</span>
	providers <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>ServiceProvider <span class="token comment">// providers 存储注册的服务提供者，key 为字符串凭证</span>
	instances <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment">// instance 存储具体的实例，key 为字符串凭证</span>
	lock      sync<span class="token punctuation">.</span>RWMutex               <span class="token comment">// lock 用于锁住对容器的变更操作</span>
<span class="token punctuation">}</span>

<span class="token comment">// NewGobContainer 创建一个服务容器</span>
<span class="token keyword">func</span> <span class="token function">NewGobContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>GobContainer <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>GobContainer<span class="token punctuation">{</span>
		providers<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>ServiceProvider<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		instances<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		lock<span class="token punctuation">:</span>      sync<span class="token punctuation">.</span>RWMutex<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// Bind 将服务容器和关键字做了绑定</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>container <span class="token operator">*</span>GobContainer<span class="token punctuation">)</span> <span class="token function">Bind</span><span class="token punctuation">(</span>provider ServiceProvider<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// 写锁</span>
	container<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// key 为关键字，value 为注册的 ServiceProvider</span>
	key <span class="token operator">:=</span> provider<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	container<span class="token punctuation">.</span>providers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> provider
	container<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// key 为关键字，value 为注册的 ServiceProvider</span>
	container<span class="token punctuation">.</span>providers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> provider

	<span class="token comment">// if provider is not defer</span>
	<span class="token keyword">if</span> provider<span class="token punctuation">.</span><span class="token function">IsDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> provider<span class="token punctuation">.</span><span class="token function">Boot</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 实例化方法</span>
		params <span class="token operator">:=</span> provider<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
		method <span class="token operator">:=</span> provider<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
		instance<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">method</span><span class="token punctuation">(</span>params<span class="token operator">...</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		container<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> instance
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>container <span class="token operator">*</span>GobContainer<span class="token punctuation">)</span> <span class="token function">IsBind</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> container<span class="token punctuation">.</span><span class="token function">findServiceProvider</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>container <span class="token operator">*</span>GobContainer<span class="token punctuation">)</span> <span class="token function">findServiceProvider</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> ServiceProvider <span class="token punctuation">{</span>
	container<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> container<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> sp<span class="token punctuation">,</span> ok <span class="token operator">:=</span> container<span class="token punctuation">.</span>providers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> sp
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>container <span class="token operator">*</span>GobContainer<span class="token punctuation">)</span> <span class="token function">newInstance</span><span class="token punctuation">(</span>sp ServiceProvider<span class="token punctuation">,</span> params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// force new a</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> sp<span class="token punctuation">.</span><span class="token function">Boot</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> params <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		params <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	method <span class="token operator">:=</span> sp<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
	ins<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">method</span><span class="token punctuation">(</span>params<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ins<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>

<span class="token comment">// Make 方式调用内部的 make 实现</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>container <span class="token operator">*</span>GobContainer<span class="token punctuation">)</span> <span class="token function">Make</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// MustMake 方式调用内部的 make 实现</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>container <span class="token operator">*</span>GobContainer<span class="token punctuation">)</span> <span class="token function">MustMake</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	serv<span class="token punctuation">,</span> err <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> serv
<span class="token punctuation">}</span>

<span class="token comment">// MakeNew 方式使用内部的 make 初始化</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>container <span class="token operator">*</span>GobContainer<span class="token punctuation">)</span> <span class="token function">MakeNew</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 真正的实例化一个服务</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>container <span class="token operator">*</span>GobContainer<span class="token punctuation">)</span> <span class="token function">make</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> forceNew <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	container<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> container<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 查询是否已经注册了这个服务提供者，如果没有注册，则返回错误</span>
	sp <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">findServiceProvider</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">if</span> sp <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;contract &quot;</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&quot; have not register&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> forceNew <span class="token punctuation">{</span>
		<span class="token keyword">return</span> container<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 不需要强制重新实例化，如果容器中已经实例化了，那么就直接使用容器中的实例</span>
	<span class="token keyword">if</span> ins<span class="token punctuation">,</span> ok <span class="token operator">:=</span> container<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ins<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 容器中还未实例化，则进行一次实例化</span>
	inst<span class="token punctuation">,</span> err <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	container<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> inst
	<span class="token keyword">return</span> inst<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容器与框架结合 - 服务容器的创建和传递</p><p><code>framework/gin/gin.go</code> 中：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Engine <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// gob改动：新增容器</span>
	container framework<span class="token punctuation">.</span>Container
    <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Engine <span class="token punctuation">{</span>
	<span class="token function">debugPrintWARNINGNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	engine <span class="token operator">:=</span> <span class="token operator">&amp;</span>Engine<span class="token punctuation">{</span>
		<span class="token operator">...</span>
		<span class="token comment">// gob改动：这里注入了 container</span>
		container<span class="token punctuation">:</span>              framework<span class="token punctuation">.</span><span class="token function">NewGobContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	engine<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>New <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> any <span class="token punctuation">{</span>
		<span class="token keyword">return</span> engine<span class="token punctuation">.</span><span class="token function">allocateContext</span><span class="token punctuation">(</span>engine<span class="token punctuation">.</span>maxParams<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> engine
<span class="token punctuation">}</span>

<span class="token comment">// engine 创建 context</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">allocateContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Context <span class="token punctuation">{</span>
	v <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>Params<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> engine<span class="token punctuation">.</span>maxParams<span class="token punctuation">)</span>
	<span class="token comment">// gob改动：注入容器到每个Context中（在分配新的 Context 的时候）</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Context<span class="token punctuation">{</span>engine<span class="token punctuation">:</span> engine<span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> container<span class="token punctuation">:</span> engine<span class="token punctuation">.</span>container<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>framework/gin/context.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Context <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// gob改动：注入容器到每个Context中</span>
	container framework<span class="token punctuation">.</span>Container
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容器与框架结合 - 服务容器方法的封装</p><p><code>Engine</code> 中负责绑定，<code>Context</code> 中负责获取，调整文件 <code>framework/gin/gob_context.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// --- 基础能力</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">BaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// --- 服务容器：engine 实现 container 的绑定封装</span>

<span class="token comment">// Bind 绑定一个服务提供者，如果关键字凭证已经存在，会进行替换操作，返回 error</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">Bind</span><span class="token punctuation">(</span>provider framework<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> engine<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// IsBind 关键字凭证是否已经绑定服务提供者</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">IsBind</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> engine<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">IsBind</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// --- 服务容器：context 实现 container 的几个封装</span>

<span class="token comment">// 实现 make 的封装</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Make</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现 mustMake 的封装</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">MustMake</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现 makeNew 的封装</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">MakeNew</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> ctx<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">MakeNew</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码验证-1" tabindex="-1"><a class="header-anchor" href="#代码验证-1"><span>代码验证</span></a></h4><p>在业务目录中创建一个目录 <code>provider/demo</code> ，</p><p>接口说明文件 <code>contract.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Demo 服务的 key</span>
<span class="token keyword">const</span> Key <span class="token operator">=</span> <span class="token string">&quot;gob:demo&quot;</span>

<span class="token comment">// Demo 服务的接口</span>
<span class="token keyword">type</span> Service <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">GetFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Foo
<span class="token punctuation">}</span>

<span class="token comment">// Demo 服务接口定义的一个数据结构</span>
<span class="token keyword">type</span> Foo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ServiceProvider 实现文件 <code>provider.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 服务提供方</span>
<span class="token keyword">type</span> DemoServiceProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// Name 方法直接将服务对应的字符串凭证返回，在这个例子中就是“gob.demo&quot;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>sp <span class="token operator">*</span>DemoServiceProvider<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> Key
<span class="token punctuation">}</span>

<span class="token comment">// Register 方法是注册初始化服务实例的方法，这里先暂定为 NewDemoService</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>sp <span class="token operator">*</span>DemoServiceProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> framework<span class="token punctuation">.</span>NewInstance <span class="token punctuation">{</span>
	<span class="token keyword">return</span> NewDemoService
<span class="token punctuation">}</span>

<span class="token comment">// IsDefer 方法表示是否延迟实例化，我们这里设置为 true，将这个服务的实例化延迟到第一次 make 的时候</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>sp <span class="token operator">*</span>DemoServiceProvider<span class="token punctuation">)</span> <span class="token function">IsDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token comment">// Params 方法表示实例化的参数。我们这里只实例化一个参数：container，表示我们在 NewDemoService 这个函数中，只有一个参数，container</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>sp <span class="token operator">*</span>DemoServiceProvider<span class="token punctuation">)</span> <span class="token function">Params</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>c<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Boot 方法我们这里我们什么逻辑都不执行, 只打印一行日志信息</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>sp <span class="token operator">*</span>DemoServiceProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;demo service boot&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现具体的服务实例 <code>service.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 具体的接口实例</span>
<span class="token keyword">type</span> DemoService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// 参数</span>
	c framework<span class="token punctuation">.</span>Container
<span class="token punctuation">}</span>

<span class="token comment">// var _ Service = &amp;DemoService{} // 确保已经实现 Service 接口</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> Service <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>DemoService<span class="token punctuation">)</span> <span class="token comment">// 确保已经实现 Service 接口</span>

<span class="token comment">// 实现接口</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>DemoService<span class="token punctuation">)</span> <span class="token function">GetFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Foo <span class="token punctuation">{</span>
	<span class="token keyword">return</span> Foo<span class="token punctuation">{</span>
		Name<span class="token punctuation">:</span> <span class="token string">&quot;i am foo&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 初始化实例的方法</span>
<span class="token keyword">func</span> <span class="token function">NewDemoService</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 这里需要将参数展开</span>
	c <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;new demo service&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// 返回实例</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>DemoService<span class="token punctuation">{</span>c<span class="token punctuation">:</span> c<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试调用 <code>subject_controller.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 对应路由 /subject/list/all</span>
<span class="token keyword">func</span> <span class="token function">SubjectListController</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 获取 demo 服务实例</span>
	demoService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>Service<span class="token punctuation">)</span>
	<span class="token comment">// 调用服务实例的方法</span>
	foo <span class="token operator">:=</span> demoService<span class="token punctuation">.</span><span class="token function">GetFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 输出结果</span>
	c<span class="token punctuation">.</span><span class="token function">ISetOkStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IJson</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12、设计框架的整体目录" tabindex="-1"><a class="header-anchor" href="#_12、设计框架的整体目录"><span>12、设计框架的整体目录</span></a></h2><h3 id="目录划分" tabindex="-1"><a class="header-anchor" href="#目录划分"><span>目录划分</span></a></h3><p>从框架层来规范业务的目录结构，不仅是一种分目录的设计，还贯彻了面向接口的思想，将目录作为一个服务提供在服务容器中</p><p>根目录下划分为五个文件夹：app、framework、config、storage、test。</p><ul><li><code>app</code> ：存放业务相关代码 <ul><li><code>http</code>：提供 Web 服务 <ul><li><code>middleware</code>：web 特有通用中间件</li><li><code>module</code>：每个子目录代表一个模块服务</li></ul></li><li><code>console</code> ：提供控制台进程 <ul><li><code>command</code>：命令行工具实现</li></ul></li><li><code>provider</code> ：通用的服务提供者 <ul><li>服务协议的 <code>contract.go</code> 文件</li><li>服务提供者的 <code>provider.go</code> 文件</li><li>具体服务实现的 <code>service.go</code> 文件</li></ul></li></ul></li><li><code>framework</code> 框架所有的代码 <ul><li><code>gin</code>：集成 Gin 框架</li><li><code>contract</code>：框架默认提供的服务协议</li><li><code>provider</code> ：服务协议的具体实现以及服务提供者（子目录对应服务）</li><li><code>command</code>：提供框架自带命令行工具</li><li><code>middleware</code>：框架为 Web 服务提供的中间件</li><li><code>util</code> ：通用工具函数</li></ul></li><li><code>config</code> ：配置文件</li><li><code>test</code> ：测试相关</li><li><code>storage</code>：存储相关 <ul><li><code>log</code> ：日志</li><li><code>runtime</code> ：运行时</li></ul></li></ul><h3 id="定义框架基础-app-服务" tabindex="-1"><a class="header-anchor" href="#定义框架基础-app-服务"><span>定义框架基础 App 服务</span></a></h3><h4 id="代码实现-6" tabindex="-1"><a class="header-anchor" href="#代码实现-6"><span>代码实现</span></a></h4><p>定义 App 服务的接口协议 <code>framework/contract/app.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 接口说明文件 contract.go</span>

<span class="token comment">// AppKey 定义字符串凭证</span>
<span class="token keyword">const</span> AppKey <span class="token operator">=</span> <span class="token string">&quot;gob:app&quot;</span>

<span class="token comment">// App 定义接口（提供了获取框架相关内容，例如获取框架约定的相关目录）</span>
<span class="token keyword">type</span> App <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// Version 定义当前版本</span>
	<span class="token function">Version</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token comment">// BaseFolder 定义项目基础地址</span>
	<span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token comment">// ConfigFolder 定义了配置文件的路径</span>
	<span class="token function">ConfigFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token comment">// LogFolder 定义了日志所在路径</span>
	<span class="token function">LogFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token comment">// ProviderFolder 定义业务自己的服务提供者地址</span>
	<span class="token function">ProviderFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token comment">// MiddlewareFolder 定义业务自己定义的中间件</span>
	<span class="token function">MiddlewareFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token comment">// CommandFolder 定义业务定义的命令</span>
	<span class="token function">CommandFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token comment">// RuntimeFolder 定义业务的运行中间态信息</span>
	<span class="token function">RuntimeFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token comment">// TestFolder 存放测试所需要的信息</span>
	<span class="token function">TestFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>App 服务实现 <code>ServiceProvider</code> 接口，<code>framework/provider/app/provider.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// ServiceProvider 实现文件 provider.go</span>

<span class="token comment">// GobAppProvider 提供App的具体实现方法</span>
<span class="token keyword">type</span> GobAppProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	BaseFolder <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> framework<span class="token punctuation">.</span>ServiceProvider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>GobAppProvider<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token comment">// Register 注册 GobApp 方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>appProvider <span class="token operator">*</span>GobAppProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> framework<span class="token punctuation">.</span>NewInstance <span class="token punctuation">{</span>
	<span class="token keyword">return</span> NewGobApp
<span class="token punctuation">}</span>
<span class="token comment">// Boot 启动调用</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>appProvider <span class="token operator">*</span>GobAppProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token comment">// IsDefer 是否延迟初始化</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>appProvider <span class="token operator">*</span>GobAppProvider<span class="token punctuation">)</span> <span class="token function">IsDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token comment">// Params 获取初始化参数</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>appProvider <span class="token operator">*</span>GobAppProvider<span class="token punctuation">)</span> <span class="token function">Params</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>container<span class="token punctuation">,</span> appProvider<span class="token punctuation">.</span>BaseFolder<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Name 获取字符串凭证</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>appProvider <span class="token operator">*</span>GobAppProvider<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> contract<span class="token punctuation">.</span>AppKey
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现 App 服务，<code>framework/provider/app/service.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 实现具体的服务实例 service.go</span>

<span class="token comment">// GobApp 代表 gob 框架的 App 实现</span>
<span class="token keyword">type</span> GobApp <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	container  framework<span class="token punctuation">.</span>Container <span class="token comment">// 服务容器</span>
	baseFolder <span class="token builtin">string</span>              <span class="token comment">// 基础路径</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> contract<span class="token punctuation">.</span>App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>GobApp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token comment">// Version 实现版本</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app GobApp<span class="token punctuation">)</span> <span class="token function">Version</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;0.1.1&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// BaseFolder 表示基础目录，可以代表开发场景的目录，也可以代表运行时候的目录</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app GobApp<span class="token punctuation">)</span> <span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> app<span class="token punctuation">.</span>baseFolder <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> app<span class="token punctuation">.</span>baseFolder
	<span class="token punctuation">}</span>
	<span class="token comment">// 如果没有设置，则使用参数</span>
	<span class="token keyword">var</span> baseFolder <span class="token builtin">string</span>
	flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>baseFolder<span class="token punctuation">,</span> <span class="token string">&quot;base_folder&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;base_folder 参数, 默认为当前路径&quot;</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> baseFolder <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> baseFolder
	<span class="token punctuation">}</span>
	<span class="token comment">// 如果参数也没有，使用默认的当前路径</span>
	<span class="token keyword">return</span> util<span class="token punctuation">.</span><span class="token function">GetExecDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// ConfigFolder  表示配置文件地址</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app GobApp<span class="token punctuation">)</span> <span class="token function">ConfigFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;config&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// LogFolder 表示日志存放地址</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app GobApp<span class="token punctuation">)</span> <span class="token function">LogFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">StorageFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;log&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app GobApp<span class="token punctuation">)</span> <span class="token function">HttpFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app GobApp<span class="token punctuation">)</span> <span class="token function">ConsoleFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;console&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app GobApp<span class="token punctuation">)</span> <span class="token function">StorageFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;storage&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// ProviderFolder 定义业务自己的服务提供者地址</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app GobApp<span class="token punctuation">)</span> <span class="token function">ProviderFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;provider&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// MiddlewareFolder 定义业务自己定义的中间件</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app GobApp<span class="token punctuation">)</span> <span class="token function">MiddlewareFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">HttpFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;middleware&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// CommandFolder 定义业务定义的命令</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app GobApp<span class="token punctuation">)</span> <span class="token function">CommandFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">ConsoleFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;command&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// RuntimeFolder 定义业务的运行中间态信息</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app GobApp<span class="token punctuation">)</span> <span class="token function">RuntimeFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">StorageFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;runtime&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// TestFolder 定义测试需要的信息</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app GobApp<span class="token punctuation">)</span> <span class="token function">TestFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// NewGobApp 初始化 GobApp</span>
<span class="token keyword">func</span> <span class="token function">NewGobApp</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;param error&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 有两个参数，一个是容器，一个是 baseFolder</span>
	container <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span>
	baseFolder <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> GobApp<span class="token punctuation">{</span>baseFolder<span class="token punctuation">:</span> baseFolder<span class="token punctuation">,</span> container<span class="token punctuation">:</span> container<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token comment">// todo 这里可能得规范下返回的是指针或者实体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通用方法，<code>util.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// GetExecDirectory 获取当前执行程序目录</span>
<span class="token keyword">func</span> <span class="token function">GetExecDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> file <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码验证-2" tabindex="-1"><a class="header-anchor" href="#代码验证-2"><span>代码验证</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 对应路由 /subject/list/all</span>
<span class="token keyword">func</span> <span class="token function">SubjectListController</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 获取 App 服务实例</span>
	appService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>GobApp<span class="token punctuation">)</span>
	<span class="token comment">// 输出结果</span>
	c<span class="token punctuation">.</span><span class="token function">ISetOkStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IJson</span><span class="token punctuation">(</span>appService<span class="token punctuation">.</span><span class="token function">ConfigFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13、交互-执行命令行" tabindex="-1"><a class="header-anchor" href="#_13、交互-执行命令行"><span>13、交互：执行命令行</span></a></h2><h3 id="目标-5" tabindex="-1"><a class="header-anchor" href="#目标-5"><span>目标</span></a></h3><p>引入命令行工具库，并改造整个项目</p><h3 id="如何实现-5" tabindex="-1"><a class="header-anchor" href="#如何实现-5"><span>如何实现</span></a></h3><ul><li>源码引入</li><li>把服务容器嵌入 <code>Command</code></li><li>把 Web 服务封装成命令 <ul><li>准备工作：把创建 Web 服务引擎的方法作为一个服务封装在服务容器中</li><li>main 函数的改造：初始化一个服务容器，然后将各个服务绑定到这个服务容器中，包括定义的提供 Web 引擎的服务</li><li>在业务代码中将业务需要的路由绑定到 Web 引擎中去</li><li>完成服务的绑定之后，最后要创建一个 <code>根Command</code>，并且创建一个 Web 启动的 <code>Command</code></li></ul></li></ul><h3 id="代码实现-7" tabindex="-1"><a class="header-anchor" href="#代码实现-7"><span>代码实现</span></a></h3><h4 id="源码引入" tabindex="-1"><a class="header-anchor" href="#源码引入"><span>源码引入</span></a></h4>`,110),V={href:"https://github.com/spf13/cobra",target:"_blank",rel:"noopener noreferrer"},z=s("code",null,"framework/cobra",-1),Q=s("code",null,"go.mod",-1),X=p(`<h4 id="把服务容器嵌入" tabindex="-1"><a class="header-anchor" href="#把服务容器嵌入"><span>把服务容器嵌入</span></a></h4><p>单独抽取 engine 实现 container 的绑定封装 ，并且新增设置容器方法 <code>SetContainer</code>， <code>/framework/gin/gob_engine.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// --- 服务容器：engine 实现 container 的绑定封装</span>

<span class="token comment">// Bind 绑定一个服务提供者，如果关键字凭证已经存在，会进行替换操作，返回 error</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">Bind</span><span class="token punctuation">(</span>provider framework<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> engine<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// IsBind 关键字凭证是否已经绑定服务提供者</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">IsBind</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> engine<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">IsBind</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// SetContainer 设置服务容器</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">SetContainer</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	engine<span class="token punctuation">.</span>container <span class="token operator">=</span> container
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>framework/cobra/command.go</code> 中修改 <code>Command</code> 结构，加入服务容器：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Command <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// gob改动：引入服务容器</span>
	container framework<span class="token punctuation">.</span>Container
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再为 <code>Command</code> 提供两个方法：设置服务容器、获取服务容器，单独创建 <code>framework/cobra/gob_command.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// SetContainer 设置服务容器</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token function">SetContainer</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>container <span class="token operator">=</span> container
<span class="token punctuation">}</span>
<span class="token comment">// GetContainer 获取容器</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> framework<span class="token punctuation">.</span>Container <span class="token punctuation">{</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>container
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="把-web-服务封装成命令" tabindex="-1"><a class="header-anchor" href="#把-web-服务封装成命令"><span>把 Web 服务封装成命令</span></a></h4><p>准备工作：把创建 Web 服务引擎的方法作为一个服务封装在服务容器中</p><p>在 <code>framework/contract/kernel.go</code> 中，把创建 <code>Engine</code> 的过程封装为一个服务接口协议：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// KernelKey 提供 kenel 服务凭证</span>
<span class="token keyword">const</span> KernelKey <span class="token operator">=</span> <span class="token string">&quot;gob:kernel&quot;</span>

<span class="token comment">// Kernel 接口提供框架最核心的结构</span>
<span class="token keyword">type</span> Kernel <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// HttpEngine http.Handler结构，作为net/http框架使用, 实际上是gin.Engine</span>
	<span class="token function">HttpEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>framework/provider/kernel/provider.go</code> 中定义一个服务提供者：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// GobKernelProvider 提供web引擎</span>
<span class="token keyword">type</span> GobKernelProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	HttpEngine <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine
<span class="token punctuation">}</span>
<span class="token comment">// Register 注册服务提供者</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>GobKernelProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> framework<span class="token punctuation">.</span>NewInstance <span class="token punctuation">{</span>
	<span class="token keyword">return</span> NewGobKernelService
<span class="token punctuation">}</span>
<span class="token comment">// Boot 启动的时候判断是否由外界注入了Engine，如果注入的化，用注入的，如果没有，重新实例化</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>GobKernelProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> provider<span class="token punctuation">.</span>HttpEngine <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		provider<span class="token punctuation">.</span>HttpEngine <span class="token operator">=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	provider<span class="token punctuation">.</span>HttpEngine<span class="token punctuation">.</span><span class="token function">SetContainer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token comment">// IsDefer 引擎的初始化我们希望开始就进行初始化</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>GobKernelProvider<span class="token punctuation">)</span> <span class="token function">IsDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token comment">// Params 参数就是一个HttpEngine</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>GobKernelProvider<span class="token punctuation">)</span> <span class="token function">Params</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>provider<span class="token punctuation">.</span>HttpEngine<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Name 提供凭证</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>GobKernelProvider<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> contract<span class="token punctuation">.</span>KernelKey
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化实例 <code>framework/provider/kernel/service.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 引擎服务</span>
<span class="token keyword">type</span> GobKernelService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	engine <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> contract<span class="token punctuation">.</span>Kernel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>GobKernelService<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token comment">// 初始化 web 引擎服务实例</span>
<span class="token keyword">func</span> <span class="token function">NewGobKernelService</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	httpEngine <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>GobKernelService<span class="token punctuation">{</span>engine<span class="token punctuation">:</span> httpEngine<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token comment">// 返回 web 引擎</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>GobKernelService<span class="token punctuation">)</span> <span class="token function">HttpEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>engine
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main 函数的改造：初始化一个服务容器，然后将各个服务绑定到这个服务容器中，包括定义的提供 Web 引擎的服务</p><p><code>main.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token comment">// 初始化服务容器</span>
	container <span class="token operator">:=</span> framework<span class="token punctuation">.</span><span class="token function">NewGobContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 绑定 App 服务提供者</span>
	container<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>app<span class="token punctuation">.</span>GobAppProvider<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token comment">// 后续初始化需要绑定的服务提供者...</span>

	<span class="token comment">// 将 HTTP 引擎初始化,并且作为服务提供者绑定到服务容器中</span>
	<span class="token keyword">if</span> engine<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewHttpEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// 绑定 Kernel 服务提供者</span>
		container<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kernel<span class="token punctuation">.</span>GobKernelProvider<span class="token punctuation">{</span>HttpEngine<span class="token punctuation">:</span> engine<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 运行root命令</span>
	console<span class="token punctuation">.</span><span class="token function">RunCommand</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在业务代码中将业务需要的路由绑定到 Web 引擎中去</p><p><code>http.NewHttpEngine</code> 这个创建 Web 引擎的方法必须放在业务层，因为这个 Web 引擎不仅仅是调用了 Gin 创建 Web 引擎的方法，更重要的是调用了业务需要的绑定路由的功能。</p><p>创建引擎 <code>app/http/kernel.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// NewHttpEngine 创建了一个绑定了路由的 Web 引擎</span>
<span class="token keyword">func</span> <span class="token function">NewHttpEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 设置为 Release，为的是默认在启动中不输出调试信息</span>
	gin<span class="token punctuation">.</span><span class="token function">SetMode</span><span class="token punctuation">(</span>gin<span class="token punctuation">.</span>ReleaseMode<span class="token punctuation">)</span>
	<span class="token comment">// 默认启动一个 Web 引擎</span>
	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 业务绑定路由操作</span>
	<span class="token function">Routes</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	<span class="token comment">// 返回绑定路由后的 Web 引擎</span>
	<span class="token keyword">return</span> r<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绑定路由 <code>app/http/route.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Routes 绑定业务层路由</span>
<span class="token keyword">func</span> <span class="token function">Routes</span><span class="token punctuation">(</span>r <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r<span class="token punctuation">.</span><span class="token function">Static</span><span class="token punctuation">(</span><span class="token string">&quot;/dist/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./dist/&quot;</span><span class="token punctuation">)</span>
	demo<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">// 这个demo是业务App自定义的demo服务,位置在 \`app/http/module/demo/*\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成服务的绑定之后，最后要创建一个 <code>根Command</code>，并且创建一个 Web 启动的二级 <code>Command</code>，</p><p><code>app/console/kernel.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// RunCommand  初始化根Command并运行</span>
<span class="token keyword">func</span> <span class="token function">RunCommand</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// 根Command</span>
	<span class="token keyword">var</span> rootCmd <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
		<span class="token comment">// 定义根命令的关键字</span>
		Use<span class="token punctuation">:</span> <span class="token string">&quot;gob&quot;</span><span class="token punctuation">,</span>
		<span class="token comment">// 简短介绍</span>
		Short<span class="token punctuation">:</span> <span class="token string">&quot;gob 命令&quot;</span><span class="token punctuation">,</span>
		<span class="token comment">// 根命令的详细介绍</span>
		Long<span class="token punctuation">:</span> <span class="token string">&quot;gob 框架提供的命令行工具，使用这个命令行工具能很方便执行框架自带命令，也能很方便编写业务命令&quot;</span><span class="token punctuation">,</span>
		<span class="token comment">// 根命令的执行函数</span>
		RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			cmd<span class="token punctuation">.</span><span class="token function">InitDefaultHelpFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> cmd<span class="token punctuation">.</span><span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token comment">// 不需要出现cobra默认的completion子命令</span>
		CompletionOptions<span class="token punctuation">:</span> cobra<span class="token punctuation">.</span>CompletionOptions<span class="token punctuation">{</span>DisableDefaultCmd<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 为根Command设置服务容器</span>
	rootCmd<span class="token punctuation">.</span><span class="token function">SetContainer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
	<span class="token comment">// 绑定框架的命令  （框架定义的命令我们使用\`framework/command/kernel.go\` 中的 \`AddKernelCommands\` 进行挂载）</span>
	command<span class="token punctuation">.</span><span class="token function">AddKernelCommands</span><span class="token punctuation">(</span>rootCmd<span class="token punctuation">)</span>
	<span class="token comment">// 绑定业务的命令</span>
	<span class="token function">AddAppCommand</span><span class="token punctuation">(</span>rootCmd<span class="token punctuation">)</span>

	<span class="token comment">// 执行RootCommand</span>
	<span class="token keyword">return</span> rootCmd<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 绑定业务的命令（业务定义的命令我们使用 \`app/console/kernel.go\` 中的 \`AddAppCommand\`进行挂载）</span>
<span class="token keyword">func</span> <span class="token function">AddAppCommand</span><span class="token punctuation">(</span>rootCmd <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//  demo 例子</span>
	rootCmd<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">InitFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里绑定了一个业务代码的 demo 命令用来测试，<code>app/console/command/demo/foo.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// InitFoo 初始化Foo命令</span>
<span class="token keyword">func</span> <span class="token function">InitFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	FooCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>Foo1Command<span class="token punctuation">)</span>
	<span class="token keyword">return</span> FooCommand
<span class="token punctuation">}</span>

<span class="token comment">// FooCommand 代表Foo命令</span>
<span class="token keyword">var</span> FooCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>     <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span>   <span class="token string">&quot;foo的简要说明&quot;</span><span class="token punctuation">,</span>
	Long<span class="token punctuation">:</span>    <span class="token string">&quot;foo的长说明&quot;</span><span class="token punctuation">,</span>
	Aliases<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;fo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	Example<span class="token punctuation">:</span> <span class="token string">&quot;foo命令的例子&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面在 <code>app/console</code> 里创建了根命令，并且加载了框架与业务命令初始化，这里初始化框架相关的命令，<code>framework/command/kernel.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// AddKernelCommands will add all command/* to root command</span>
<span class="token keyword">func</span> <span class="token function">AddKernelCommands</span><span class="token punctuation">(</span>root <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 挂载AppCommand命令</span>
	root<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">initAppCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装二级 Web 启动 App 命令， <code>framework/command/app.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// initAppCommand 初始化app命令和其子命令</span>
<span class="token keyword">func</span> <span class="token function">initAppCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	appCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>appStartCommand<span class="token punctuation">)</span>
	<span class="token keyword">return</span> appCommand
<span class="token punctuation">}</span>

<span class="token comment">// AppCommand 是命令行参数第一级为app的命令，它没有实际功能，只是打印帮助文档</span>
<span class="token keyword">var</span> appCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;业务应用控制命令&quot;</span><span class="token punctuation">,</span>
	Long<span class="token punctuation">:</span>  <span class="token string">&quot;业务应用控制命令，其包含业务启动，关闭，重启，查询等功能&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token comment">// 打印帮助文档</span>
		c<span class="token punctuation">.</span><span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// appStartCommand 启动一个Web服务</span>
<span class="token keyword">var</span> appStartCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;启动一个Web服务&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token comment">// 从Command中获取服务容器</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 从服务容器中获取kernel的服务实例</span>
		kernelService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>KernelKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Kernel<span class="token punctuation">)</span>
		<span class="token comment">// 从kernel服务实例中获取引擎</span>
		core <span class="token operator">:=</span> kernelService<span class="token punctuation">.</span><span class="token function">HttpEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token comment">// 创建一个Server服务</span>
		server <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>
			Handler<span class="token punctuation">:</span> core<span class="token punctuation">,</span>
			Addr<span class="token punctuation">:</span>    <span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 这个goroutine是启动服务的goroutine</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token comment">// 当前的goroutine等待信号量</span>
		quit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">)</span>
		<span class="token comment">// 监控信号：SIGINT, SIGTERM, SIGQUIT</span>
		signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>quit<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGINT<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGQUIT<span class="token punctuation">)</span>
		<span class="token comment">// 这里会阻塞当前goroutine等待信号</span>
		<span class="token operator">&lt;-</span>quit

		<span class="token comment">// 调用Server.Shutdown graceful结束</span>
		timeoutCtx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token keyword">if</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span>timeoutCtx<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Server Shutdown:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码验证-3" tabindex="-1"><a class="header-anchor" href="#代码验证-3"><span>代码验证</span></a></h3><p>创建一个业务服务测试 demo，<code>/app/http/module/demo/api.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> DemoApi <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	service <span class="token operator">*</span>Service
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Register</span><span class="token punctuation">(</span>r <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	api <span class="token operator">:=</span> <span class="token function">NewDemoApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>demoService<span class="token punctuation">.</span>DemoProvider<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/demo/demo&quot;</span><span class="token punctuation">,</span> api<span class="token punctuation">.</span>Demo<span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/demo/demo2&quot;</span><span class="token punctuation">,</span> api<span class="token punctuation">.</span>Demo2<span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/demo/demo_post&quot;</span><span class="token punctuation">,</span> api<span class="token punctuation">.</span>DemoPost<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewDemoApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>DemoApi <span class="token punctuation">{</span>
	service <span class="token operator">:=</span> <span class="token function">NewService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>DemoApi<span class="token punctuation">{</span>service<span class="token punctuation">:</span> service<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Demo godoc</span>
<span class="token comment">// @Summary 获取所有用户</span>
<span class="token comment">// @Description 获取所有用户</span>
<span class="token comment">// @Produce  json</span>
<span class="token comment">// @Tags demo</span>
<span class="token comment">// @Success 200 array []UserDTO</span>
<span class="token comment">// @Router /demo/demo [get]</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>api <span class="token operator">*</span>DemoApi<span class="token punctuation">)</span> <span class="token function">Demo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//appService := c.MustMake(contract.AppKey).(contract.App)</span>
	<span class="token comment">//baseFolder := appService.BaseFolder()</span>
	users <span class="token operator">:=</span> api<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">GetUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	usersDTO <span class="token operator">:=</span> <span class="token function">UserModelsToUserDTOs</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> usersDTO<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Demo godoc</span>
<span class="token comment">// @Summary 获取所有学生</span>
<span class="token comment">// @Description 获取所有学生</span>
<span class="token comment">// @Produce  json</span>
<span class="token comment">// @Tags demo</span>
<span class="token comment">// @Success 200 array []UserDTO</span>
<span class="token comment">// @Router /demo/demo2 [get]</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>api <span class="token operator">*</span>DemoApi<span class="token punctuation">)</span> <span class="token function">Demo2</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	demoProvider <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>demoService<span class="token punctuation">.</span>DemoKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>demoService<span class="token punctuation">.</span>IService<span class="token punctuation">)</span>
	students <span class="token operator">:=</span> demoProvider<span class="token punctuation">.</span><span class="token function">GetAllStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	usersDTO <span class="token operator">:=</span> <span class="token function">StudentsToUserDTOs</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> usersDTO<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>api <span class="token operator">*</span>DemoApi<span class="token punctuation">)</span> <span class="token function">DemoPost</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">type</span> Foo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		Name <span class="token builtin">string</span>
	<span class="token punctuation">}</span>
	foo <span class="token operator">:=</span> <span class="token operator">&amp;</span>Foo<span class="token punctuation">{</span><span class="token punctuation">}</span>
	err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">BindJSON</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>foo<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">AbortWithError</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整体框架验证：<code>go build</code> 编译后调用 <code>./gob</code> （或者直接 <code>go run .</code>）。</p><p>web 服务验证： <code>./gob app start</code>，可以访问到业务定义的 <code>/demo/demo</code> 路径。</p><h2 id="_14、定时任务-支持分布式定时脚本" tabindex="-1"><a class="header-anchor" href="#_14、定时任务-支持分布式定时脚本"><span>14、定时任务：支持分布式定时脚本</span></a></h2><h3 id="如何实现-6" tabindex="-1"><a class="header-anchor" href="#如何实现-6"><span>如何实现</span></a></h3>`,40),Y={href:"https://github.com/robfig/cron",target:"_blank",rel:"noopener noreferrer"},Z=p(`<p>将功能封装进 Command 里，</p><h3 id="代码实现-8" tabindex="-1"><a class="header-anchor" href="#代码实现-8"><span>代码实现</span></a></h3><h4 id="引入框架" tabindex="-1"><a class="header-anchor" href="#引入框架"><span>引入框架</span></a></h4><p>在 <code>framework/cobra/command.go</code> 中修改 <code>Command</code> 结构，加入定时库：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Command <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// gob改动：引入定时库  </span>
	Cron <span class="token operator">*</span>cron<span class="token punctuation">.</span>Cron <span class="token comment">// Command支持cron，只在RootCommand中有这个值  </span>
	CronSpecs <span class="token punctuation">[</span><span class="token punctuation">]</span>CronSpec <span class="token comment">// 对应Cron命令的信息</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cron-的初始化和回调" tabindex="-1"><a class="header-anchor" href="#cron-的初始化和回调"><span>cron 的初始化和回调</span></a></h4><p>绑定业务时添加定时任务命令， <code>app/console/kernel.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 绑定业务的命令（业务定义的命令我们使用 \`app/console/kernel.go\` 中的 \`AddAppCommand\`进行挂载）</span>
<span class="token keyword">func</span> <span class="token function">AddAppCommand</span><span class="token punctuation">(</span>rootCmd <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token comment">// 每秒调用一次Foo命令</span>
	rootCmd<span class="token punctuation">.</span><span class="token function">AddCronCommand</span><span class="token punctuation">(</span><span class="token string">&quot;* * * * * *&quot;</span><span class="token punctuation">,</span> demo<span class="token punctuation">.</span>FooCommand<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再为 <code>根Command</code> 提供保存 <code>Cron</code> 命令方法： <code>framework/cobra/gob_command.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// CronSpec 保存Cron命令的信息，用于展示</span>
<span class="token keyword">type</span> CronSpec <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Type        <span class="token builtin">string</span>
	Cmd         <span class="token operator">*</span>Command
	Spec        <span class="token builtin">string</span>
	ServiceName <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token function">SetParentNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// AddCronCommand 是用来创建一个Cron任务的</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token function">AddCronCommand</span><span class="token punctuation">(</span>spec <span class="token builtin">string</span><span class="token punctuation">,</span> cmd <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// cron结构是挂载在根Command上的</span>
	root <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> root<span class="token punctuation">.</span>Cron <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// 初始化cron</span>
		root<span class="token punctuation">.</span>Cron <span class="token operator">=</span> cron<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>cron<span class="token punctuation">.</span><span class="token function">WithParser</span><span class="token punctuation">(</span>cron<span class="token punctuation">.</span><span class="token function">NewParser</span><span class="token punctuation">(</span>cron<span class="token punctuation">.</span>SecondOptional <span class="token operator">|</span> cron<span class="token punctuation">.</span>Minute <span class="token operator">|</span> cron<span class="token punctuation">.</span>Hour <span class="token operator">|</span> cron<span class="token punctuation">.</span>Dom <span class="token operator">|</span> cron<span class="token punctuation">.</span>Month <span class="token operator">|</span> cron<span class="token punctuation">.</span>Dow <span class="token operator">|</span> cron<span class="token punctuation">.</span>Descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		root<span class="token punctuation">.</span>CronSpecs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>CronSpec<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 增加说明信息</span>
	root<span class="token punctuation">.</span>CronSpecs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>CronSpecs<span class="token punctuation">,</span> CronSpec<span class="token punctuation">{</span>
		Type<span class="token punctuation">:</span> <span class="token string">&quot;normal-cron&quot;</span><span class="token punctuation">,</span>
		Cmd<span class="token punctuation">:</span>  cmd<span class="token punctuation">,</span>
		Spec<span class="token punctuation">:</span> spec<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token comment">// 制作一个rootCommand，成为一个新的根节点</span>
	<span class="token keyword">var</span> cronCmd Command
	ctx <span class="token operator">:=</span> root<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	cronCmd <span class="token operator">=</span> <span class="token operator">*</span>cmd
	cronCmd<span class="token punctuation">.</span>args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	cronCmd<span class="token punctuation">.</span><span class="token function">SetParentNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	cronCmd<span class="token punctuation">.</span><span class="token function">SetContainer</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// 增加调用函数</span>
	root<span class="token punctuation">.</span>Cron<span class="token punctuation">.</span><span class="token function">AddFunc</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果后续的command出现panic，这里要捕获</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		err <span class="token operator">:=</span> cronCmd<span class="token punctuation">.</span><span class="token function">ExecuteContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token comment">// 打印出err信息</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动-cron" tabindex="-1"><a class="header-anchor" href="#启动-cron"><span>启动 cron</span></a></h4>`,11),$={href:"https://github.com/sevlyar/go-daemon",target:"_blank",rel:"noopener noreferrer"},nn=p(`<p>初始化命令，并且 deamon 模式可选（如果支持），<code>framework/command/cron.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> cronDaemon <span class="token operator">=</span> <span class="token boolean">false</span>

<span class="token keyword">func</span> <span class="token function">initCronCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	<span class="token comment">// 以后台 deamon 的方式启动的参数</span>
	cronStartCommand<span class="token punctuation">.</span><span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BoolVarP</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cronDaemon<span class="token punctuation">,</span> <span class="token string">&quot;daemon&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;start serve daemon&quot;</span><span class="token punctuation">)</span>
	cronCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>cronRestartCommand<span class="token punctuation">)</span>
	cronCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>cronStateCommand<span class="token punctuation">)</span>
	cronCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>cronStopCommand<span class="token punctuation">)</span>
	cronCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>cronListCommand<span class="token punctuation">)</span>
	cronCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>cronStartCommand<span class="token punctuation">)</span>
	<span class="token keyword">return</span> cronCommand
<span class="token punctuation">}</span>

<span class="token keyword">var</span> cronCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;cron&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;定时任务相关命令&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// serveCommand start a app serve</span>
<span class="token keyword">var</span> cronListCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;列出所有的定时任务&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>

		cronSpecs <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>CronSpecs
		ps <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cronSpec <span class="token operator">:=</span> <span class="token keyword">range</span> cronSpecs <span class="token punctuation">{</span>
			line <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>cronSpec<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> cronSpec<span class="token punctuation">.</span>Spec<span class="token punctuation">,</span> cronSpec<span class="token punctuation">.</span>Cmd<span class="token punctuation">.</span>Use<span class="token punctuation">,</span> cronSpec<span class="token punctuation">.</span>Cmd<span class="token punctuation">.</span>Short<span class="token punctuation">,</span> cronSpec<span class="token punctuation">.</span>ServiceName<span class="token punctuation">}</span>
			ps <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span> line<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		util<span class="token punctuation">.</span><span class="token function">PrettyPrint</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// cron进程的启动服务</span>
<span class="token keyword">var</span> cronStartCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;启动cron常驻进程&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token comment">// 获取容器</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 获取容器中的app服务</span>
		appService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>

		<span class="token comment">// 设置cron的日志地址和进程id地址</span>
		pidFolder <span class="token operator">:=</span> appService<span class="token punctuation">.</span><span class="token function">RuntimeFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		serverPidFile <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>pidFolder<span class="token punctuation">,</span> <span class="token string">&quot;cron.pid&quot;</span><span class="token punctuation">)</span>
		logFolder <span class="token operator">:=</span> appService<span class="token punctuation">.</span><span class="token function">LogFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		serverLogFile <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>logFolder<span class="token punctuation">,</span> <span class="token string">&quot;cron.log&quot;</span><span class="token punctuation">)</span>
		currentFolder <span class="token operator">:=</span> appService<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token comment">// deamon 模式</span>
		<span class="token keyword">if</span> cronDaemon <span class="token punctuation">{</span>
			<span class="token comment">// win不支持 deamon 模式</span>
			<span class="token keyword">if</span> util<span class="token punctuation">.</span><span class="token function">IsWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;daemon: Non-POSIX OS is not supported&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 创建一个Context</span>
			cntxt <span class="token operator">:=</span> <span class="token operator">&amp;</span>daemon<span class="token punctuation">.</span>Context<span class="token punctuation">{</span>
				<span class="token comment">// 设置pid文件</span>
				PidFileName<span class="token punctuation">:</span> serverPidFile<span class="token punctuation">,</span>
				PidFilePerm<span class="token punctuation">:</span> <span class="token number">0664</span><span class="token punctuation">,</span>
				<span class="token comment">// 设置日志文件</span>
				LogFileName<span class="token punctuation">:</span> serverLogFile<span class="token punctuation">,</span>
				LogFilePerm<span class="token punctuation">:</span> <span class="token number">0640</span><span class="token punctuation">,</span>
				<span class="token comment">// 设置工作路径</span>
				WorkDir<span class="token punctuation">:</span> currentFolder<span class="token punctuation">,</span>
				<span class="token comment">// 设置所有设置文件的mask，默认为750</span>
				Umask<span class="token punctuation">:</span> <span class="token number">027</span><span class="token punctuation">,</span>
				<span class="token comment">// 子进程的参数，按照这个参数设置，子进程的命令为 ./gob cron start --daemon=true</span>
				Args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cron&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--daemon=true&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 启动子进程，d不为空表示当前是父进程，d为空表示当前是子进程</span>
			d<span class="token punctuation">,</span> err <span class="token operator">:=</span> cntxt<span class="token punctuation">.</span><span class="token function">Reborn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> d <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token comment">// 父进程直接打印启动成功信息，不做任何操作</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;cron serve started, pid:&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>Pid<span class="token punctuation">)</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;log file:&quot;</span><span class="token punctuation">,</span> serverLogFile<span class="token punctuation">)</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// 子进程执行Cron.Run</span>
			<span class="token keyword">defer</span> cntxt<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;daemon started&quot;</span><span class="token punctuation">)</span>
			<span class="token comment">//gspt.SetProcTitle(&quot;gob cron&quot;) // win上无法使用</span>
			c<span class="token punctuation">.</span><span class="token function">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Cron<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// not deamon mode</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;start cron job&quot;</span><span class="token punctuation">)</span>
		content <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">Getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;[PID]&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>

		<span class="token comment">// todo 这里可以优化变成覆写</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>serverPidFile<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>

		<span class="token comment">//gspt.SetProcTitle(&quot;gob cron&quot;) // win上无法使用</span>
		c<span class="token punctuation">.</span><span class="token function">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Cron<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span> <span class="token comment">// cronRestartCommand、cronStopCommand、cronStateCommand</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>挂载进框架，<code>framework/command/kernel.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// AddKernelCommands will add all command/* to root command</span>
<span class="token keyword">func</span> <span class="token function">AddKernelCommands</span><span class="token punctuation">(</span>root <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token comment">// 挂载 cron</span>
	root<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">initCronCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!tips] win 不支持 daemon，好像也无法引用 gspt 库（守护进程相关），这里注释掉</p></blockquote><h4 id="分布式定时器" tabindex="-1"><a class="header-anchor" href="#分布式定时器"><span>分布式定时器</span></a></h4><p>这里先定义一个接口，利用本地文件锁来实现本地分布式选择器，后续也可以利用 Redis 实现。</p><p>定义一个分布式的选择器，在 <code>framework/contract/distributed.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// DistributedKey 定义字符串凭证</span>
<span class="token keyword">const</span> DistributedKey <span class="token operator">=</span> <span class="token string">&quot;gob:distributed&quot;</span>

<span class="token comment">// Distributed 分布式服务</span>
<span class="token keyword">type</span> Distributed <span class="token keyword">interface</span> <span class="token punctuation">{</span>

	<span class="token comment">// Select 分布式选择器, 所有节点对某个服务进行抢占，只选择其中一个节点</span>
	<span class="token comment">// ServiceName 服务名字</span>
	<span class="token comment">// appID 当前的AppID</span>
	<span class="token comment">// holdTime 分布式选择器hold住的时间</span>
	<span class="token comment">// selectAppID 分布式选择器最终选择的App</span>
	<span class="token comment">// err 异常才返回，如果没有被选择，不返回err</span>
	<span class="token function">Select</span><span class="token punctuation">(</span>serviceName <span class="token builtin">string</span><span class="token punctuation">,</span> appID <span class="token builtin">string</span><span class="token punctuation">,</span> holdTime time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>selectAppID <span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),sn=s("code",null,"appID",-1),an={href:"https://github.com/google/uuid",target:"_blank",rel:"noopener noreferrer"},tn=s("code",null,"framework/contract/framework/contract/app.go",-1),pn=p(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// App 定义接口</span>
<span class="token keyword">type</span> App <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   <span class="token comment">// AppID 表示当前这个app的唯一id, 可以用于分布式锁等</span>
   <span class="token function">AppID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
   <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>framework/provider/app/service.go</code> 中也增加对 AppID 的实现：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span><span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token string">&quot;github.com/google/uuid&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// GobAppService 代表 gob 框架的 App 实现</span>
<span class="token keyword">type</span> GobAppService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   <span class="token operator">...</span>
   appId      <span class="token builtin">string</span>              <span class="token comment">// 表示当前这个app的唯一id, 可以用于分布式锁等</span>
<span class="token punctuation">}</span>

<span class="token comment">// AppID 表示当前这个app的唯一id, 可以用于分布式锁等</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s GobAppService<span class="token punctuation">)</span> <span class="token function">AppID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>appID
<span class="token punctuation">}</span>

<span class="token comment">// NewGobApp 初始化 GobAppService</span>
<span class="token keyword">func</span> <span class="token function">NewGobApp</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	appID <span class="token operator">:=</span> uuid<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// todo 这里可能得规范下返回的是指针或者实体</span>
	<span class="token keyword">return</span> GobAppService<span class="token punctuation">{</span>baseFolder<span class="token punctuation">:</span> baseFolder<span class="token punctuation">,</span> container<span class="token punctuation">:</span> container<span class="token punctuation">,</span> appID<span class="token punctuation">:</span> appID<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现 <code>framework/provider/distributed/provider_local.go</code>，这里省略。</p><p>分布式服务 Distributed 的具体实现，<code>framework/provider/distributed/service_local.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//go:build !windows</span>
<span class="token operator">...</span> 
<span class="token comment">// LocalDistributedService</span>
<span class="token keyword">type</span> LocalDistributedService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	container framework<span class="token punctuation">.</span>Container <span class="token comment">// 服务容器</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> contract<span class="token punctuation">.</span>Distributed <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>LocalDistributedService<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token comment">// NewLocalDistributedService 初始化本地分布式服务</span>
<span class="token keyword">func</span> <span class="token function">NewLocalDistributedService</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;param error&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	container <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>LocalDistributedService<span class="token punctuation">{</span>container<span class="token punctuation">:</span> container<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// Select 为分布式选择器   （这里win不支持syscall.Flock，作废，换兼容性更好的）</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s LocalDistributedService<span class="token punctuation">)</span> <span class="token function">Select</span><span class="token punctuation">(</span>serviceName <span class="token builtin">string</span><span class="token punctuation">,</span> appID <span class="token builtin">string</span><span class="token punctuation">,</span> holdTime time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>selectAppID <span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	appService <span class="token operator">:=</span> s<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>
	runtimeFolder <span class="token operator">:=</span> appService<span class="token punctuation">.</span><span class="token function">RuntimeFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	lockFile <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>runtimeFolder<span class="token punctuation">,</span> <span class="token string">&quot;disribute_&quot;</span><span class="token operator">+</span>serviceName<span class="token punctuation">)</span>

	<span class="token comment">// 打开文件锁</span>
	lock<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span>lockFile<span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_RDWR<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREATE<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// 尝试独占文件锁</span>
	err <span class="token operator">=</span> syscall<span class="token punctuation">.</span><span class="token function">Flock</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">Fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>LOCK_EX<span class="token operator">|</span>syscall<span class="token punctuation">.</span>LOCK_NB<span class="token punctuation">)</span>
	<span class="token comment">// 抢不到文件锁</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// 读取被选择的appid</span>
		selectAppIDByt<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>selectAppIDByt<span class="token punctuation">)</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// 在一段时间内，选举有效，其他节点在这段时间不能再进行抢占</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 释放文件锁</span>
			syscall<span class="token punctuation">.</span><span class="token function">Flock</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">Fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>LOCK_UN<span class="token punctuation">)</span>
			<span class="token comment">// 释放文件</span>
			lock<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">// 删除文件锁对应的文件</span>
			os<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>lockFile<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 创建选举结果有效的计时器</span>
		timer <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>holdTime<span class="token punctuation">)</span>
		<span class="token comment">// 等待计时器结束</span>
		<span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 这里已经是抢占到了，将抢占到的appID写入文件</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> lock<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>appID<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> appID<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!tips] win 不支持 Flock 文件锁，所以额外实现一个 win 构建专用版</p></blockquote><p>win 版简单实现，调用 <code>kernel32.dll</code> 的 <code>LockFile</code> 方法来进行文件锁，<code>framework/provider/distributed/service_local_win.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//go:build windows</span>

<span class="token comment">// LocalDistributedService</span>
<span class="token keyword">type</span> LocalDistributedService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	container framework<span class="token punctuation">.</span>Container <span class="token comment">// 服务容器</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> contract<span class="token punctuation">.</span>Distributed <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>LocalDistributedService<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token comment">// NewLocalDistributedService 初始化本地分布式服务</span>
<span class="token keyword">func</span> <span class="token function">NewLocalDistributedService</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;param error&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	container <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>LocalDistributedService<span class="token punctuation">{</span>container<span class="token punctuation">:</span> container<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// Select 为分布式选择器   （这里win不支持syscall.Flock，作废，换兼容性更好的）</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s LocalDistributedService<span class="token punctuation">)</span> <span class="token function">Select</span><span class="token punctuation">(</span>serviceName <span class="token builtin">string</span><span class="token punctuation">,</span> appID <span class="token builtin">string</span><span class="token punctuation">,</span> holdTime time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>selectAppID <span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	appService <span class="token operator">:=</span> s<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>
	runtimeFolder <span class="token operator">:=</span> appService<span class="token punctuation">.</span><span class="token function">RuntimeFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	lockFile <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>runtimeFolder<span class="token punctuation">,</span> <span class="token string">&quot;disribute_&quot;</span><span class="token operator">+</span>serviceName<span class="token operator">+</span><span class="token string">&quot;.txt&quot;</span><span class="token punctuation">)</span>

	<span class="token comment">// 打开文件锁</span>
	lock<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span>lockFile<span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_RDWR<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREATE<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// win 下使用文件锁</span>
	h<span class="token punctuation">,</span> err <span class="token operator">:=</span> syscall<span class="token punctuation">.</span><span class="token function">LoadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;kernel32.dll&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> syscall<span class="token punctuation">.</span><span class="token function">FreeLibrary</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span>

	addr<span class="token punctuation">,</span> err <span class="token operator">:=</span> syscall<span class="token punctuation">.</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token string">&quot;LockFile&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	r0<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> syscall<span class="token punctuation">.</span><span class="token function">Syscall6</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> lock<span class="token punctuation">.</span><span class="token function">Fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token function">int</span><span class="token punctuation">(</span>r0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 加锁失败，只读的形式读取占用中的appid</span>
		selectAppIDByt<span class="token punctuation">,</span> readErr <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>
		<span class="token keyword">if</span> readErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>readErr<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;another process has locked a portion of the file.&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token string">&quot;ReadFileFailed&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> readErr
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>selectAppIDByt<span class="token punctuation">)</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// 在一段时间内，选举有效，其他节点在这段时间不能再进行抢占</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 释放文件锁</span>
			addr<span class="token punctuation">,</span> err <span class="token operator">=</span> syscall<span class="token punctuation">.</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token string">&quot;UnlockFile&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">}</span>
			syscall<span class="token punctuation">.</span><span class="token function">Syscall6</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> lock<span class="token punctuation">.</span><span class="token function">Fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

			<span class="token comment">// 释放文件</span>
			lock<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 创建选举结果有效的计时器</span>
		timer <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>holdTime<span class="token punctuation">)</span>
		<span class="token comment">// 等待计时器结束</span>
		<span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 这里已经是抢占到了，将抢占到的appID写入文件</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>appID<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> appID<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分布式调度实现在 <code>framework/cobra/gob_command_distributed.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// AddDistributedCronCommand 实现一个分布式定时器</span>
<span class="token comment">// serviceName 这个服务的唯一名字，不允许带有空格</span>
<span class="token comment">// spec 具体的执行时间</span>
<span class="token comment">// cmd 具体的执行命令</span>
<span class="token comment">// holdTime 表示如果我选择上了，这次选择持续的时间，也就是锁释放的时间</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token function">AddDistributedCronCommand</span><span class="token punctuation">(</span>serviceName <span class="token builtin">string</span><span class="token punctuation">,</span> spec <span class="token builtin">string</span><span class="token punctuation">,</span> cmd <span class="token operator">*</span>Command<span class="token punctuation">,</span> holdTime time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	root <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 初始化cron</span>
	<span class="token keyword">if</span> root<span class="token punctuation">.</span>Cron <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		root<span class="token punctuation">.</span>Cron <span class="token operator">=</span> cron<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>cron<span class="token punctuation">.</span><span class="token function">WithParser</span><span class="token punctuation">(</span>cron<span class="token punctuation">.</span><span class="token function">NewParser</span><span class="token punctuation">(</span>cron<span class="token punctuation">.</span>SecondOptional <span class="token operator">|</span> cron<span class="token punctuation">.</span>Minute <span class="token operator">|</span> cron<span class="token punctuation">.</span>Hour <span class="token operator">|</span> cron<span class="token punctuation">.</span>Dom <span class="token operator">|</span> cron<span class="token punctuation">.</span>Month <span class="token operator">|</span> cron<span class="token punctuation">.</span>Dow <span class="token operator">|</span> cron<span class="token punctuation">.</span>Descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		root<span class="token punctuation">.</span>CronSpecs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>CronSpec<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// cron命令的注释，这里注意Type为distributed-cron，ServiceName需要填写</span>
	root<span class="token punctuation">.</span>CronSpecs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>CronSpecs<span class="token punctuation">,</span> CronSpec<span class="token punctuation">{</span>
		Type<span class="token punctuation">:</span>        <span class="token string">&quot;distributed-cron&quot;</span><span class="token punctuation">,</span>
		Cmd<span class="token punctuation">:</span>         cmd<span class="token punctuation">,</span>
		Spec<span class="token punctuation">:</span>        spec<span class="token punctuation">,</span>
		ServiceName<span class="token punctuation">:</span> serviceName<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	appService <span class="token operator">:=</span> root<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>
	distributeServce <span class="token operator">:=</span> root<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>DistributedKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Distributed<span class="token punctuation">)</span>
	appID <span class="token operator">:=</span> appService<span class="token punctuation">.</span><span class="token function">AppID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 复制要执行的command为cronCmd，并且设置为rootCmd</span>
	<span class="token keyword">var</span> cronCmd Command
	ctx <span class="token operator">:=</span> root<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	cronCmd <span class="token operator">=</span> <span class="token operator">*</span>cmd
	cronCmd<span class="token punctuation">.</span>args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	cronCmd<span class="token punctuation">.</span><span class="token function">SetParentNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	cronCmd<span class="token punctuation">.</span>container <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 这里也传递上下文</span>
	<span class="token comment">// cron增加匿名函数</span>
	root<span class="token punctuation">.</span>Cron<span class="token punctuation">.</span><span class="token function">AddFunc</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 防止panic</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 节点进行选举，返回选举结果</span>
		selectedAppID<span class="token punctuation">,</span> err <span class="token operator">:=</span> distributeServce<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> appID<span class="token punctuation">,</span> holdTime<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果自己没有被选择到，直接返回</span>
		<span class="token keyword">if</span> selectedAppID <span class="token operator">!=</span> appID <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;独占锁失败，被占有ID：&quot;</span><span class="token punctuation">,</span> selectedAppID<span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果自己被选择到了，执行这个定时任务</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;独占锁成功，占有ID：&quot;</span><span class="token punctuation">,</span> selectedAppID<span class="token punctuation">)</span>
		err <span class="token operator">=</span> cronCmd<span class="token punctuation">.</span><span class="token function">ExecuteContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绑定业务时添加定时任务命令， <code>app/console/kernel.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 绑定业务的命令（业务定义的命令我们使用 \`app/console/kernel.go\` 中的 \`AddAppCommand\`进行挂载）</span>
<span class="token keyword">func</span> <span class="token function">AddAppCommand</span><span class="token punctuation">(</span>rootCmd <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token comment">// 启动一个分布式任务调度，调度的服务名称为init_func_for_test，</span>
	<span class="token comment">// 每个节点每5s调用一次Foo命令，抢占到了调度任务的节点将抢占锁持续挂载2s才释放</span>
	rootCmd<span class="token punctuation">.</span><span class="token function">AddDistributedCronCommand</span><span class="token punctuation">(</span><span class="token string">&quot;foo_func_for_test&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;*/5 * * * * *&quot;</span><span class="token punctuation">,</span> demo<span class="token punctuation">.</span>FooCommand<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码验证-4" tabindex="-1"><a class="header-anchor" href="#代码验证-4"><span>代码验证</span></a></h3><p>启动多个进程运行 <code>./gob cron start</code> ，同一时间只有一个抢到锁并执行。</p><h2 id="_15、16、配置和环境-配置服务中的设计思路" tabindex="-1"><a class="header-anchor" href="#_15、16、配置和环境-配置服务中的设计思路"><span>15、16、配置和环境：配置服务中的设计思路</span></a></h2><h3 id="环境变量服务" tabindex="-1"><a class="header-anchor" href="#环境变量服务"><span>环境变量服务</span></a></h3><h4 id="目标-6" tabindex="-1"><a class="header-anchor" href="#目标-6"><span>目标</span></a></h4><p>可以读取到配置的环境变量，赋值到系统内，实现配置化，并且区分运行环境。</p><h4 id="如何实现-7" tabindex="-1"><a class="header-anchor" href="#如何实现-7"><span>如何实现</span></a></h4><p>使用 <code>.env</code> 文件来设置默认环境变量。并且通过 os 标准库的 <code>os.Environ()</code> 获取环境变量。</p><h4 id="代码实现-9" tabindex="-1"><a class="header-anchor" href="#代码实现-9"><span>代码实现</span></a></h4><p><code>config</code> 文件划分：<code>dev/test/prod</code>。</p><p>服务定义： <code>framework/contract/env.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	<span class="token comment">// EnvProd 代表生产环境</span>
	EnvProd <span class="token operator">=</span> <span class="token string">&quot;prod&quot;</span>
	<span class="token comment">// EnvTest 代表测试环境</span>
	EnvTest <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span>
	<span class="token comment">// EnvDev 代表开发环境</span>
	EnvDev <span class="token operator">=</span> <span class="token string">&quot;dev&quot;</span>
	<span class="token comment">// EnvKey 是环境变量服务字符串凭证</span>
	EnvKey <span class="token operator">=</span> <span class="token string">&quot;gob:env&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// Env 定义环境变量服务</span>
<span class="token keyword">type</span> Env <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// AppEnv 获取当前的环境，建议分为 dev/test/prod</span>
	<span class="token function">AppEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token comment">// IsExist 判断一个环境变量是否有被设置</span>
	<span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
	<span class="token comment">// Get 获取某个环境变量，如果没有设置，返回&quot;&quot;</span>
	<span class="token function">Get</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token comment">// All 获取所有的环境变量，.env 和运行环境变量融合后结果</span>
	<span class="token function">All</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务提供： <code>framework/provider/env/provider.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// EnvProvider 提供App的具体实现方法</span>
<span class="token keyword">type</span> EnvProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Folder <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> framework<span class="token punctuation">.</span>ServiceProvider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>EnvProvider<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token comment">// Register 注册 GobAppService 方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>EnvProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> framework<span class="token punctuation">.</span>NewInstance <span class="token punctuation">{</span>
	<span class="token keyword">return</span> NewGobEnvService
<span class="token punctuation">}</span>
<span class="token comment">// Boot 启动调用</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>EnvProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	app <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>
	provider<span class="token punctuation">.</span>Folder <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token comment">// IsDefer 是否延迟初始化</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>EnvProvider<span class="token punctuation">)</span> <span class="token function">IsDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token comment">// Params 获取初始化参数</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>EnvProvider<span class="token punctuation">)</span> <span class="token function">Params</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>provider<span class="token punctuation">.</span>Folder<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Name 获取字符串凭证</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>EnvProvider<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> contract<span class="token punctuation">.</span>EnvKey
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体实现： <code>framework/provider/env/service.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// GobEnv 是 Env 的具体实现</span>
<span class="token keyword">type</span> GobEnv <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	folder <span class="token builtin">string</span>            <span class="token comment">// 代表.env所在的目录</span>
	maps   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">// 保存所有的环境变量</span>
<span class="token punctuation">}</span>

<span class="token comment">// NewGobEnv 有一个参数，.env文件所在的目录</span>
<span class="token comment">// example: NewGobEnv(&quot;/envfolder/&quot;) 会读取文件: /envfolder/.env</span>
<span class="token comment">// .env的文件格式 FOO_ENV=BAR</span>
<span class="token keyword">func</span> <span class="token function">NewGobEnvService</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;NewGobEnv param error&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 读取folder文件</span>
	folder <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>

	<span class="token comment">// 实例化</span>
	gobEnv <span class="token operator">:=</span> <span class="token operator">&amp;</span>GobEnv<span class="token punctuation">{</span>
		folder<span class="token punctuation">:</span> folder<span class="token punctuation">,</span>
		<span class="token comment">// 实例化环境变量，APP_ENV默认设置为开发环境</span>
		maps<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;APP_ENV&quot;</span><span class="token punctuation">:</span> contract<span class="token punctuation">.</span>EnvDev<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 解析 folder/.env文件</span>
	filePath <span class="token operator">:=</span> path<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> <span class="token string">&quot;.env&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// 读取.env文件, 不管任意失败，都不影响后续</span>

	<span class="token comment">// 打开文件.env</span>
	file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token comment">// 读取文件</span>
		br <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			<span class="token comment">// 按照行进行读取</span>
			line<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> br<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> c <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
				<span class="token keyword">break</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 按照等号解析</span>
			s <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token char">&#39;=&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
			<span class="token comment">// 如果不符合规范，则过滤</span>
			<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 保存map</span>
			key <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			val <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			gobEnv<span class="token punctuation">.</span>maps<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 获取当前程序的环境变量，并且覆盖.env文件下的变量</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span><span class="token function">Environ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		pair <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		gobEnv<span class="token punctuation">.</span>maps<span class="token punctuation">[</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 返回实例</span>
	<span class="token keyword">return</span> gobEnv<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// AppEnv 获取表示当前APP环境的变量APP_ENV</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>en <span class="token operator">*</span>GobEnv<span class="token punctuation">)</span> <span class="token function">AppEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> en<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;APP_ENV&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// IsExist 判断一个环境变量是否有被设置</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>en <span class="token operator">*</span>GobEnv<span class="token punctuation">)</span> <span class="token function">IsExist</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> en<span class="token punctuation">.</span>maps<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
	<span class="token keyword">return</span> ok
<span class="token punctuation">}</span>

<span class="token comment">// Get 获取某个环境变量，如果没有设置，返回&quot;&quot;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>en <span class="token operator">*</span>GobEnv<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> en<span class="token punctuation">.</span>maps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> val
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// All 获取所有的环境变量，.env和运行环境变量融合后结果</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>en <span class="token operator">*</span>GobEnv<span class="token punctuation">)</span> <span class="token function">All</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> en<span class="token punctuation">.</span>maps
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建相关命令， <code>framework/command/env.go</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// initEnvCommand 获取env相关的命令</span>
<span class="token keyword">func</span> <span class="token function">initEnvCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	envCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>envListCommand<span class="token punctuation">)</span>
	<span class="token keyword">return</span> envCommand
<span class="token punctuation">}</span>
<span class="token comment">// envCommand 获取当前的App环境</span>
<span class="token keyword">var</span> envCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;env&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;获取当前的App环境&quot;</span><span class="token punctuation">,</span>
	Run<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 获取env环境</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		envService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>EnvKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Env<span class="token punctuation">)</span>
		<span class="token comment">// 打印环境</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;environment:&quot;</span><span class="token punctuation">,</span> envService<span class="token punctuation">.</span><span class="token function">AppEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// envListCommand 获取所有的App环境变量</span>
<span class="token keyword">var</span> envListCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;获取所有的环境变量&quot;</span><span class="token punctuation">,</span>
	Run<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 获取env环境</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		envService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>EnvKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Env<span class="token punctuation">)</span>
		envs <span class="token operator">:=</span> envService<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		outs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> envs <span class="token punctuation">{</span>
			outs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>outs<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>k<span class="token punctuation">,</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		util<span class="token punctuation">.</span><span class="token function">PrettyPrint</span><span class="token punctuation">(</span>outs<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>挂载并绑定：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// \`main.go\` 增加：</span>
<span class="token comment">// 绑定 环境变量 服务提供者</span>
container<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>env<span class="token punctuation">.</span>EnvProvider<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// \`framework/command/kernel.go\` 增加：</span>
<span class="token comment">// 挂载 环境变量 命令</span>
root<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">initEnvCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码验证-5" tabindex="-1"><a class="header-anchor" href="#代码验证-5"><span>代码验证</span></a></h4><p>控制台验证：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token punctuation">.</span><span class="token operator">/</span>gob env   <span class="token comment">// 也可以： go run . env</span>
<span class="token comment">// 控制台输出：environment:dev</span>

APP_ENV<span class="token operator">=</span>testing <span class="token punctuation">.</span><span class="token operator">/</span>gob env
<span class="token comment">// 控制台输出：environment:test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单测编写，这里引入了 <a href="github.com/smartystreets/goconvey/convey">convey</a> 测试库，<code>framework/provider/env/provider_test.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token comment">// ...</span>
	<span class="token punctuation">.</span> <span class="token string">&quot;github.com/smartystreets/goconvey/convey&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">TestGobEnvProvider</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">Convey</span><span class="token punctuation">(</span><span class="token string">&quot;test gob env normal case&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		basePath <span class="token operator">:=</span> tests<span class="token punctuation">.</span>BasePath
		c <span class="token operator">:=</span> framework<span class="token punctuation">.</span><span class="token function">NewGobContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		sp <span class="token operator">:=</span> <span class="token operator">&amp;</span>app<span class="token punctuation">.</span>GobAppProvider<span class="token punctuation">{</span>BaseFolder<span class="token punctuation">:</span> basePath<span class="token punctuation">}</span>

		err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span>
		<span class="token function">So</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ShouldBeNil<span class="token punctuation">)</span>

		sp2 <span class="token operator">:=</span> <span class="token operator">&amp;</span>EnvProvider<span class="token punctuation">{</span><span class="token punctuation">}</span>
		err <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>sp2<span class="token punctuation">)</span>
		<span class="token function">So</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ShouldBeNil<span class="token punctuation">)</span>

		envServ <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>EnvKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Env<span class="token punctuation">)</span>
		<span class="token function">So</span><span class="token punctuation">(</span>envServ<span class="token punctuation">.</span><span class="token function">AppEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token string">&quot;dev&quot;</span><span class="token punctuation">)</span>
		<span class="token comment">// So(envServ.Get(&quot;DB_HOST&quot;), ShouldEqual, &quot;127.0.0.1&quot;)</span>
		<span class="token comment">// So(envServ.AppDebug(), ShouldBeTrue)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置服务" tabindex="-1"><a class="header-anchor" href="#配置服务"><span>配置服务</span></a></h3><h4 id="目标-7" tabindex="-1"><a class="header-anchor" href="#目标-7"><span>目标</span></a></h4><p>实现读取配置文件，并且支持热更新功能</p><h4 id="如何实现-8" tabindex="-1"><a class="header-anchor" href="#如何实现-8"><span>如何实现</span></a></h4>`,42),on={href:"https://github.com/go-yaml/yaml",target:"_blank",rel:"noopener noreferrer"},en=s("code",null,"env(*)",-1),cn=s("p",null,[n("并且读取配置时更新 "),s("code",null,"appService"),n(" 中的值。")],-1),ln={href:"https://github.com/fsnotify/fsnotify",target:"_blank",rel:"noopener noreferrer"},un=p(`<blockquote><p>本节代码额外引入了：<a href="github.com/mitchellh/mapstructure">mapstructure</a> 库、<a href="github.com/pkg/errors">errors</a> 库、<a href="github.com/kr/pretty">pretty</a> 库</p></blockquote><h4 id="代码实现-10" tabindex="-1"><a class="header-anchor" href="#代码实现-10"><span>代码实现</span></a></h4><h5 id="读取配置" tabindex="-1"><a class="header-anchor" href="#读取配置"><span>读取配置</span></a></h5><p>服务定义， <code>framework/contract/config.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	<span class="token comment">// ConfigKey 是配置服务字符串凭证</span>
	ConfigKey <span class="token operator">=</span> <span class="token string">&quot;gob:config&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// Config 定义了配置文件服务，读取配置文件，支持点分割的路径读取</span>
<span class="token comment">// 例如: .Get(&quot;app.name&quot;) 表示从 app 文件中读取 name 属性</span>
<span class="token comment">// 建议使用 yaml 属性, https://yaml.org/spec/1.2/spec.html</span>
<span class="token keyword">type</span> Config <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// IsExist 检查一个属性是否存在</span>
	<span class="token function">IsExist</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
	<span class="token comment">// Get 获取一个属性值</span>
	<span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token comment">// GetBool 获取一个 bool 属性</span>
	<span class="token function">GetBool</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
	<span class="token comment">// GetInt 获取一个 int 属性</span>
	<span class="token function">GetInt</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
	<span class="token comment">// GetFloat64 获取一个 float64 属性</span>
	<span class="token function">GetFloat64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">float64</span>
	<span class="token comment">// GetTime 获取一个 time 属性</span>
	<span class="token function">GetTime</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Time
	<span class="token comment">// GetString 获取一个 string 属性</span>
	<span class="token function">GetString</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token comment">// GetIntSlice 获取一个 int 数组属性</span>
	<span class="token function">GetIntSlice</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	<span class="token comment">// GetStringSlice 获取一个 string 数组</span>
	<span class="token function">GetStringSlice</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	<span class="token comment">// GetStringMap 获取一个 string 为 key，interface 为 val 的 map</span>
	<span class="token function">GetStringMap</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token comment">// GetStringMapString 获取一个 string 为 key，string 为 val 的 map</span>
	<span class="token function">GetStringMapString</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	<span class="token comment">// GetStringMapStringSlice 获取一个 string 为 key，数组 string 为 val 的 map</span>
	<span class="token function">GetStringMapStringSlice</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	<span class="token comment">// Load 加载配置到某个对象</span>
	<span class="token function">Load</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务提供， <code>provider/config/provider.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// ConfigProvider 服务提供者具体实现方法</span>
<span class="token keyword">type</span> ConfigProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> framework<span class="token punctuation">.</span>ServiceProvider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ConfigProvider<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token comment">// Register 注册 GobAppService 方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>ConfigProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> framework<span class="token punctuation">.</span>NewInstance <span class="token punctuation">{</span>
	<span class="token keyword">return</span> NewGobConfigService
<span class="token punctuation">}</span>
<span class="token comment">// Boot 启动调用</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>ConfigProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token comment">// IsDefer 是否延迟初始化</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>ConfigProvider<span class="token punctuation">)</span> <span class="token function">IsDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token comment">// Params 获取初始化参数</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>ConfigProvider<span class="token punctuation">)</span> <span class="token function">Params</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	appService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>
	envService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>EnvKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Env<span class="token punctuation">)</span>
	env <span class="token operator">:=</span> envService<span class="token punctuation">.</span><span class="token function">AppEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 配置文件夹地址</span>
	configFolder <span class="token operator">:=</span> appService<span class="token punctuation">.</span><span class="token function">ConfigFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	envFolder <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>configFolder<span class="token punctuation">,</span> env<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>container<span class="token punctuation">,</span> envFolder<span class="token punctuation">,</span> envService<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Name 获取字符串凭证</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>ConfigProvider<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> contract<span class="token punctuation">.</span>ConfigKey
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务实现， <code>provider/config/service.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// ConfigService 是 Config 的具体实现</span>
<span class="token keyword">type</span> ConfigService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	c        framework<span class="token punctuation">.</span>Container    <span class="token comment">// 容器</span>
	folder   <span class="token builtin">string</span>                 <span class="token comment">// 文件夹</span>
	keyDelim <span class="token builtin">string</span>                 <span class="token comment">// 路径的分隔符，默认为点</span>
	lock     sync<span class="token punctuation">.</span>RWMutex           <span class="token comment">// 配置文件读写锁</span>
	envMaps  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>      <span class="token comment">// 所有的环境变量</span>
	confMaps <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 配置文件结构，key为文件名</span>
	confRaws <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>      <span class="token comment">// 配置文件的原始信息</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> contract<span class="token punctuation">.</span>Config <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ConfigService<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token comment">// NewGobConfigService 初始化Config方法</span>
<span class="token keyword">func</span> <span class="token function">NewGobConfigService</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	container <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span>
	envFolder <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
	envMaps <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>

	<span class="token comment">// 检查文件夹是否存在</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>envFolder<span class="token punctuation">)</span><span class="token punctuation">;</span> os<span class="token punctuation">.</span><span class="token function">IsNotExist</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;folder &quot;</span> <span class="token operator">+</span> envFolder <span class="token operator">+</span> <span class="token string">&quot; not exist: &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 实例化</span>
	gobConf <span class="token operator">:=</span> <span class="token operator">&amp;</span>ConfigService<span class="token punctuation">{</span>
		c<span class="token punctuation">:</span>        container<span class="token punctuation">,</span>
		folder<span class="token punctuation">:</span>   envFolder<span class="token punctuation">,</span>
		envMaps<span class="token punctuation">:</span>  envMaps<span class="token punctuation">,</span>
		confMaps<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		confRaws<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		keyDelim<span class="token punctuation">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>
		lock<span class="token punctuation">:</span>     sync<span class="token punctuation">.</span>RWMutex<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 读取每个文件</span>
	files<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadDir</span><span class="token punctuation">(</span>envFolder<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">WithStack</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> file <span class="token operator">:=</span> <span class="token keyword">range</span> files <span class="token punctuation">{</span>
		fileName <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		err <span class="token operator">:=</span> gobConf<span class="token punctuation">.</span><span class="token function">loadConfigFile</span><span class="token punctuation">(</span>envFolder<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 监控文件夹文件</span>
	watch<span class="token punctuation">,</span> err <span class="token operator">:=</span> fsnotify<span class="token punctuation">.</span><span class="token function">NewWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> watch<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>envFolder<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			<span class="token keyword">select</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> ev <span class="token operator">:=</span> <span class="token operator">&lt;-</span>watch<span class="token punctuation">.</span>Events<span class="token punctuation">:</span>
				<span class="token comment">// 判断事件发生的类型</span>
				<span class="token comment">// Create 创建</span>
				<span class="token comment">// Write 写入</span>
				<span class="token comment">// Remove 删除</span>
				path<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
				index <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">LastIndex</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>PathSeparator<span class="token punctuation">)</span><span class="token punctuation">)</span>
				folder <span class="token operator">:=</span> path<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>
				fileName <span class="token operator">:=</span> path<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

				<span class="token keyword">if</span> ev<span class="token punctuation">.</span>Op<span class="token operator">&amp;</span>fsnotify<span class="token punctuation">.</span>Create <span class="token operator">==</span> fsnotify<span class="token punctuation">.</span>Create <span class="token punctuation">{</span>
					log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;创建文件 : &quot;</span><span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
					gobConf<span class="token punctuation">.</span><span class="token function">loadConfigFile</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> ev<span class="token punctuation">.</span>Op<span class="token operator">&amp;</span>fsnotify<span class="token punctuation">.</span>Write <span class="token operator">==</span> fsnotify<span class="token punctuation">.</span>Write <span class="token punctuation">{</span>
					log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;写入文件 : &quot;</span><span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
					gobConf<span class="token punctuation">.</span><span class="token function">loadConfigFile</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> ev<span class="token punctuation">.</span>Op<span class="token operator">&amp;</span>fsnotify<span class="token punctuation">.</span>Remove <span class="token operator">==</span> fsnotify<span class="token punctuation">.</span>Remove <span class="token punctuation">{</span>
					log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;删除文件 : &quot;</span><span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
					gobConf<span class="token punctuation">.</span><span class="token function">removeConfigFile</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token keyword">case</span> err <span class="token operator">:=</span> <span class="token operator">&lt;-</span>watch<span class="token punctuation">.</span>Errors<span class="token punctuation">:</span>
				log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;error : &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> gobConf<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 读取某个配置文件</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>conf <span class="token operator">*</span>ConfigService<span class="token punctuation">)</span> <span class="token function">loadConfigFile</span><span class="token punctuation">(</span>folder <span class="token builtin">string</span><span class="token punctuation">,</span> file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	conf<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> conf<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">//  判断文件是否以yaml或者yml作为后缀</span>
	s <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;yaml&quot;</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;yml&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		name <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		<span class="token comment">// 读取文件内容</span>
		bf<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 直接针对文本做环境变量的替换</span>
		bf <span class="token operator">=</span> <span class="token function">replace</span><span class="token punctuation">(</span>bf<span class="token punctuation">,</span> conf<span class="token punctuation">.</span>envMaps<span class="token punctuation">)</span>
		<span class="token comment">// 解析对应的文件</span>
		c <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> yaml<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>bf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		conf<span class="token punctuation">.</span>confMaps<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> c
		conf<span class="token punctuation">.</span>confRaws<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> bf

		<span class="token comment">// 读取app.path中的信息，更新 app 对应的 folder</span>
		<span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">&quot;app&quot;</span> <span class="token operator">&amp;&amp;</span> conf<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">IsBind</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">[</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
				appService <span class="token operator">:=</span> conf<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>
				appService<span class="token punctuation">.</span><span class="token function">LoadAppConfig</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToStringMapString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 删除文件的操作</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>conf <span class="token operator">*</span>ConfigService<span class="token punctuation">)</span> <span class="token function">removeConfigFile</span><span class="token punctuation">(</span>folder <span class="token builtin">string</span><span class="token punctuation">,</span> file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	conf<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> conf<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	s <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// 只有yaml或者yml后缀才执行</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;yaml&quot;</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;yml&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		name <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		<span class="token comment">// 删除内存中对应的key</span>
		<span class="token function">delete</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>confRaws<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
		<span class="token function">delete</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>confMaps<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// replace 表示使用环境变量maps替换context中的env(xxx)的环境变量</span>
<span class="token keyword">func</span> <span class="token function">replace</span><span class="token punctuation">(</span>content <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> maps <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> maps <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> content
	<span class="token punctuation">}</span>
	<span class="token comment">// 直接使用ReplaceAll替换。这个性能可能不是最优，但是配置文件加载，频率是比较低的，可以接受</span>
	<span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> maps <span class="token punctuation">{</span>
		reKey <span class="token operator">:=</span> <span class="token string">&quot;env(&quot;</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span>
		content <span class="token operator">=</span> bytes<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>reKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> content
<span class="token punctuation">}</span>

<span class="token comment">// 查找某个路径的配置项</span>
<span class="token keyword">func</span> <span class="token function">searchMap</span><span class="token punctuation">(</span>source <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> source
	<span class="token punctuation">}</span>
	<span class="token comment">// 判断是否有下个路径</span>
	next<span class="token punctuation">,</span> ok <span class="token operator">:=</span> source<span class="token punctuation">[</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
		<span class="token comment">// 判断这个路径是否为1</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> next
		<span class="token punctuation">}</span>
		<span class="token comment">// 判断下一个路径的类型</span>
		<span class="token keyword">switch</span> next<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
			<span class="token comment">// 如果是interface的map，使用cast进行下value转换</span>
			<span class="token keyword">return</span> <span class="token function">searchMap</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToStringMap</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
			<span class="token comment">// 如果是map[string]，直接循环调用</span>
			<span class="token keyword">return</span> <span class="token function">searchMap</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			<span class="token comment">// 否则的话，返回nil</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 通过path获取某个元素</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>conf <span class="token operator">*</span>ConfigService<span class="token punctuation">)</span> <span class="token function">find</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	conf<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> conf<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token function">searchMap</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>confMaps<span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> conf<span class="token punctuation">.</span>keyDelim<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// IsExist check setting is exist</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>conf <span class="token operator">*</span>ConfigService<span class="token punctuation">)</span> <span class="token function">IsExist</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> conf<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// Get 获取某个配置项</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>conf <span class="token operator">*</span>ConfigService<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> conf<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// GetBool 获取bool类型配置</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>conf <span class="token operator">*</span>ConfigService<span class="token punctuation">)</span> <span class="token function">GetBool</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> cast<span class="token punctuation">.</span><span class="token function">ToBool</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">...</span> <span class="token comment">// 其他Get*方法</span>

<span class="token comment">// Load a config to a struct, val should be an pointer</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>conf <span class="token operator">*</span>ConfigService<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	decoder<span class="token punctuation">,</span> err <span class="token operator">:=</span> mapstructure<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mapstructure<span class="token punctuation">.</span>DecoderConfig<span class="token punctuation">{</span>
		TagName<span class="token punctuation">:</span> <span class="token string">&quot;yaml&quot;</span><span class="token punctuation">,</span>
		Result<span class="token punctuation">:</span>  val<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> decoder<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="读取配置替换-app-配置" tabindex="-1"><a class="header-anchor" href="#读取配置替换-app-配置"><span>读取配置替换 app 配置</span></a></h5><p><code>framework/contract/app.go</code> 新增：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> App <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span> 
	<span class="token comment">// LoadAppConfig 加载新的AppConfig，key为对应的函数转为小写下划线，比如ConfigFolder =&gt; config_folder</span>
	<span class="token function">LoadAppConfig</span><span class="token punctuation">(</span>kv <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>framework/provider/app/service.go</code> 新增：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 将 GobApp 增加一个 \`configMap\` 字段：</span>
<span class="token comment">// GobApp 代表gob框架的App实现</span>
<span class="token keyword">type</span> GobApp <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   <span class="token operator">...</span>
   configMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">// 配置加载</span>
<span class="token punctuation">}</span>

<span class="token comment">// 同时为 GobApp 增加 \`LoadAppConfig\` 方法，用于读取配置文件中的信息：</span>
<span class="token comment">// LoadAppConfig 加载配置map</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app <span class="token operator">*</span>GobApp<span class="token punctuation">)</span> <span class="token function">LoadAppConfig</span><span class="token punctuation">(</span>kv <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> kv <span class="token punctuation">{</span>
      app<span class="token punctuation">.</span>configMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 队友app方法全部改为先读取配置文件</span>
<span class="token comment">// ConfigFolder  表示配置文件地址</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app GobAppService<span class="token punctuation">)</span> <span class="token function">ConfigFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> app<span class="token punctuation">.</span>configMap<span class="token punctuation">[</span><span class="token string">&quot;config_folder&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> val
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;config&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span> <span class="token comment">// 其他方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加载时机，上面服务实现已经有了的 <code>provider/config/service.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 读取某个配置文件</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>conf <span class="token operator">*</span>ConfigService<span class="token punctuation">)</span> <span class="token function">loadConfigFile</span><span class="token punctuation">(</span>folder <span class="token builtin">string</span><span class="token punctuation">,</span> file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
		<span class="token operator">...</span>
		<span class="token comment">// 读取app.path中的信息，更新 app 对应的 folder</span>
		<span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">&quot;app&quot;</span> <span class="token operator">&amp;&amp;</span> conf<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">IsBind</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">[</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
				appService <span class="token operator">:=</span> conf<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>
				appService<span class="token punctuation">.</span><span class="token function">LoadAppConfig</span><span class="token punctuation">(</span>cast<span class="token punctuation">.</span><span class="token function">ToStringMapString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="配置文件热更新" tabindex="-1"><a class="header-anchor" href="#配置文件热更新"><span>配置文件热更新</span></a></h5><p>监控文件回调，上面服务实现已经有了的 <code>provider/config/service.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// NewGobConfigService 初始化Config方法</span>
<span class="token keyword">func</span> <span class="token function">NewGobConfigService</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token comment">// 监控文件夹文件</span>
	watch<span class="token punctuation">,</span> err <span class="token operator">:=</span> fsnotify<span class="token punctuation">.</span><span class="token function">NewWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			<span class="token keyword">select</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> ev <span class="token operator">:=</span> <span class="token operator">&lt;-</span>watch<span class="token punctuation">.</span>Events<span class="token punctuation">:</span>
				path<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
				index <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">LastIndex</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>PathSeparator<span class="token punctuation">)</span><span class="token punctuation">)</span>
				folder <span class="token operator">:=</span> path<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>
				fileName <span class="token operator">:=</span> path<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
				<span class="token keyword">if</span> ev<span class="token punctuation">.</span>Op<span class="token operator">&amp;</span>fsnotify<span class="token punctuation">.</span>Create <span class="token operator">==</span> fsnotify<span class="token punctuation">.</span>Create <span class="token punctuation">{</span>
					log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;创建文件 : &quot;</span><span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
					gobConf<span class="token punctuation">.</span><span class="token function">loadConfigFile</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> ev<span class="token punctuation">.</span>Op<span class="token operator">&amp;</span>fsnotify<span class="token punctuation">.</span>Write <span class="token operator">==</span> fsnotify<span class="token punctuation">.</span>Write <span class="token punctuation">{</span>
					log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;写入文件 : &quot;</span><span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
					gobConf<span class="token punctuation">.</span><span class="token function">loadConfigFile</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> ev<span class="token punctuation">.</span>Op<span class="token operator">&amp;</span>fsnotify<span class="token punctuation">.</span>Remove <span class="token operator">==</span> fsnotify<span class="token punctuation">.</span>Remove <span class="token punctuation">{</span>
					log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;删除文件 : &quot;</span><span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
					gobConf<span class="token punctuation">.</span><span class="token function">removeConfigFile</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token keyword">case</span> err <span class="token operator">:=</span> <span class="token operator">&lt;-</span>watch<span class="token punctuation">.</span>Errors<span class="token punctuation">:</span>
				log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;error : &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> gobConf<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且 <code>find</code> 函数加读锁，<code>loadConfigFlie</code> 函数加写锁。</p><h5 id="挂载并绑定命令" tabindex="-1"><a class="header-anchor" href="#挂载并绑定命令"><span>挂载并绑定命令</span></a></h5><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// initConfigCommand 获取配置相关的命令</span>
<span class="token keyword">func</span> <span class="token function">initConfigCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	configCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>configGetCommand<span class="token punctuation">)</span>
	<span class="token keyword">return</span> configCommand
<span class="token punctuation">}</span>

<span class="token comment">// envCommand 获取当前的App环境</span>
<span class="token keyword">var</span> configCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;config&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;获取配置相关信息&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// envListCommand 获取所有的App环境变量</span>
<span class="token keyword">var</span> configGetCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;获取某个配置信息&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		configService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;参数错误&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		configPath <span class="token operator">:=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		val <span class="token operator">:=</span> configService<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
		<span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;配置路径 &quot;</span><span class="token punctuation">,</span> configPath<span class="token punctuation">,</span> <span class="token string">&quot; 不存在&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%# v\\n&quot;</span><span class="token punctuation">,</span> pretty<span class="token punctuation">.</span><span class="token function">Formatter</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// \`main.go\` 增加：</span>
<span class="token comment">// 绑定 配置 服务提供者</span>
container<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>config<span class="token punctuation">.</span>ConfigProvider<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// \`framework/command/kernel.go\` 增加：</span>
<span class="token comment">// 挂载 配置 命令  </span>
root<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">initConfigCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码验证-6" tabindex="-1"><a class="header-anchor" href="#代码验证-6"><span>代码验证</span></a></h4><p>配置简单定义， <code>app/config/dev/database.yaml</code> ：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">mysql</span><span class="token punctuation">:</span>
  <span class="token key atrule">hostname</span><span class="token punctuation">:</span> 127.0.0.1
  <span class="token key atrule">username</span><span class="token punctuation">:</span> test
  <span class="token key atrule">password</span><span class="token punctuation">:</span> env(DB_PASSWORD)
  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>业务目录下的 <code>module/demo/api.go</code>，替换其中 <code>/demo/demo</code> 对应的路由方法：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>api <span class="token operator">*</span>DemoApi<span class="token punctuation">)</span> <span class="token function">Demo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 获取password</span>
   configService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
   password <span class="token operator">:=</span> configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;database.mysql.password&quot;</span><span class="token punctuation">)</span>
   <span class="token comment">// 打印出来</span>
   c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后使用命令行 <code>./gob app start</code> 启动服务，访问测试；</p><p>注入变量后再次访问测试：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>DB_PASSWORD<span class="token operator">=</span><span class="token number">123</span> <span class="token punctuation">.</span><span class="token operator">/</span>gob app start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不停止进程，更新 <code>database.yaml</code> 文件后，再次访问测试。</p><p>控制台验证：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token punctuation">.</span><span class="token operator">/</span>gob config get database   <span class="token comment">// 也可以： go run . config get database</span>
<span class="token comment">// 控制台输出：database.yaml 的相关打印输出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17、日志" tabindex="-1"><a class="header-anchor" href="#_17、日志"><span>17、日志</span></a></h2><p>解决三个问题：什么样的日志需要输出？日志输出哪些内容？日志输出到哪里？</p><h3 id="如何实现-9" tabindex="-1"><a class="header-anchor" href="#如何实现-9"><span>如何实现</span></a></h3><h4 id="日志级别" tabindex="-1"><a class="header-anchor" href="#日志级别"><span>日志级别</span></a></h4>`,38),kn={href:"https://datatracker.ietf.org/doc/html/rfc5424",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://logging.apache.org/log4j/2.x/",target:"_blank",rel:"noopener noreferrer"},dn=p(`<ul><li>panic，表示会导致整个程序出现崩溃的日志信息</li><li>fatal，表示会导致当前这个请求出现提前终止的错误信息</li><li>error，表示出现错误，但是不一定影响后续请求逻辑的错误信息</li><li>warn，表示出现错误，但是一定不影响后续请求逻辑的报警信息</li><li>info，表示正常的日志信息输出</li><li>debug，表示在调试状态下打印出来的日志信息</li><li>trace，表示最详细的信息，一般信息量比较大，可能包含调用堆栈等信息</li></ul><h4 id="日志格式" tabindex="-1"><a class="header-anchor" href="#日志格式"><span>日志格式</span></a></h4><p>一般分为四个部分：</p><ul><li>日志级别，输出当前日志的级别信息。</li><li>日志时间，输出当前日志的打印时间。</li><li>日志简要信息，输出当前日志的简要描述信息，一句话说明日志错误。</li><li>日志上下文字段，输出当前日志的附带信息。这些字段代表日志打印的上下文。</li></ul><p>例如：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token punctuation">[</span>Info<span class="token punctuation">]</span>	<span class="token number">2024</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>10T20<span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">08</span><span class="token punctuation">:</span><span class="token number">00</span>	<span class="token string">&quot;demo test logger&quot;</span>	<span class="token keyword">map</span><span class="token punctuation">[</span>api<span class="token punctuation">:</span>demo<span class="token operator">/</span>demo cspan_id<span class="token punctuation">:</span> parent_id<span class="token punctuation">:</span> span_id<span class="token punctuation">:</span>cmf926hfq7kkqh35eno0 trace_id<span class="token punctuation">:</span>cmf926hfq7kkqh35enng password<span class="token punctuation">:</span><span class="token number">666</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="日志切割" tabindex="-1"><a class="header-anchor" href="#日志切割"><span>日志切割</span></a></h4>`,7),vn={href:"https://github.com/lestrrat-go/file-rotatelogs",target:"_blank",rel:"noopener noreferrer"},mn=s("h4",{id:"日志输出",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#日志输出"},[s("span",null,"日志输出")])],-1),bn=s("p",null,[n("输出到 "),s("code",null,"io.Writer"),n(" 管道，每个应用具体再实现。")],-1),fn=s("h4",{id:"全链路",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#全链路"},[s("span",null,"全链路")])],-1),gn={href:"https://medium.com/100paperschallenge/insights-from-paper-google-dapper-a-large-scale-distributed-systems-tracing-infrastructure-1f5a448ca000",target:"_blank",rel:"noopener noreferrer"},yn=p(`<h4 id="id" tabindex="-1"><a class="header-anchor" href="#id"><span>ID</span></a></h4><p>引入 <code>&quot;github.com/rs/xid&quot;</code> 全局唯一标识符（GUID）库。</p><h3 id="代码实现-11" tabindex="-1"><a class="header-anchor" href="#代码实现-11"><span>代码实现</span></a></h3><h4 id="日志服务" tabindex="-1"><a class="header-anchor" href="#日志服务"><span>日志服务</span></a></h4><p>服务定义：<code>framework/contract/log.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// LogKey 定义字符串凭证</span>
<span class="token keyword">const</span> LogKey <span class="token operator">=</span> <span class="token string">&quot;gob:log&quot;</span>

<span class="token keyword">type</span> LogLevel <span class="token builtin">uint32</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	<span class="token comment">// UnknownLevel 表示未知的日志级别</span>
	UnknownLevel LogLevel <span class="token operator">=</span> <span class="token boolean">iota</span>
	<span class="token comment">// PanicLevel level, panic 表示会导致整个程序出现崩溃的日志信息</span>
	PanicLevel
	<span class="token comment">// FatalLevel level. fatal 表示会导致当前这个请求出现提前终止的错误信息</span>
	FatalLevel
	<span class="token comment">// ErrorLevel level. error 表示出现错误，但是不一定影响后续请求逻辑的错误信息</span>
	ErrorLevel
	<span class="token comment">// WarnLevel level. warn 表示出现错误，但是一定不影响后续请求逻辑的报警信息</span>
	WarnLevel
	<span class="token comment">// InfoLevel level. info 表示正常的日志信息输出</span>
	InfoLevel
	<span class="token comment">// DebugLevel level. debug 表示在调试状态下打印出来的日志信息</span>
	DebugLevel
	<span class="token comment">// TraceLevel level. trace 表示最详细的信息，一般信息量比较大，可能包含调用堆栈等信息</span>
	TraceLevel
<span class="token punctuation">)</span>

<span class="token comment">// CtxFielder 定义了从context中获取信息的方法</span>
<span class="token keyword">type</span> CtxFielder <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// Formatter 定义了将日志信息组织成字符串的通用方法</span>
<span class="token keyword">type</span> Formatter <span class="token keyword">func</span><span class="token punctuation">(</span>level LogLevel<span class="token punctuation">,</span> t time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>

<span class="token comment">// Log define interface for log</span>
<span class="token keyword">type</span> Log <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// Panic 表示会导致整个程序出现崩溃的日志信息</span>
	<span class="token function">Panic</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// Fatal 表示会导致当前这个请求出现提前终止的错误信息</span>
	<span class="token function">Fatal</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// Error 表示出现错误，但是不一定影响后续请求逻辑的错误信息</span>
	<span class="token function">Error</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// Warn 表示出现错误，但是一定不影响后续请求逻辑的报警信息</span>
	<span class="token function">Warn</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// Info 表示正常的日志信息输出</span>
	<span class="token function">Info</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// Debug 表示在调试状态下打印出来的日志信息</span>
	<span class="token function">Debug</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// Trace 表示最详细的信息，一般信息量比较大，可能包含调用堆栈等信息</span>
	<span class="token function">Trace</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// SetLevel 设置日志级别</span>
	<span class="token function">SetLevel</span><span class="token punctuation">(</span>level LogLevel<span class="token punctuation">)</span>
	<span class="token comment">// SetCtxFielder 从context中获取上下文字段field</span>
	<span class="token function">SetCtxFielder</span><span class="token punctuation">(</span>handler CtxFielder<span class="token punctuation">)</span>
	<span class="token comment">// SetFormatter 设置输出格式</span>
	<span class="token function">SetFormatter</span><span class="token punctuation">(</span>formatter Formatter<span class="token punctuation">)</span>
	<span class="token comment">// SetOutput 设置输出管道</span>
	<span class="token function">SetOutput</span><span class="token punctuation">(</span>out io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务提供，<code>framework/provider/log/provider.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// LogProvider 服务提供者具体实现方法</span>
<span class="token keyword">type</span> LogProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// 运行模式</span>
	Driver <span class="token builtin">string</span>
	<span class="token comment">// 日志级别</span>
	Level contract<span class="token punctuation">.</span>LogLevel
	<span class="token comment">// 日志输出格式方法</span>
	Formatter contract<span class="token punctuation">.</span>Formatter
	<span class="token comment">// 日志context上下文信息获取函数</span>
	CtxFielder contract<span class="token punctuation">.</span>CtxFielder
	<span class="token comment">// 日志输出信息</span>
	Output io<span class="token punctuation">.</span>Writer
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> framework<span class="token punctuation">.</span>ServiceProvider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>LogProvider<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token comment">// Register 注册 GobAppService 方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>LogProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> framework<span class="token punctuation">.</span>NewInstance <span class="token punctuation">{</span>
	<span class="token keyword">if</span> provider<span class="token punctuation">.</span>Driver <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		configContainer<span class="token punctuation">,</span> err <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token comment">// 默认使用console</span>
			<span class="token keyword">return</span> services<span class="token punctuation">.</span>NewConsoleLogService
		<span class="token punctuation">}</span>
		config <span class="token operator">:=</span> configContainer<span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
		provider<span class="token punctuation">.</span>Driver <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;log.driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 根据driver的配置项确定</span>
	<span class="token keyword">switch</span> provider<span class="token punctuation">.</span>Driver <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token string">&quot;single&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> services<span class="token punctuation">.</span>NewSingleLogService
	<span class="token keyword">case</span> <span class="token string">&quot;rotate&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> services<span class="token punctuation">.</span>NewRotateLogService
	<span class="token keyword">case</span> <span class="token string">&quot;console&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> services<span class="token punctuation">.</span>NewConsoleLogService
	<span class="token keyword">case</span> <span class="token string">&quot;custom&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> services<span class="token punctuation">.</span>NewCustomLogService
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> services<span class="token punctuation">.</span>NewConsoleLogService
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Boot 启动调用</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>LogProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token comment">// IsDefer 是否延迟初始化</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>LogProvider<span class="token punctuation">)</span> <span class="token function">IsDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token comment">// Params 获取初始化参数</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>LogProvider<span class="token punctuation">)</span> <span class="token function">Params</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token comment">// 获取configService</span>
	configService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
	<span class="token comment">// 设置参数formatter</span>
	<span class="token keyword">if</span> provider<span class="token punctuation">.</span>Formatter <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		provider<span class="token punctuation">.</span>Formatter <span class="token operator">=</span> formatter<span class="token punctuation">.</span>TextFormatter
		<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;log.formatter&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			v <span class="token operator">:=</span> configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;log.formatter&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token string">&quot;json&quot;</span> <span class="token punctuation">{</span>
				provider<span class="token punctuation">.</span>Formatter <span class="token operator">=</span> formatter<span class="token punctuation">.</span>JsonFormatter
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token string">&quot;text&quot;</span> <span class="token punctuation">{</span>
				provider<span class="token punctuation">.</span>Formatter <span class="token operator">=</span> formatter<span class="token punctuation">.</span>TextFormatter
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 设置参数level</span>
	<span class="token keyword">if</span> provider<span class="token punctuation">.</span>Level <span class="token operator">==</span> contract<span class="token punctuation">.</span>UnknownLevel <span class="token punctuation">{</span>
		provider<span class="token punctuation">.</span>Level <span class="token operator">=</span> contract<span class="token punctuation">.</span>InfoLevel
		<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;log.level&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			provider<span class="token punctuation">.</span>Level <span class="token operator">=</span> <span class="token function">logLevel</span><span class="token punctuation">(</span>configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;log.level&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 定义5个参数</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>container<span class="token punctuation">,</span> provider<span class="token punctuation">.</span>Level<span class="token punctuation">,</span> provider<span class="token punctuation">.</span>CtxFielder<span class="token punctuation">,</span> provider<span class="token punctuation">.</span>Formatter<span class="token punctuation">,</span> provider<span class="token punctuation">.</span>Output<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Name 获取字符串凭证</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>LogProvider<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> contract<span class="token punctuation">.</span>LogKey
<span class="token punctuation">}</span>

<span class="token comment">// logLevel get level from string</span>
<span class="token keyword">func</span> <span class="token function">logLevel</span><span class="token punctuation">(</span>config <span class="token builtin">string</span><span class="token punctuation">)</span> contract<span class="token punctuation">.</span>LogLevel <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token string">&quot;panic&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> contract<span class="token punctuation">.</span>PanicLevel
	<span class="token keyword">case</span> <span class="token string">&quot;fatal&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> contract<span class="token punctuation">.</span>FatalLevel
	<span class="token keyword">case</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> contract<span class="token punctuation">.</span>ErrorLevel
	<span class="token keyword">case</span> <span class="token string">&quot;warn&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> contract<span class="token punctuation">.</span>WarnLevel
	<span class="token keyword">case</span> <span class="token string">&quot;info&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> contract<span class="token punctuation">.</span>InfoLevel
	<span class="token keyword">case</span> <span class="token string">&quot;debug&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> contract<span class="token punctuation">.</span>DebugLevel
	<span class="token keyword">case</span> <span class="token string">&quot;trace&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> contract<span class="token punctuation">.</span>TraceLevel
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> contract<span class="token punctuation">.</span>UnknownLevel
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务实现，<code>framework/provider/log/services/log.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// LogService 的通用实例</span>
<span class="token keyword">type</span> LogService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// 五个必要的参数</span>
	c          framework<span class="token punctuation">.</span>Container <span class="token comment">// 容器</span>
	level      contract<span class="token punctuation">.</span>LogLevel   <span class="token comment">// 日志级别</span>
	formatter  contract<span class="token punctuation">.</span>Formatter  <span class="token comment">// 日志格式化方法</span>
	ctxFielder contract<span class="token punctuation">.</span>CtxFielder <span class="token comment">// ctx获取上下文字段</span>
	output     io<span class="token punctuation">.</span>Writer           <span class="token comment">// 输出</span>
<span class="token punctuation">}</span>

<span class="token comment">// IsLevelEnable 判断这个级别是否可以打印</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>log <span class="token operator">*</span>LogService<span class="token punctuation">)</span> <span class="token function">IsLevelEnable</span><span class="token punctuation">(</span>level contract<span class="token punctuation">.</span>LogLevel<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> level <span class="token operator">&lt;=</span> log<span class="token punctuation">.</span>level
<span class="token punctuation">}</span>

<span class="token comment">// logf 为打印日志的核心函数</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>log <span class="token operator">*</span>LogService<span class="token punctuation">)</span> <span class="token function">logf</span><span class="token punctuation">(</span>level contract<span class="token punctuation">.</span>LogLevel<span class="token punctuation">,</span> ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// 先判断日志级别</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>log<span class="token punctuation">.</span><span class="token function">IsLevelEnable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 使用ctxFielder 获取context中的信息</span>
	fs <span class="token operator">:=</span> fields  
	<span class="token keyword">if</span> fs <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
	    fs <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> log<span class="token punctuation">.</span>ctxFielder <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		t <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">ctxFielder</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
		<span class="token keyword">if</span> t <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> t <span class="token punctuation">{</span>
				fs<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//如果绑定了trace服务，获取trace信息</span>
	<span class="token keyword">if</span> log<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">IsBind</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>TraceKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		tracer <span class="token operator">:=</span> log<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>TraceKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Trace<span class="token punctuation">)</span>
		tc <span class="token operator">:=</span> tracer<span class="token punctuation">.</span><span class="token function">GetTrace</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
		<span class="token keyword">if</span> tc <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			maps <span class="token operator">:=</span> tracer<span class="token punctuation">.</span><span class="token function">ToMap</span><span class="token punctuation">(</span>tc<span class="token punctuation">)</span>
			<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> maps <span class="token punctuation">{</span>
				fs<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 将日志信息按照formatter序列化为字符串</span>
	<span class="token keyword">if</span> log<span class="token punctuation">.</span>formatter <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span>formatter <span class="token operator">=</span> formatter<span class="token punctuation">.</span>TextFormatter
	<span class="token punctuation">}</span>
	ct<span class="token punctuation">,</span> err <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">formatter</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> fs<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token comment">// 如果是panic级别，则使用log进行panic</span>
	<span class="token keyword">if</span> level <span class="token operator">==</span> contract<span class="token punctuation">.</span>PanicLevel <span class="token punctuation">{</span>
		pkgLog<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 通过output进行输出</span>
	log<span class="token punctuation">.</span>output<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span>
	log<span class="token punctuation">.</span>output<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// Panic 输出panic的日志信息</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>log <span class="token operator">*</span>LogService<span class="token punctuation">)</span> <span class="token function">Panic</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">logf</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>PanicLevel<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> fields<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">...</span> <span class="token comment">// 其他 level 输出日志信息</span>

<span class="token comment">// SetLevel set log level, and higher level will be recorded</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>log <span class="token operator">*</span>LogService<span class="token punctuation">)</span> <span class="token function">SetLevel</span><span class="token punctuation">(</span>level contract<span class="token punctuation">.</span>LogLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span>level <span class="token operator">=</span> level
<span class="token punctuation">}</span>
<span class="token comment">// SetCxtFielder will get fields from context</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>log <span class="token operator">*</span>LogService<span class="token punctuation">)</span> <span class="token function">SetCtxFielder</span><span class="token punctuation">(</span>handler contract<span class="token punctuation">.</span>CtxFielder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span>ctxFielder <span class="token operator">=</span> handler
<span class="token punctuation">}</span>
<span class="token comment">// SetFormatter will set formatter handler will covert data to string for recording</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>log <span class="token operator">*</span>LogService<span class="token punctuation">)</span> <span class="token function">SetFormatter</span><span class="token punctuation">(</span>formatter contract<span class="token punctuation">.</span>Formatter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span>formatter <span class="token operator">=</span> formatter
<span class="token punctuation">}</span>
<span class="token comment">// SetOutput 设置output</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>log <span class="token operator">*</span>LogService<span class="token punctuation">)</span> <span class="token function">SetOutput</span><span class="token punctuation">(</span>output io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span>output <span class="token operator">=</span> output
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他继承 <code>log.go</code> 的日志输出方式，例如：<code>framework/provider/log/services/rotate.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// RotateLogService 代表会进行切割的日志文件存储</span>
<span class="token keyword">type</span> RotateLogService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	LogService
	<span class="token comment">// 日志文件存储目录</span>
	folder <span class="token builtin">string</span>
	<span class="token comment">// 日志文件名</span>
	file <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">// NewRotateLogService 实例化 RotateLogService</span>
<span class="token keyword">func</span> <span class="token function">NewRotateLogService</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 参数解析</span>
	c <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span>
	level <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>LogLevel<span class="token punctuation">)</span>
	ctxFielder <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>CtxFielder<span class="token punctuation">)</span>
	formatter <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Formatter<span class="token punctuation">)</span>

	appService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>
	configService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>

	<span class="token comment">// 从配置文件中获取folder信息，否则使用默认的LogFolder文件夹</span>
	folder <span class="token operator">:=</span> appService<span class="token punctuation">.</span><span class="token function">LogFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;log.folder&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		folder <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;log.folder&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 如果folder不存在，则创建</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>util<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		os<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> os<span class="token punctuation">.</span>ModePerm<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 从配置文件中获取file信息，否则使用默认的gob.log</span>
	file <span class="token operator">:=</span> <span class="token string">&quot;gob.log&quot;</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;log.file&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		file <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;log.file&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 从配置文件获取date_format信息</span>
	dateFormat <span class="token operator">:=</span> <span class="token string">&quot;%Y%m%d%H&quot;</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;log.date_format&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		dateFormat <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;log.date_format&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	linkName <span class="token operator">:=</span> rotatelogs<span class="token punctuation">.</span><span class="token function">WithLinkName</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">)</span>
	options <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>rotatelogs<span class="token punctuation">.</span>Option<span class="token punctuation">{</span>linkName<span class="token punctuation">}</span>
	<span class="token comment">// 从配置文件获取rotate_count信息</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;log.rotate_count&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		rotateCount <span class="token operator">:=</span> configService<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">&quot;log.rotate_count&quot;</span><span class="token punctuation">)</span>
		options <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> rotatelogs<span class="token punctuation">.</span><span class="token function">WithRotationCount</span><span class="token punctuation">(</span><span class="token function">uint</span><span class="token punctuation">(</span>rotateCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 从配置文件获取rotate_size信息</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;log.rotate_size&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		rotateSize <span class="token operator">:=</span> configService<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">&quot;log.rotate_size&quot;</span><span class="token punctuation">)</span>
		options <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> rotatelogs<span class="token punctuation">.</span><span class="token function">WithRotationSize</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>rotateSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 从配置文件获取max_age信息</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;log.max_age&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> maxAgeParse<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;log.max_age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			options <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> rotatelogs<span class="token punctuation">.</span><span class="token function">WithMaxAge</span><span class="token punctuation">(</span>maxAgeParse<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 从配置文件获取rotate_time信息</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;log.rotate_time&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> rotateTimeParse<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;log.rotate_time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			options <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> rotatelogs<span class="token punctuation">.</span><span class="token function">WithRotationTime</span><span class="token punctuation">(</span>rotateTimeParse<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 设置基础信息</span>
	log <span class="token operator">:=</span> <span class="token operator">&amp;</span>RotateLogService<span class="token punctuation">{</span><span class="token punctuation">}</span>
	log<span class="token punctuation">.</span><span class="token function">SetLevel</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">SetCtxFielder</span><span class="token punctuation">(</span>ctxFielder<span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">SetFormatter</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>
	log<span class="token punctuation">.</span>folder <span class="token operator">=</span> folder
	log<span class="token punctuation">.</span>file <span class="token operator">=</span> file

	w<span class="token punctuation">,</span> err <span class="token operator">:=</span> rotatelogs<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s.%s&quot;</span><span class="token punctuation">,</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>folder<span class="token punctuation">,</span> log<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> dateFormat<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">Wrap</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&quot;new rotatelogs error&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	log<span class="token punctuation">.</span><span class="token function">SetOutput</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>
	log<span class="token punctuation">.</span>c <span class="token operator">=</span> c
	<span class="token keyword">return</span> log<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里省略 <code>services</code> 文件夹里的 <code>console.go</code>、<code>single.go</code>、<code>custom.go</code>；以及 <code>formatter</code> 里的 <code>json.go</code>、<code>text.go</code>、<code>prefix.go</code>。</p><h4 id="全链路服务" tabindex="-1"><a class="header-anchor" href="#全链路服务"><span>全链路服务</span></a></h4><p>服务定义：<code>framework/contract/trace.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> TraceKey <span class="token operator">=</span> <span class="token string">&quot;gob:trace&quot;</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
	TraceKeyTraceID  <span class="token operator">=</span> <span class="token string">&quot;trace_id&quot;</span>
	TraceKeySpanID   <span class="token operator">=</span> <span class="token string">&quot;span_id&quot;</span>
	TraceKeyCspanID  <span class="token operator">=</span> <span class="token string">&quot;cspan_id&quot;</span>
	TraceKeyParentID <span class="token operator">=</span> <span class="token string">&quot;parent_id&quot;</span>
	TraceKeyMethod   <span class="token operator">=</span> <span class="token string">&quot;method&quot;</span>
	TraceKeyCaller   <span class="token operator">=</span> <span class="token string">&quot;caller&quot;</span>
	TraceKeyTime     <span class="token operator">=</span> <span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// Trace define struct according Google Dapper</span>
<span class="token keyword">type</span> TraceContext <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	TraceID  <span class="token builtin">string</span> <span class="token comment">// traceID global unique</span>
	ParentID <span class="token builtin">string</span> <span class="token comment">// 父节点SpanID</span>
	SpanID   <span class="token builtin">string</span> <span class="token comment">// 当前节点SpanID</span>
	CspanID  <span class="token builtin">string</span> <span class="token comment">// 子节点调用的SpanID, 由调用方指定</span>

	Annotation <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">// 标记各种信息</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> Trace <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// WithTrace register new trace to context</span>
	<span class="token function">WithTrace</span><span class="token punctuation">(</span>c context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> trace <span class="token operator">*</span>TraceContext<span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context
	<span class="token comment">// GetTrace From trace context</span>
	<span class="token function">GetTrace</span><span class="token punctuation">(</span>c context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">*</span>TraceContext
	<span class="token comment">// NewTrace generate a new trace</span>
	<span class="token function">NewTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>TraceContext
	<span class="token comment">// StartSpan generate cspan for child call</span>
	<span class="token function">StartSpan</span><span class="token punctuation">(</span>trace <span class="token operator">*</span>TraceContext<span class="token punctuation">)</span> <span class="token operator">*</span>TraceContext
	<span class="token comment">// ToMap traceContext to map for logger</span>
	<span class="token function">ToMap</span><span class="token punctuation">(</span>trace <span class="token operator">*</span>TraceContext<span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	<span class="token comment">// ExtractHTTP GetTrace By Http</span>
	<span class="token function">ExtractHTTP</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token operator">*</span>TraceContext
	<span class="token comment">// InjectHTTP Set Trace to Http</span>
	<span class="token function">InjectHTTP</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> trace <span class="token operator">*</span>TraceContext<span class="token punctuation">)</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务提供，<code>framework/provider/trace/provider.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// TraceProvider 服务提供者具体实现方法</span>
<span class="token keyword">type</span> TraceProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	c framework<span class="token punctuation">.</span>Container
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> framework<span class="token punctuation">.</span>ServiceProvider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>TraceProvider<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token comment">// Register 注册方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>TraceProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> framework<span class="token punctuation">.</span>NewInstance <span class="token punctuation">{</span>
	<span class="token keyword">return</span> NewTraceService
<span class="token punctuation">}</span>
<span class="token comment">// Boot 启动调用</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>TraceProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	provider<span class="token punctuation">.</span>c <span class="token operator">=</span> container
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token comment">// IsDefer 是否延迟初始化</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>TraceProvider<span class="token punctuation">)</span> <span class="token function">IsDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token comment">// Params 获取初始化参数</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>TraceProvider<span class="token punctuation">)</span> <span class="token function">Params</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>provider<span class="token punctuation">.</span>c<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Name 获取字符串凭证</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>TraceProvider<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> contract<span class="token punctuation">.</span>TraceKey
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务实现，<code>framework/provider/trace/service.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> TraceKey <span class="token builtin">string</span>
<span class="token keyword">var</span> ContextKey <span class="token operator">=</span> <span class="token function">TraceKey</span><span class="token punctuation">(</span><span class="token string">&quot;trace-key&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// TraceService 是 TraceService 的具体实现</span>
<span class="token keyword">type</span> TraceService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	idService        contract<span class="token punctuation">.</span>ID
	traceIDGenerator contract<span class="token punctuation">.</span>ID
	spanIDGenerator  contract<span class="token punctuation">.</span>ID
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> contract<span class="token punctuation">.</span>Trace <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>TraceService<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">NewTraceService</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span>
	idService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>IDKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>TraceService<span class="token punctuation">{</span>idService<span class="token punctuation">:</span> idService<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token comment">// WithTrace register new trace to context</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>TraceService<span class="token punctuation">)</span> <span class="token function">WithTrace</span><span class="token punctuation">(</span>c context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> trace <span class="token operator">*</span>contract<span class="token punctuation">.</span>TraceContext<span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context <span class="token punctuation">{</span>
	<span class="token keyword">if</span> ginC<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		ginC<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>ContextKey<span class="token punctuation">)</span><span class="token punctuation">,</span> trace<span class="token punctuation">)</span>
		<span class="token keyword">return</span> ginC
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		newC <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> ContextKey<span class="token punctuation">,</span> trace<span class="token punctuation">)</span>
		<span class="token keyword">return</span> newC
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// GetTrace From trace context</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>TraceService<span class="token punctuation">)</span> <span class="token function">GetTrace</span><span class="token punctuation">(</span>c context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">*</span>contract<span class="token punctuation">.</span>TraceContext <span class="token punctuation">{</span>
	<span class="token keyword">if</span> ginC<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">if</span> val<span class="token punctuation">,</span> ok2 <span class="token operator">:=</span> ginC<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>ContextKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok2 <span class="token punctuation">{</span>
			<span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>contract<span class="token punctuation">.</span>TraceContext<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> tc<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>ContextKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>contract<span class="token punctuation">.</span>TraceContext<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> tc
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token comment">// NewTrace generate a new trace</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>TraceService<span class="token punctuation">)</span> <span class="token function">NewTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>contract<span class="token punctuation">.</span>TraceContext <span class="token punctuation">{</span>
	<span class="token keyword">var</span> traceID<span class="token punctuation">,</span> spanID <span class="token builtin">string</span>
	<span class="token keyword">if</span> t<span class="token punctuation">.</span>traceIDGenerator <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		traceID <span class="token operator">=</span> t<span class="token punctuation">.</span>traceIDGenerator<span class="token punctuation">.</span><span class="token function">NewID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		traceID <span class="token operator">=</span> t<span class="token punctuation">.</span>idService<span class="token punctuation">.</span><span class="token function">NewID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> t<span class="token punctuation">.</span>spanIDGenerator <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		spanID <span class="token operator">=</span> t<span class="token punctuation">.</span>spanIDGenerator<span class="token punctuation">.</span><span class="token function">NewID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		spanID <span class="token operator">=</span> t<span class="token punctuation">.</span>idService<span class="token punctuation">.</span><span class="token function">NewID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	tc <span class="token operator">:=</span> <span class="token operator">&amp;</span>contract<span class="token punctuation">.</span>TraceContext<span class="token punctuation">{</span>
		TraceID<span class="token punctuation">:</span>    traceID<span class="token punctuation">,</span>
		ParentID<span class="token punctuation">:</span>   <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
		SpanID<span class="token punctuation">:</span>     spanID<span class="token punctuation">,</span>
		CspanID<span class="token punctuation">:</span>    <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
		Annotation<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> tc
<span class="token punctuation">}</span>
<span class="token comment">// ChildSpan instance a sub trace with new span id</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>TraceService<span class="token punctuation">)</span> <span class="token function">StartSpan</span><span class="token punctuation">(</span>tc <span class="token operator">*</span>contract<span class="token punctuation">.</span>TraceContext<span class="token punctuation">)</span> <span class="token operator">*</span>contract<span class="token punctuation">.</span>TraceContext <span class="token punctuation">{</span>
	<span class="token keyword">var</span> childSpanID <span class="token builtin">string</span>
	<span class="token keyword">if</span> t<span class="token punctuation">.</span>spanIDGenerator <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		childSpanID <span class="token operator">=</span> t<span class="token punctuation">.</span>spanIDGenerator<span class="token punctuation">.</span><span class="token function">NewID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		childSpanID <span class="token operator">=</span> t<span class="token punctuation">.</span>idService<span class="token punctuation">.</span><span class="token function">NewID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	childSpan <span class="token operator">:=</span> <span class="token operator">&amp;</span>contract<span class="token punctuation">.</span>TraceContext<span class="token punctuation">{</span>
		TraceID<span class="token punctuation">:</span>  tc<span class="token punctuation">.</span>TraceID<span class="token punctuation">,</span>
		ParentID<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
		SpanID<span class="token punctuation">:</span>   tc<span class="token punctuation">.</span>SpanID<span class="token punctuation">,</span>
		CspanID<span class="token punctuation">:</span>  childSpanID<span class="token punctuation">,</span>
		Annotation<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
			contract<span class="token punctuation">.</span>TraceKeyTime<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> childSpan
<span class="token punctuation">}</span>
<span class="token comment">// GetTrace By Http</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>TraceService<span class="token punctuation">)</span> <span class="token function">ExtractHTTP</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token operator">*</span>contract<span class="token punctuation">.</span>TraceContext <span class="token punctuation">{</span>
	tc <span class="token operator">:=</span> <span class="token operator">&amp;</span>contract<span class="token punctuation">.</span>TraceContext<span class="token punctuation">{</span><span class="token punctuation">}</span>
	tc<span class="token punctuation">.</span>TraceID <span class="token operator">=</span> req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>TraceKeyTraceID<span class="token punctuation">)</span>
	tc<span class="token punctuation">.</span>ParentID <span class="token operator">=</span> req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>TraceKeySpanID<span class="token punctuation">)</span>
	tc<span class="token punctuation">.</span>SpanID <span class="token operator">=</span> req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>TraceKeyCspanID<span class="token punctuation">)</span>
	tc<span class="token punctuation">.</span>CspanID <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>

	<span class="token keyword">if</span> tc<span class="token punctuation">.</span>TraceID <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		tc<span class="token punctuation">.</span>TraceID <span class="token operator">=</span> t<span class="token punctuation">.</span>idService<span class="token punctuation">.</span><span class="token function">NewID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> tc<span class="token punctuation">.</span>SpanID <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		tc<span class="token punctuation">.</span>SpanID <span class="token operator">=</span> t<span class="token punctuation">.</span>idService<span class="token punctuation">.</span><span class="token function">NewID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> tc
<span class="token punctuation">}</span>
<span class="token comment">// Set Trace to Http</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>TraceService<span class="token punctuation">)</span> <span class="token function">InjectHTTP</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> tc <span class="token operator">*</span>contract<span class="token punctuation">.</span>TraceContext<span class="token punctuation">)</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request <span class="token punctuation">{</span>
	req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>TraceKeyTraceID<span class="token punctuation">,</span> tc<span class="token punctuation">.</span>TraceID<span class="token punctuation">)</span>
	req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>TraceKeySpanID<span class="token punctuation">,</span> tc<span class="token punctuation">.</span>SpanID<span class="token punctuation">)</span>
	req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>TraceKeyCspanID<span class="token punctuation">,</span> tc<span class="token punctuation">.</span>CspanID<span class="token punctuation">)</span>
	req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>TraceKeyParentID<span class="token punctuation">,</span> tc<span class="token punctuation">.</span>ParentID<span class="token punctuation">)</span>
	<span class="token keyword">return</span> req
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>TraceService<span class="token punctuation">)</span> <span class="token function">ToMap</span><span class="token punctuation">(</span>tc <span class="token operator">*</span>contract<span class="token punctuation">.</span>TraceContext<span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">if</span> tc <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> m
	<span class="token punctuation">}</span>
	m<span class="token punctuation">[</span>contract<span class="token punctuation">.</span>TraceKeyTraceID<span class="token punctuation">]</span> <span class="token operator">=</span> tc<span class="token punctuation">.</span>TraceID
	m<span class="token punctuation">[</span>contract<span class="token punctuation">.</span>TraceKeySpanID<span class="token punctuation">]</span> <span class="token operator">=</span> tc<span class="token punctuation">.</span>SpanID
	m<span class="token punctuation">[</span>contract<span class="token punctuation">.</span>TraceKeyCspanID<span class="token punctuation">]</span> <span class="token operator">=</span> tc<span class="token punctuation">.</span>CspanID
	m<span class="token punctuation">[</span>contract<span class="token punctuation">.</span>TraceKeyParentID<span class="token punctuation">]</span> <span class="token operator">=</span> tc<span class="token punctuation">.</span>ParentID
	
	<span class="token keyword">if</span> tc<span class="token punctuation">.</span>Annotation <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> tc<span class="token punctuation">.</span>Annotation <span class="token punctuation">{</span>
			m<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> m
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="id-服务" tabindex="-1"><a class="header-anchor" href="#id-服务"><span>ID 服务</span></a></h4><p>服务定义：<code>framework/contract/id.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> IDKey <span class="token operator">=</span> <span class="token string">&quot;gob:id&quot;</span>
<span class="token keyword">type</span> ID <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">NewID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务提供，<code>framework/provider/id/provider.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// IDProvider 服务提供者具体实现方法</span>
<span class="token keyword">type</span> IDProvider <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> framework<span class="token punctuation">.</span>ServiceProvider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>IDProvider<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token comment">// Register 注册方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>IDProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> framework<span class="token punctuation">.</span>NewInstance <span class="token punctuation">{</span>
	<span class="token keyword">return</span> NewIDService
<span class="token punctuation">}</span>
<span class="token comment">// Boot 启动调用</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>IDProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token comment">// IsDefer 是否延迟初始化</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>IDProvider<span class="token punctuation">)</span> <span class="token function">IsDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token comment">// Params 获取初始化参数</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>IDProvider<span class="token punctuation">)</span> <span class="token function">Params</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Name 获取字符串凭证</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>IDProvider<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> contract<span class="token punctuation">.</span>IDKey
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务实现，<code>framework/provider/id/service.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/chenbihao/gob/framework/contract&quot;</span>
	<span class="token string">&quot;github.com/rs/xid&quot;</span> <span class="token comment">// 全局唯一标识符（GUID）</span>
<span class="token punctuation">)</span>
<span class="token comment">// IDService 是 IDService 的具体实现</span>
<span class="token keyword">type</span> IDService <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> contract<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>IDService<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">NewIDService</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>IDService<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>IDService<span class="token punctuation">)</span> <span class="token function">NewID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> xid<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="全链路中间件" tabindex="-1"><a class="header-anchor" href="#全链路中间件"><span>全链路中间件</span></a></h4><p><code>framework/middleware/trace.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Trace 机制，全链路ID</span>
<span class="token keyword">func</span> <span class="token function">Trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>
	<span class="token comment">// 使用函数回调</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		tracer <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>TraceKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Trace<span class="token punctuation">)</span>
		traceCtx <span class="token operator">:=</span> tracer<span class="token punctuation">.</span><span class="token function">ExtractHTTP</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>
		tracer<span class="token punctuation">.</span><span class="token function">WithTrace</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> traceCtx<span class="token punctuation">)</span>

		<span class="token comment">// 使用next执行具体的业务逻辑</span>
		c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册中间件，<code>app/http/route.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Routes 绑定业务层路由</span>
<span class="token keyword">func</span> <span class="token function">Routes</span><span class="token punctuation">(</span>r <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token comment">// 使用全链路追踪</span>
	r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>middleware<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	demo<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">// app/http/module/demo/*</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="绑定服务" tabindex="-1"><a class="header-anchor" href="#绑定服务"><span>绑定服务</span></a></h4><p><code>main.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 绑定 日志 服务提供者</span>
	container<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>log<span class="token punctuation">.</span>LogProvider<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// 绑定 全链路支持 服务提供者</span>
	container<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">.</span>IDProvider<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	container<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trace<span class="token punctuation">.</span>TraceProvider<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码验证-7" tabindex="-1"><a class="header-anchor" href="#代码验证-7"><span>代码验证</span></a></h3><p>配置文件，<code>config/dev/log.yaml</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>driver<span class="token punctuation">:</span> console
formatter<span class="token punctuation">:</span> text
level<span class="token punctuation">:</span> trace

#driver<span class="token punctuation">:</span> single
#level<span class="token punctuation">:</span> trace
#folder<span class="token punctuation">:</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>
#file<span class="token punctuation">:</span> gob_single<span class="token punctuation">.</span>log

#driver<span class="token punctuation">:</span> rotate      # 切割日志
#level<span class="token punctuation">:</span> trace        # 日志级别
#file<span class="token punctuation">:</span> gob<span class="token punctuation">.</span>log       # 保存的日志文件
#rotate_count<span class="token punctuation">:</span> <span class="token number">10</span>    # 最多日志文件个数
#rotate_size<span class="token punctuation">:</span> <span class="token number">120000</span> # 每个日志大小
#rotate_time<span class="token punctuation">:</span> <span class="token string">&quot;1m&quot;</span>   # 切割时间
#max_age<span class="token punctuation">:</span> <span class="token string">&quot;10d&quot;</span>      # 文件保存时间
#date_format<span class="token punctuation">:</span> <span class="token string">&quot;%Y-%m-%d-%H-%M&quot;</span> # 文件后缀格式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问任意请求，控制台输出：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token punctuation">[</span>Info<span class="token punctuation">]</span>	<span class="token number">2024</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>10T20<span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">08</span><span class="token punctuation">:</span><span class="token number">00</span>	<span class="token string">&quot;demo test logger&quot;</span>	<span class="token keyword">map</span><span class="token punctuation">[</span>api<span class="token punctuation">:</span>demo<span class="token operator">/</span>demo cspan_id<span class="token punctuation">:</span> parent_id<span class="token punctuation">:</span> password<span class="token punctuation">:</span><span class="token number">666</span> span_id<span class="token punctuation">:</span>cmf926hfq7kkqh35eno0 trace_id<span class="token punctuation">:</span>cmf926hfq7kkqh35enng<span class="token punctuation">]</span>
<span class="token punctuation">[</span>GIN<span class="token punctuation">]</span> <span class="token number">2024</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">/</span><span class="token number">10</span> <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token operator">|</span> <span class="token number">200</span> <span class="token operator">|</span>     <span class="token number">15</span><span class="token punctuation">.</span>4088ms <span class="token operator">|</span>             <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">1</span> <span class="token operator">|</span> GET      <span class="token string">&quot;/demo/demo&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其他日志模式也能正确存储日志文件。</p><h2 id="_18、一体化" tabindex="-1"><a class="header-anchor" href="#_18、一体化"><span>18、一体化</span></a></h2><p>前后端一体化的架构方案。</p><p>将 API 层往上提，使用 Golang 替代网关的逻辑，请求先访问前端编译的静态文件，不存在再访问动态接口。</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid" data-title="mermaid"><pre class="language-mermaid"><code><span class="token keyword">flowchart</span> TD

<span class="token keyword">subgraph</span> new
_Gateway <span class="token arrow operator">--&gt;</span> _HTML
<span class="token keyword">end</span>

<span class="token keyword">subgraph</span> old
Nginx <span class="token arrow operator">--&gt;</span> HTML
Nginx <span class="token arrow operator">--&gt;</span> API
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何实现-10" tabindex="-1"><a class="header-anchor" href="#如何实现-10"><span>如何实现</span></a></h3><p>创建一个 vue 项目，</p>`,47),wn={href:"https://github.com/gin-contrib/static",target:"_blank",rel:"noopener noreferrer"},hn=p(`<h3 id="代码实现-12" tabindex="-1"><a class="header-anchor" href="#代码实现-12"><span>代码实现</span></a></h3><h4 id="创建-vue3-项目" tabindex="-1"><a class="header-anchor" href="#创建-vue3-项目"><span>创建 vue3 项目</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装并执行create-vue</span>
<span class="token function">npm</span> create vue@latest

<span class="token comment"># 运行 \`npm run dev\` ；构建 \`npm run build\`；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="把请求路由到结果文件夹" tabindex="-1"><a class="header-anchor" href="#把请求路由到结果文件夹"><span>把请求路由到结果文件夹</span></a></h4><p>创建中间件 <code>framework/middleware/static/static.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>
<span class="token keyword">const</span> INDEX <span class="token operator">=</span> <span class="token string">&quot;index.html&quot;</span>

<span class="token keyword">type</span> ServeFileSystem <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span>FileSystem
	<span class="token function">Exists</span><span class="token punctuation">(</span>prefix <span class="token builtin">string</span><span class="token punctuation">,</span> path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> localFileSystem <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span>FileSystem
	root    <span class="token builtin">string</span>
	indexes <span class="token builtin">bool</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">LocalFile</span><span class="token punctuation">(</span>root <span class="token builtin">string</span><span class="token punctuation">,</span> indexes <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>localFileSystem <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>localFileSystem<span class="token punctuation">{</span>
		FileSystem<span class="token punctuation">:</span> gin<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> indexes<span class="token punctuation">)</span><span class="token punctuation">,</span>
		root<span class="token punctuation">:</span>       root<span class="token punctuation">,</span>
		indexes<span class="token punctuation">:</span>    indexes<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>localFileSystem<span class="token punctuation">)</span> <span class="token function">Exists</span><span class="token punctuation">(</span>prefix <span class="token builtin">string</span><span class="token punctuation">,</span> filepath <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> p <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">TrimPrefix</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		name <span class="token operator">:=</span> path<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>root<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
		stats<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> stats<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>l<span class="token punctuation">.</span>indexes <span class="token punctuation">{</span>
				index <span class="token operator">:=</span> path<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> INDEX<span class="token punctuation">)</span>
				<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> <span class="token boolean">false</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">ServeRoot</span><span class="token punctuation">(</span>urlPrefix<span class="token punctuation">,</span> root <span class="token builtin">string</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">Serve</span><span class="token punctuation">(</span>urlPrefix<span class="token punctuation">,</span> <span class="token function">LocalFile</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Static returns a middleware handler that serves static files in the given directory.</span>
<span class="token keyword">func</span> <span class="token function">Serve</span><span class="token punctuation">(</span>urlPrefix <span class="token builtin">string</span><span class="token punctuation">,</span> fs ServeFileSystem<span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>
	fileserver <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>
	<span class="token keyword">if</span> urlPrefix <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		fileserver <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span>urlPrefix<span class="token punctuation">,</span> fileserver<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> fs<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>urlPrefix<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			fileserver<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>
			c<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用中间件，<code>app/http/route.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Routes 绑定业务层路由</span>
<span class="token keyword">func</span> <span class="token function">Routes</span><span class="token punctuation">(</span>r <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token comment">// /路径先去./dist目录下查找文件是否存在，找到使用文件服务提供服务</span>
	r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>static<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> static<span class="token punctuation">.</span><span class="token function">LocalFile</span><span class="token punctuation">(</span><span class="token string">&quot;./gob_frontend/dist&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	
	demo<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">// 这个demo是业务App自定义的demo服务,位置在 \`app/http/module/demo/*\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译命令改造" tabindex="-1"><a class="header-anchor" href="#编译命令改造"><span>编译命令改造</span></a></h3><p>构建命令，<code>framework/command/build.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 前端文件夹</span>
<span class="token keyword">const</span> frontendFolder <span class="token operator">=</span> <span class="token string">&quot;./gob_frontend/&quot;</span>

<span class="token comment">// build相关的命令</span>
<span class="token keyword">func</span> <span class="token function">initBuildCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	buildCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>buildSelfCommand<span class="token punctuation">)</span>
	buildCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>buildBackendCommand<span class="token punctuation">)</span>
	buildCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>buildFrontendCommand<span class="token punctuation">)</span>
	buildCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>buildAllCommand<span class="token punctuation">)</span>
	<span class="token keyword">return</span> buildCommand
<span class="token punctuation">}</span>

<span class="token keyword">var</span> buildCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;编译相关命令&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> buildSelfCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;self&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;编译 gob 命令&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;=============  后端编译开始 ============&quot;</span><span class="token punctuation">)</span>
		path<span class="token punctuation">,</span> err <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">LookPath</span><span class="token punctuation">(</span><span class="token string">&quot;go&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;请安装 go 在你的 PATH 路径下&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-o&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">)</span>
		out<span class="token punctuation">,</span> err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">CombinedOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;=============  后端编译失败 ============&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;build success please run ./gob direct&quot;</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;=============  后端编译成功 ============&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> buildBackendCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;backend&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;使用 go 编译后端&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> buildSelfCommand<span class="token punctuation">.</span><span class="token function">RunE</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> buildFrontendCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;frontend&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;使用 npm 编译前端&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;=============  前端编译开始 ============&quot;</span><span class="token punctuation">)</span>
		<span class="token comment">// 获取path路径下的npm命令</span>
		path<span class="token punctuation">,</span> err <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">LookPath</span><span class="token punctuation">(</span><span class="token string">&quot;npm&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;请安装 npm 在你的 PATH 路径下&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 执行npm run build</span>
		cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;run&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">)</span>
		cmd<span class="token punctuation">.</span>Dir <span class="token operator">=</span> frontendFolder
		<span class="token comment">// 将输出保存在out中</span>
		out<span class="token punctuation">,</span> err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">CombinedOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;=============  前端编译失败 ============&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 打印输出</span>
		fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;=============  前端编译成功 ============&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> buildAllCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;同时编译前端和后端&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		err <span class="token operator">:=</span> buildFrontendCommand<span class="token punctuation">.</span><span class="token function">RunE</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		err <span class="token operator">=</span> buildBackendCommand<span class="token punctuation">.</span><span class="token function">RunE</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直通 go 命令（npm 一样），<code>framework/command/cmd_go.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// go just run local go bin</span>
<span class="token keyword">var</span> goCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;go&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;运行 path/go 程序，要求go 必须安装&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;=============  执行 go 命令 ============&quot;</span><span class="token punctuation">)</span>
		path<span class="token punctuation">,</span> err <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">LookPath</span><span class="token punctuation">(</span><span class="token string">&quot;go&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;gob go: should install go in your PATH&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span>
		cmd<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdout
		cmd<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> os<span class="token punctuation">.</span>Stderr
		cmd<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>挂载，<code>framework/command/kernel.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 挂载 build 命令  </span>
	root<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">initBuildCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// 挂载 go 命令</span>
	root<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>goCommand<span class="token punctuation">)</span>
	<span class="token comment">// 挂载 npm 命令</span>
	root<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>npmCommand<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码验证-8" tabindex="-1"><a class="header-anchor" href="#代码验证-8"><span>代码验证</span></a></h3><p>运行命令验证：<code>gob build self/backend/frontend/all</code>、<code>gob go mod tidy</code>、<code>gob npm run dev</code>...</p><h2 id="_19、20、提效-实现调试模式" tabindex="-1"><a class="header-anchor" href="#_19、20、提效-实现调试模式"><span>19、20、提效：实现调试模式</span></a></h2><p>调试模式：修改源码时自动重新编译运行。</p><p>前端用 vue 的话，已经自带调试模式了（ <code>npm run dev</code>），后端要自己实现调试模式。</p><h3 id="如何实现-11" tabindex="-1"><a class="header-anchor" href="#如何实现-11"><span>如何实现</span></a></h3><p>上一节的前后端一体化的架构方案中，是将 API 层往上提。</p><p>使用 Golang 替代网关的逻辑，先转发到编译文件夹 <code>dist</code> 中。</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid" data-title="mermaid"><pre class="language-mermaid"><code><span class="token keyword">flowchart</span> TD

<span class="token keyword">subgraph</span> new
_Gateway <span class="token arrow operator">--&gt;</span> _HTML
<span class="token keyword">end</span>

<span class="token keyword">subgraph</span> old
Nginx <span class="token arrow operator">--&gt;</span> HTML
Nginx <span class="token arrow operator">--&gt;</span> API
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是前端启动调试模式并不生成编译后的文件，所以上节课的转发功能也用不上了。</p><p>所以这节设计一个反向代理 proxy 服务，由反代服务对请求进行分发，先转发到后端。</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid" data-title="mermaid"><pre class="language-mermaid"><code><span class="token keyword">flowchart</span> TD

<span class="token keyword">subgraph</span> 反代
proxy <span class="token arrow operator">--&gt;</span> 前端服务
proxy <span class="token arrow operator">--&gt;</span> 后端服务
<span class="token keyword">end</span>
<span class="token keyword">subgraph</span> 代码
前端代码 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">监听更新</span> <span class="token arrow operator">--&gt;</span></span>前端服务
后端代码 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">监听更新</span> <span class="token arrow operator">--&gt;</span></span>后端服务
<span class="token keyword">end</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Golang 中的 <code>net/http/httputil</code> 包中提供了 <code>ReverseProxy</code> 可以实现反代功能：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 反向代理</span>
<span class="token keyword">type</span> ReverseProxy <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// Director这个函数传入的参数是新复制的一个请求，我们可以修改这个请求</span>
    <span class="token comment">// 比如修改请求的请求Host或者请求URL等</span>
	Director <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>

	<span class="token comment">// Transport 代表底层的连接池设置，比如连接最长保持多久等</span>
    <span class="token comment">// 如果不填的话，则使用默认的设置</span>
	Transport http<span class="token punctuation">.</span>RoundTripper

	<span class="token comment">// FlushInterval表示多久将下游的response的数据拷贝到proxy的response</span>
	FlushInterval time<span class="token punctuation">.</span>Duration

	<span class="token comment">// ErrorLog 表示错误日志打印的句柄</span>
	ErrorLog <span class="token operator">*</span>log<span class="token punctuation">.</span>Logger

	<span class="token comment">// BufferPool表示将下游response拷贝到proxy的response的时候使用的缓冲池大小</span>
	BufferPool BufferPool

	<span class="token comment">// ModifyResponse 函数表示，如果要将下游的response内容进行修改，再传递给proxy</span>
    <span class="token comment">// 的response，这个函数就可以进行设置，但是如果这个函数返回了error，则将response</span>
    <span class="token comment">// 传递进入ErrorHandler，否则使用默认设置</span>
	ModifyResponse <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>http<span class="token punctuation">.</span>Response<span class="token punctuation">)</span> <span class="token builtin">error</span>

	<span class="token comment">// ErrorHandler 处理ModifyResponse返回的Error</span>
	ErrorHandler <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Director 的参数是请求，表示如何对请求进行转发。</li><li>ModifyResponse 字段可以对下游的返回数据进行修改。</li><li>ErrorHandler 字段函数可以处理 ModifyResponse 字段返回的错误。</li></ul><p>需要做到：</p><ul><li>dev 命令</li><li>proxy 实现</li><li>配置项</li><li>监听与编译重启</li></ul><h3 id="代码实现-13" tabindex="-1"><a class="header-anchor" href="#代码实现-13"><span>代码实现</span></a></h3><p><code>framework/command/dev.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 初始化Dev命令</span>
<span class="token keyword">func</span> <span class="token function">initDevCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	devCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>devBackendCommand<span class="token punctuation">)</span>
	devCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>devFrontendCommand<span class="token punctuation">)</span>
	devCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>devAllCommand<span class="token punctuation">)</span>
	<span class="token keyword">return</span> devCommand
<span class="token punctuation">}</span>
<span class="token comment">// devCommand 为调试模式的一级命令</span>
<span class="token keyword">var</span> devCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;dev&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;调试模式&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// devBackendCommand 启动后端调试模式</span>
<span class="token keyword">var</span> devBackendCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;backend&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;启动后端调试模式&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		proxy <span class="token operator">:=</span> <span class="token function">NewProxy</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> proxy<span class="token punctuation">.</span><span class="token function">monitorBackend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> proxy<span class="token punctuation">.</span><span class="token function">startProxy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// devFrontendCommand 启动前端调试模式</span>
<span class="token keyword">var</span> devFrontendCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;frontend&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;启动前端调试模式&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token comment">// 启动前端服务</span>
		proxy <span class="token operator">:=</span> <span class="token function">NewProxy</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">startProxy</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> devAllCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;同时启动前端和后端调试&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		proxy <span class="token operator">:=</span> <span class="token function">NewProxy</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> proxy<span class="token punctuation">.</span><span class="token function">monitorBackend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> proxy<span class="token punctuation">.</span><span class="token function">startProxy</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// =========================================</span>

<span class="token comment">// devConfig 代表调试模式的配置信息</span>
<span class="token keyword">type</span> devConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Port    <span class="token builtin">string</span>   <span class="token comment">// 调试模式最终监听的端口，默认为 8070</span>
	Backend <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token comment">// 后端调试模式配置</span>
		RefreshTime   <span class="token builtin">int</span>    <span class="token comment">// 调试模式后端更新时间, 默认1s</span>
		Port          <span class="token builtin">string</span> <span class="token comment">// 后端监听端口， 默认 8072</span>
		MonitorFolder <span class="token builtin">string</span> <span class="token comment">// 监听文件夹，默认为AppFolder</span>
	<span class="token punctuation">}</span>
	Frontend <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token comment">// 前端调试模式配置</span>
		Port <span class="token builtin">string</span> <span class="token comment">// 前端启动端口, 默认 8071</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 初始化配置文件</span>
<span class="token keyword">func</span> <span class="token function">initDevConfig</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token operator">*</span>devConfig <span class="token punctuation">{</span>
	<span class="token comment">// 设置默认值</span>
	config <span class="token operator">:=</span> <span class="token operator">&amp;</span>devConfig<span class="token punctuation">{</span>
		Port<span class="token punctuation">:</span> <span class="token string">&quot;8070&quot;</span><span class="token punctuation">,</span>
		Backend<span class="token punctuation">:</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
			RefreshTime   <span class="token builtin">int</span>
			Port          <span class="token builtin">string</span>
			MonitorFolder <span class="token builtin">string</span>
		<span class="token punctuation">}</span><span class="token punctuation">{</span>
			<span class="token number">1</span><span class="token punctuation">,</span>
			<span class="token string">&quot;8072&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		Frontend<span class="token punctuation">:</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
			Port <span class="token builtin">string</span>
		<span class="token punctuation">}</span><span class="token punctuation">{</span>
			<span class="token string">&quot;8071&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 容器中获取配置服务</span>
	configService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
	<span class="token comment">// 每个配置项进行检查</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;app.dev.port&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		config<span class="token punctuation">.</span>Port <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;app.dev.port&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;app.dev.backend.refresh_time&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		config<span class="token punctuation">.</span>Backend<span class="token punctuation">.</span>RefreshTime <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">&quot;app.dev.backend.refresh_time&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;app.dev.backend.port&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		config<span class="token punctuation">.</span>Backend<span class="token punctuation">.</span>Port <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;app.dev.backend.port&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// monitorFolder 默认使用目录服务的 AppFolder()</span>
	monitorFolder <span class="token operator">:=</span> configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;app.dev.backend.monitor_folder&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> monitorFolder <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		appService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>
		config<span class="token punctuation">.</span>Backend<span class="token punctuation">.</span>MonitorFolder <span class="token operator">=</span> appService<span class="token punctuation">.</span><span class="token function">AppFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;app.dev.frontend.port&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		config<span class="token punctuation">.</span>Frontend<span class="token punctuation">.</span>Port <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;app.dev.frontend.port&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> config
<span class="token punctuation">}</span>

<span class="token comment">// Proxy 代表serve启动的服务器代理</span>
<span class="token keyword">type</span> Proxy <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	devConfig   <span class="token operator">*</span>devConfig <span class="token comment">// 配置文件</span>
	backendPid  <span class="token builtin">int</span>        <span class="token comment">// 当前的 backend 服务的 pid</span>
	frontendPid <span class="token builtin">int</span>        <span class="token comment">// 当前的 frontend 服务的 pid</span>
<span class="token punctuation">}</span>

<span class="token comment">// NewProxy 初始化一个Proxy</span>
<span class="token keyword">func</span> <span class="token function">NewProxy</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token operator">*</span>Proxy <span class="token punctuation">{</span>
	config <span class="token operator">:=</span> <span class="token function">initDevConfig</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Proxy<span class="token punctuation">{</span>
		devConfig<span class="token punctuation">:</span> config<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 重新启动一个proxy网关</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Proxy<span class="token punctuation">)</span> <span class="token function">newProxyReverseProxy</span><span class="token punctuation">(</span>frontend<span class="token punctuation">,</span> backend <span class="token operator">*</span>url<span class="token punctuation">.</span>URL<span class="token punctuation">)</span> <span class="token operator">*</span>httputil<span class="token punctuation">.</span>ReverseProxy <span class="token punctuation">{</span>
	<span class="token keyword">if</span> p<span class="token punctuation">.</span>frontendPid <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>backendPid <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;前端和后端服务都不存在&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 后端服务存在</span>
	<span class="token keyword">if</span> p<span class="token punctuation">.</span>frontendPid <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>backendPid <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> httputil<span class="token punctuation">.</span><span class="token function">NewSingleHostReverseProxy</span><span class="token punctuation">(</span>backend<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 前端服务存在</span>
	<span class="token keyword">if</span> p<span class="token punctuation">.</span>backendPid <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>frontendPid <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> httputil<span class="token punctuation">.</span><span class="token function">NewSingleHostReverseProxy</span><span class="token punctuation">(</span>frontend<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 两个都有进程</span>
	<span class="token comment">// 先创建一个后端服务的 directory</span>
	director <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path <span class="token operator">==</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path <span class="token operator">==</span> <span class="token string">&quot;/app.js&quot;</span> <span class="token punctuation">{</span>
			req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Scheme <span class="token operator">=</span> frontend<span class="token punctuation">.</span>Scheme
			req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Host <span class="token operator">=</span> frontend<span class="token punctuation">.</span>Host
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Scheme <span class="token operator">=</span> backend<span class="token punctuation">.</span>Scheme
			req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Host <span class="token operator">=</span> backend<span class="token punctuation">.</span>Host
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 定义一个 NotFoundErr</span>
	NotFoundErr <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;response is 404, need to redirect&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>httputil<span class="token punctuation">.</span>ReverseProxy<span class="token punctuation">{</span>
		Director<span class="token punctuation">:</span> director<span class="token punctuation">,</span> <span class="token comment">// 先转发到后端服务</span>
		ModifyResponse<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>response <span class="token operator">*</span>http<span class="token punctuation">.</span>Response<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果后端服务返回了404，我们返回 NotFoundErr 会进入到 errorHandler 中</span>
			<span class="token keyword">if</span> response<span class="token punctuation">.</span>StatusCode <span class="token operator">==</span> <span class="token number">404</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> NotFoundErr
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		ErrorHandler<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>writer http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 判断 Error 是否为NotFoundError, 是的话则进行前端服务的转发，重新修改writer</span>
			<span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> NotFoundErr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				httputil<span class="token punctuation">.</span><span class="token function">NewSingleHostReverseProxy</span><span class="token punctuation">(</span>frontend<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> request<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 启动proxy服务，并且根据参数启动前端服务或者后端服务</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Proxy<span class="token punctuation">)</span> <span class="token function">startProxy</span><span class="token punctuation">(</span>startFrontend<span class="token punctuation">,</span> startBackend <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> backendURL<span class="token punctuation">,</span> frontendURL <span class="token operator">*</span>url<span class="token punctuation">.</span>URL
	<span class="token comment">// 启动后端</span>
	<span class="token keyword">if</span> startBackend <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">firstBuildBackend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;第一次编译失败：&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">restartBackend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 启动前端</span>
	<span class="token keyword">if</span> startFrontend <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">restartFrontend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> frontendURL<span class="token punctuation">,</span> err <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://127.0.0.1:&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>devConfig<span class="token punctuation">.</span>Frontend<span class="token punctuation">.</span>Port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> backendURL<span class="token punctuation">,</span> err <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://127.0.0.1:&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>devConfig<span class="token punctuation">.</span>Backend<span class="token punctuation">.</span>Port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 设置反向代理</span>
	proxyReverse <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">newProxyReverseProxy</span><span class="token punctuation">(</span>frontendURL<span class="token punctuation">,</span> backendURL<span class="token punctuation">)</span>
	proxyServer <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>
		Addr<span class="token punctuation">:</span>    <span class="token string">&quot;127.0.0.1:&quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>devConfig<span class="token punctuation">.</span>Port<span class="token punctuation">,</span>
		Handler<span class="token punctuation">:</span> proxyReverse<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;代理服务启动:&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://&quot;</span><span class="token operator">+</span>proxyServer<span class="token punctuation">.</span>Addr<span class="token punctuation">)</span>
	<span class="token comment">// 启动proxy服务</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> proxyServer<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// rebuildBackend 重新编译后端</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Proxy<span class="token punctuation">)</span> <span class="token function">rebuildBackend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// 重新编译</span>
	cmdBuild <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">&quot;./gob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;backend&quot;</span><span class="token punctuation">)</span>
	cmdBuild<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdout
	cmdBuild<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> os<span class="token punctuation">.</span>Stderr
	<span class="token keyword">if</span> err <span class="token operator">:=</span> cmdBuild<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		err <span class="token operator">=</span> cmdBuild<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// firstBuildBackend 第一次编译后端</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Proxy<span class="token punctuation">)</span> <span class="token function">firstBuildBackend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// 重新编译</span>
	cmdBuild <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">&quot;go&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;run&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;backend&quot;</span><span class="token punctuation">)</span>
	cmdBuild<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdout
	cmdBuild<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> os<span class="token punctuation">.</span>Stderr
	<span class="token keyword">if</span> err <span class="token operator">:=</span> cmdBuild<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">=</span> cmdBuild<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// restartBackend 启动后端服务</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Proxy<span class="token punctuation">)</span> <span class="token function">restartBackend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// 杀死之前的进程</span>
	<span class="token keyword">if</span> p<span class="token punctuation">.</span>backendPid <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		util<span class="token punctuation">.</span><span class="token function">KillProcess</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>backendPid<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGKILL<span class="token punctuation">)</span>
		p<span class="token punctuation">.</span>backendPid <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 设置随机端口，真实后端的端口</span>
	port <span class="token operator">:=</span> p<span class="token punctuation">.</span>devConfig<span class="token punctuation">.</span>Backend<span class="token punctuation">.</span>Port
	gobAddress <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> port<span class="token punctuation">)</span>
	<span class="token comment">// 使用命令行启动后端进程</span>
	cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">&quot;./gob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--address=&quot;</span><span class="token operator">+</span>gobAddress<span class="token punctuation">)</span>
	<span class="token comment">//cmd := exec.Command(&quot;go&quot;, &quot;run&quot;, &quot;.&quot;, &quot;app&quot;, &quot;start&quot;, &quot;--address=&quot;+gobAddress)</span>
	cmd<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdout
	cmd<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> os<span class="token punctuation">.</span>Stderr

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;启动后端服务: &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://127.0.0.1:&quot;</span><span class="token operator">+</span>port<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	p<span class="token punctuation">.</span>backendPid <span class="token operator">=</span> cmd<span class="token punctuation">.</span>Process<span class="token punctuation">.</span>Pid
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;后端服务pid:&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>backendPid<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 启动前端服务</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Proxy<span class="token punctuation">)</span> <span class="token function">restartFrontend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// 杀死之前的进程</span>
	<span class="token keyword">if</span> p<span class="token punctuation">.</span>frontendPid <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		util<span class="token punctuation">.</span><span class="token function">KillProcess</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>frontendPid<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGKILL<span class="token punctuation">)</span>
		p<span class="token punctuation">.</span>frontendPid <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 开启 npm run dev</span>
	port <span class="token operator">:=</span> p<span class="token punctuation">.</span>devConfig<span class="token punctuation">.</span>Frontend<span class="token punctuation">.</span>Port
	path<span class="token punctuation">,</span> err <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">LookPath</span><span class="token punctuation">(</span><span class="token string">&quot;npm&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// 把 port 参数传递进npm脚本里</span>
	cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;run&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dev&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--port&quot;</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span>
	cmd<span class="token punctuation">.</span>Dir <span class="token operator">=</span> frontendFolder
	cmd<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdout
	cmd<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> os<span class="token punctuation">.</span>Stderr

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;启动前端服务: &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://127.0.0.1:&quot;</span><span class="token operator">+</span>port<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	p<span class="token punctuation">.</span>frontendPid <span class="token operator">=</span> cmd<span class="token punctuation">.</span>Process<span class="token punctuation">.</span>Pid
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;前端服务pid:&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>frontendPid<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// monitorBackend 监听应用文件</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Proxy<span class="token punctuation">)</span> <span class="token function">monitorBackend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 监听</span>
	watcher<span class="token punctuation">,</span> err <span class="token operator">:=</span> fsnotify<span class="token punctuation">.</span><span class="token function">NewWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> watcher<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 开启监听目标文件夹</span>
	appFolder <span class="token operator">:=</span> p<span class="token punctuation">.</span>devConfig<span class="token punctuation">.</span>Backend<span class="token punctuation">.</span>MonitorFolder
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;监控文件夹：&quot;</span><span class="token punctuation">,</span> appFolder<span class="token punctuation">)</span>
	<span class="token comment">// 监听所有子目录，需要使用filepath.walk</span>
	filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span>appFolder<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info os<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> info <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>info<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果是隐藏的目录比如 . 或者 .. 则不用进行监控</span>
		<span class="token keyword">if</span> util<span class="token punctuation">.</span><span class="token function">IsHiddenDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> watcher<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token comment">// 开启计时时间机制</span>
	refreshTime <span class="token operator">:=</span> p<span class="token punctuation">.</span>devConfig<span class="token punctuation">.</span>Backend<span class="token punctuation">.</span>RefreshTime
	t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>refreshTime<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token comment">// 先停止计时器</span>
	t<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>t<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
			<span class="token comment">// 计时器时间到了，代表之前有文件更新事件重置过计时器</span>
			<span class="token comment">// 即有文件更新</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;...检测到文件更新，重启服务开始...&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">rebuildBackend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;重新编译失败：&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">restartBackend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;重新启动失败：&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;...检测到文件更新，重启服务结束...&quot;</span><span class="token punctuation">)</span>
			<span class="token comment">// 停止计时器</span>
			t<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>watcher<span class="token punctuation">.</span>Events<span class="token punctuation">:</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 有文件更新事件，重置计时器</span>
			t<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>refreshTime<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		<span class="token keyword">case</span> err<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>watcher<span class="token punctuation">.</span>Errors<span class="token punctuation">:</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;监听文件夹错误：&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			t<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>refreshTime<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加 app 启动 address 参数，<code>framework/command/app.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// initAppCommand 初始化app命令和其子命令</span>
<span class="token keyword">func</span> <span class="token function">initAppCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	<span class="token comment">// 设置启动地址</span>
	appStartCommand<span class="token punctuation">.</span><span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>appAddress<span class="token punctuation">,</span> <span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;app启动端口，默认为8080&quot;</span><span class="token punctuation">)</span>  
	appCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>appStartCommand<span class="token punctuation">)</span>
	<span class="token keyword">return</span> appCommand
<span class="token punctuation">}</span>
<span class="token operator">...</span>
<span class="token comment">// appStartCommand 启动一个Web服务</span>
<span class="token keyword">var</span> appStartCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	<span class="token operator">...</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		<span class="token comment">// 创建一个Server服务</span>
		server <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>
			Handler<span class="token punctuation">:</span> core<span class="token punctuation">,</span>
			Addr<span class="token punctuation">:</span>    appAddress<span class="token punctuation">,</span>     <span class="token comment">// &lt;------</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>app 服务添加获取 app 路径的方法：</p><p><code>framework/contract/app.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// AppFolder 定义业务代码所在的目录，用于监控文件变更使用</span>
	<span class="token function">AppFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>framework/provider/app/service.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// AppFolder 定义业务代码所在的目录，用于监控文件变更使用</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>AppService<span class="token punctuation">)</span> <span class="token function">AppFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> s<span class="token punctuation">.</span>configMap<span class="token punctuation">[</span><span class="token string">&quot;app_folder&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> val
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>挂载命令， <code>framework/command/kernel.go</code> 增加：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 挂载 dev 调试命令</span>
	root<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">initDevCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件,<code>config/dev/app.yaml</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">dev</span><span class="token punctuation">:</span> <span class="token comment"># 调试模式</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8070</span> <span class="token comment"># 调试模式最终监听的端口，默认为 8070</span>
  <span class="token key atrule">frontend</span><span class="token punctuation">:</span> <span class="token comment"># 前端调试模式配置</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8071</span> <span class="token comment"># 前端监听端口, 默认 8071</span>
  <span class="token key atrule">backend</span><span class="token punctuation">:</span> <span class="token comment"># 后端调试模式配置</span>
    <span class="token key atrule">refresh_time</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token comment"># 调试模式后端更新时间，如果文件变更，等待3s才进行一次更新，能让频繁保存变更更为顺畅, 默认1s</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8072</span> <span class="token comment"># 后端监听端口，默认 8072</span>
    <span class="token key atrule">monitor_folder</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span> <span class="token comment"># 监听文件夹地址，为空或者不填默认为 AppFolder</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码验证-9" tabindex="-1"><a class="header-anchor" href="#代码验证-9"><span>代码验证</span></a></h3><p>启动命令 <code>./gob dev all</code> ，修改后端代码时能自动构建启动，并且转发到前端服务。</p><h2 id="_21、22、自动化" tabindex="-1"><a class="header-anchor" href="#_21、22、自动化"><span>21、22、自动化</span></a></h2><ul><li>自动化创建服务工具</li><li>自动化创建命令行工具</li><li>自动化中间件迁移工具</li><li>初始化脚手架工具</li></ul><h3 id="如何实现-12" tabindex="-1"><a class="header-anchor" href="#如何实现-12"><span>如何实现</span></a></h3>`,51),qn={href:"https://pkg.go.dev/text/template",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://github.com/AlecAivazis/survey",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://github.com/charmbracelet/bubbletea",target:"_blank",rel:"noopener noreferrer"},Sn=p(`<h3 id="代码实现-14" tabindex="-1"><a class="header-anchor" href="#代码实现-14"><span>代码实现</span></a></h3><h4 id="自动化创建服务工具" tabindex="-1"><a class="header-anchor" href="#自动化创建服务工具"><span>自动化创建服务工具</span></a></h4><p><code>framework/command/provider.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 初始化provider相关服务</span>
<span class="token keyword">func</span> <span class="token function">initProviderCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	providerCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>providerListCommand<span class="token punctuation">)</span>
	providerCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>providerCreateCommand<span class="token punctuation">)</span>
	<span class="token keyword">return</span> providerCommand
<span class="token punctuation">}</span>
<span class="token comment">// 二级命令</span>
<span class="token keyword">var</span> providerCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;provider&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;服务提供相关命令&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// providerListCommand 列出容器内的所有服务</span>
<span class="token keyword">var</span> providerListCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;列出容器内的所有服务&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		gobContainer <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>framework<span class="token punctuation">.</span>GobContainer<span class="token punctuation">)</span>
		<span class="token comment">// 获取字符串凭证</span>
		list <span class="token operator">:=</span> gobContainer<span class="token punctuation">.</span><span class="token function">NameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 打印</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> line <span class="token operator">:=</span> <span class="token keyword">range</span> list <span class="token punctuation">{</span>
			<span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// providerCreateCommand 创建一个新的服务，包括服务提供者，服务接口协议，服务实例</span>
<span class="token keyword">var</span> providerCreateCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>     <span class="token string">&quot;new&quot;</span><span class="token punctuation">,</span>
	Aliases<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;create&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;init&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span>   <span class="token string">&quot;创建一个服务&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;创建一个服务&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">var</span> name <span class="token builtin">string</span>
		<span class="token keyword">var</span> folder <span class="token builtin">string</span>
		<span class="token punctuation">{</span>
			prompt <span class="token operator">:=</span> <span class="token operator">&amp;</span>survey<span class="token punctuation">.</span>Input<span class="token punctuation">{</span>
				Message<span class="token punctuation">:</span> <span class="token string">&quot;请输入服务名称(服务凭证)：&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> survey<span class="token punctuation">.</span><span class="token function">AskOne</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token punctuation">{</span>
			prompt <span class="token operator">:=</span> <span class="token operator">&amp;</span>survey<span class="token punctuation">.</span>Input<span class="token punctuation">{</span>
				Message<span class="token punctuation">:</span> <span class="token string">&quot;请输入服务所在目录名称(默认: 同服务名称):&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> survey<span class="token punctuation">.</span><span class="token function">AskOne</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>folder<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 检查服务是否存在</span>
		providers <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>framework<span class="token punctuation">.</span>GobContainer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		providerColl <span class="token operator">:=</span> util<span class="token punctuation">.</span>NewCollection<span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">(</span>providers<span class="token punctuation">)</span>
		<span class="token keyword">if</span> providerColl<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;服务名称已经存在&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> folder <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
			folder <span class="token operator">=</span> name
		<span class="token punctuation">}</span>

		app <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>

		pFolder <span class="token operator">:=</span> app<span class="token punctuation">.</span><span class="token function">ProviderFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		subFolders<span class="token punctuation">,</span> err <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">SubDir</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		subColl <span class="token operator">:=</span> util<span class="token punctuation">.</span>NewCollection<span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">(</span>subFolders<span class="token punctuation">)</span>
		<span class="token keyword">if</span> subColl<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;目录名称已经存在&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 开始创建文件</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">,</span> folder<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0700</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 创建title这个模版方法</span>
		funcs <span class="token operator">:=</span> template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">{</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> cases<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>language<span class="token punctuation">.</span>Und<span class="token punctuation">,</span> cases<span class="token punctuation">.</span>NoLower<span class="token punctuation">)</span><span class="token punctuation">.</span>String<span class="token punctuation">}</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//  创建contract.go</span>
			file <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">,</span> folder<span class="token punctuation">,</span> <span class="token string">&quot;contract.go&quot;</span><span class="token punctuation">)</span>
			f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">Cause</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// 使用contractTmp模版来初始化template，并且让这个模版支持title方法，即支持{{.|title}}</span>
			t <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;contract&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>funcs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>contractTmp<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token comment">// 将name传递进入到template中渲染，并且输出到contract.go 中</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">Cause</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// 创建provider.go</span>
			file <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">,</span> folder<span class="token punctuation">,</span> <span class="token string">&quot;provider.go&quot;</span><span class="token punctuation">)</span>
			f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			t <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;provider&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>funcs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>providerTmp<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//  创建service.go</span>
			file <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">,</span> folder<span class="token punctuation">,</span> <span class="token string">&quot;service.go&quot;</span><span class="token punctuation">)</span>
			f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			t <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;service&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>funcs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>serviceTmp<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;创建服务成功, 文件夹地址:&quot;</span><span class="token punctuation">,</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">,</span> folder<span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;请不要忘记挂载新创建的服务&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> contractTmp <span class="token operator">=</span> <span class="token string">\`package {{.}}

const {{.|title}}Key = &quot;{{.}}&quot;

type Service interface {
	// 请在这里定义你的方法
	Foo() string
}
\`</span>

<span class="token keyword">var</span> providerTmp <span class="token operator">=</span> <span class="token string">\`package {{.}}

import (
	&quot;github.com/chenbihao/gob/framework&quot;
)

type {{.|title}}Provider struct {
	c framework.Container
}
var _ framework.ServiceProvider = (*{{.|title}}Provider)(nil)

func (sp *{{.|title}}Provider) Name() string {
	return {{.|title}}Key
}

func (sp *{{.|title}}Provider) Register(c framework.Container) framework.NewInstance {
	return New{{.|title}}Service
}

func (sp *{{.|title}}Provider) IsDefer() bool {
	return false
}

func (sp *{{.|title}}Provider) Params(c framework.Container) []interface{} {
	return []interface{}{c}
}

func (sp *{{.|title}}Provider) Boot(c framework.Container) error {
	return nil
}

\`</span>

<span class="token keyword">var</span> serviceTmp <span class="token operator">=</span> <span class="token string">\`package {{.}}

import &quot;github.com/chenbihao/gob/framework&quot;

type {{.|title}}Service struct {
	container framework.Container
}

func New{{.|title}}Service(params ...interface{}) (interface{}, error) {
	container := params[0].(framework.Container)
	return &amp;{{.|title}}Service{container: container}, nil
}

func (s *{{.|title}}Service) Foo() string {
    return &quot;&quot;
}
\`</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自动化创建命令行工具" tabindex="-1"><a class="header-anchor" href="#自动化创建命令行工具"><span>自动化创建命令行工具</span></a></h4><p><code>framework/command/cmd.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 初始化command相关命令</span>
<span class="token keyword">func</span> <span class="token function">initCmdCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	cmdCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>cmdListCommand<span class="token punctuation">)</span>
	cmdCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>cmdCreateCommand<span class="token punctuation">)</span>
	<span class="token keyword">return</span> cmdCommand
<span class="token punctuation">}</span>
<span class="token comment">// 二级命令</span>
<span class="token keyword">var</span> cmdCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;command&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;控制台命令相关&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// cmdListCommand 列出所有的控制台命令</span>
<span class="token keyword">var</span> cmdListCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;列出所有控制台命令&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		cmds <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		ps <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cmd <span class="token operator">:=</span> <span class="token keyword">range</span> cmds <span class="token punctuation">{</span>
			line <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>cmd<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>Short<span class="token punctuation">}</span>
			ps <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span> line<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		util<span class="token punctuation">.</span><span class="token function">PrettyPrint</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// cmdCreateCommand 创建一个业务控制台命令</span>
<span class="token keyword">var</span> cmdCreateCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>     <span class="token string">&quot;new&quot;</span><span class="token punctuation">,</span>
	Aliases<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;create&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;init&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 设置别名为 create init</span>
	Short<span class="token punctuation">:</span>   <span class="token string">&quot;创建一个控制台命令&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;开始创建控制台命令...&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">var</span> name <span class="token builtin">string</span>
		<span class="token keyword">var</span> folder <span class="token builtin">string</span>
		<span class="token punctuation">{</span>
			prompt <span class="token operator">:=</span> <span class="token operator">&amp;</span>survey<span class="token punctuation">.</span>Input<span class="token punctuation">{</span>
				Message<span class="token punctuation">:</span> <span class="token string">&quot;请输入控制台命令名称:&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			err <span class="token operator">:=</span> survey<span class="token punctuation">.</span><span class="token function">AskOne</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token punctuation">{</span>
			prompt <span class="token operator">:=</span> <span class="token operator">&amp;</span>survey<span class="token punctuation">.</span>Input<span class="token punctuation">{</span>
				Message<span class="token punctuation">:</span> <span class="token string">&quot;请输入文件夹名称(默认: 同控制台命令):&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			err <span class="token operator">:=</span> survey<span class="token punctuation">.</span><span class="token function">AskOne</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>folder<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> folder <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
			folder <span class="token operator">=</span> name
		<span class="token punctuation">}</span>
		<span class="token comment">// 判断文件不存在</span>
		app <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>

		pFolder <span class="token operator">:=</span> app<span class="token punctuation">.</span><span class="token function">CommandFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		subFolders<span class="token punctuation">,</span> err <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">SubDir</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		subColl <span class="token operator">:=</span> util<span class="token punctuation">.</span>NewCollection<span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">(</span>subFolders<span class="token punctuation">)</span>
		<span class="token keyword">if</span> subColl<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;目录名称已经存在&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 开始创建文件</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">,</span> folder<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0700</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 创建title这个模版方法</span>
		funcs <span class="token operator">:=</span> template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">{</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> cases<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>language<span class="token punctuation">.</span>Und<span class="token punctuation">,</span> cases<span class="token punctuation">.</span>NoLower<span class="token punctuation">)</span><span class="token punctuation">.</span>String<span class="token punctuation">}</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//  创建name.go</span>
			file <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">,</span> folder<span class="token punctuation">,</span> name<span class="token operator">+</span><span class="token string">&quot;.go&quot;</span><span class="token punctuation">)</span>
			f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">Cause</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// 使用contractTmp模版来初始化template，并且让这个模版支持title方法，即支持{{.|title}}</span>
			t <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;cmd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>funcs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>cmdTmpl<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token comment">// 将name传递进入到template中渲染，并且输出到contract.go 中</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">Cause</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;创建新命令行工具成功，路径:&quot;</span><span class="token punctuation">,</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">,</span> folder<span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;请记得开发完成后将命令行工具挂载到 console/kernel.go&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 命令行工具模版</span>
<span class="token keyword">var</span> cmdTmpl <span class="token operator">=</span> <span class="token string">\`package {{.}}

import (
	&quot;fmt&quot;

	&quot;github.com/chenbihao/gob/framework/cobra&quot;
)

var {{.|title}}Command = &amp;cobra.Command{
	Use:   &quot;{{.}}&quot;,
	Short: &quot;{{.}}&quot;,
	RunE: func(c *cobra.Command, args []string) error {
        container := c.GetContainer()
		fmt.Println(container)
		return nil
	},
}

\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自动化中间件迁移工具" tabindex="-1"><a class="header-anchor" href="#自动化中间件迁移工具"><span>自动化中间件迁移工具</span></a></h4><p><code>framework/command/middleware.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 初始化中间件相关命令</span>
<span class="token keyword">func</span> <span class="token function">initMiddlewareCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	middlewareCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>middlewareAllCommand<span class="token punctuation">)</span>
	middlewareCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>middlewareMigrateCommand<span class="token punctuation">)</span>
	middlewareCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>middlewareCreateCommand<span class="token punctuation">)</span>
	<span class="token keyword">return</span> middlewareCommand
<span class="token punctuation">}</span>
<span class="token comment">// middlewareCommand 中间件二级命令</span>
<span class="token keyword">var</span> middlewareCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;middleware&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;中间件相关命令&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// middlewareAllCommand 显示所有安装的中间件</span>
<span class="token keyword">var</span> middlewareAllCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;显示所有中间件&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		appService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>

		middlewarePath <span class="token operator">:=</span> path<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>appService<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;middleware&quot;</span><span class="token punctuation">)</span>

		<span class="token comment">// 读取文件夹</span>
		files<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadDir</span><span class="token punctuation">(</span>middlewarePath<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> f <span class="token operator">:=</span> <span class="token keyword">range</span> files <span class="token punctuation">{</span>
			<span class="token keyword">if</span> f<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 从gin-contrib中迁移中间件</span>
<span class="token keyword">var</span> middlewareMigrateCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;migrate&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;迁移gin-contrib中间件, 迁移地址：https://github.com/gin-contrib/[middleware].git&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;迁移一个Gin中间件&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">var</span> repo <span class="token builtin">string</span>
		<span class="token punctuation">{</span>
			prompt <span class="token operator">:=</span> <span class="token operator">&amp;</span>survey<span class="token punctuation">.</span>Input<span class="token punctuation">{</span>
				Message<span class="token punctuation">:</span> <span class="token string">&quot;请输入中间件名称：&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			err <span class="token operator">:=</span> survey<span class="token punctuation">.</span><span class="token function">AskOne</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>repo<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// step2 : 下载git到一个目录中</span>
		appService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>

		middlewarePath <span class="token operator">:=</span> appService<span class="token punctuation">.</span><span class="token function">MiddlewareFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		url <span class="token operator">:=</span> <span class="token string">&quot;https://github.com/gin-contrib/&quot;</span> <span class="token operator">+</span> repo <span class="token operator">+</span> <span class="token string">&quot;.git&quot;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;下载中间件 gin-contrib:&quot;</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> git<span class="token punctuation">.</span><span class="token function">PlainClone</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>middlewarePath<span class="token punctuation">,</span> repo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>git<span class="token punctuation">.</span>CloneOptions<span class="token punctuation">{</span>
			URL<span class="token punctuation">:</span>      url<span class="token punctuation">,</span>
			Progress<span class="token punctuation">:</span> os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>

		<span class="token comment">// step3 : 删除不必要的文件如 go.mod, go.sum, .git 等  </span>
		repoFolder <span class="token operator">:=</span> path<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>middlewarePath<span class="token punctuation">,</span> repo<span class="token punctuation">)</span>  
		<span class="token function">removeUnnecessaryFiles</span><span class="token punctuation">(</span>repoFolder<span class="token punctuation">)</span>

		<span class="token comment">// step4 : 替换关键词</span>
		filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span>repoFolder<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info os<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> info<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> filepath<span class="token punctuation">.</span><span class="token function">Ext</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;.go&quot;</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span>
			<span class="token punctuation">}</span>
			c<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			isContain <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;github.com/gin-gonic/gin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> isContain <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;更新文件:&quot;</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>
				c <span class="token operator">=</span> bytes<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;github.com/gin-gonic/gin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;github.com/chenbihao/gob/framework/gin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				err <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> err
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// providerCreateCommand 创建一个新的服务，包括服务提供者，服务接口协议，服务实例</span>
<span class="token keyword">var</span> middlewareCreateCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>     <span class="token string">&quot;new&quot;</span><span class="token punctuation">,</span>
	Aliases<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;create&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;init&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span>   <span class="token string">&quot;创建一个中间件&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;创建一个中间件&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">var</span> name <span class="token builtin">string</span>
		<span class="token keyword">var</span> folder <span class="token builtin">string</span>
		<span class="token punctuation">{</span>
			prompt <span class="token operator">:=</span> <span class="token operator">&amp;</span>survey<span class="token punctuation">.</span>Input<span class="token punctuation">{</span>
				Message<span class="token punctuation">:</span> <span class="token string">&quot;请输入中间件名称：&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			err <span class="token operator">:=</span> survey<span class="token punctuation">.</span><span class="token function">AskOne</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token punctuation">{</span>
			prompt <span class="token operator">:=</span> <span class="token operator">&amp;</span>survey<span class="token punctuation">.</span>Input<span class="token punctuation">{</span>
				Message<span class="token punctuation">:</span> <span class="token string">&quot;请输入中间件所在目录名称(默认: 同中间件名称):&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			err <span class="token operator">:=</span> survey<span class="token punctuation">.</span><span class="token function">AskOne</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>folder<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> folder <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
			folder <span class="token operator">=</span> name
		<span class="token punctuation">}</span>

		app <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>

		pFolder <span class="token operator">:=</span> app<span class="token punctuation">.</span><span class="token function">MiddlewareFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		subFolders<span class="token punctuation">,</span> err <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">SubDir</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		subColl <span class="token operator">:=</span> util<span class="token punctuation">.</span>NewCollection<span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">(</span>subFolders<span class="token punctuation">)</span>
		<span class="token keyword">if</span> subColl<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;目录已经存在&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 开始创建文件</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">,</span> folder<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0700</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		funcs <span class="token operator">:=</span> template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">{</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> cases<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>language<span class="token punctuation">.</span>Und<span class="token punctuation">,</span> cases<span class="token punctuation">.</span>NoLower<span class="token punctuation">)</span><span class="token punctuation">.</span>String<span class="token punctuation">}</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//  创建</span>
			file <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">,</span> folder<span class="token punctuation">,</span> <span class="token string">&quot;middleware.go&quot;</span><span class="token punctuation">)</span>
			f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">Cause</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>

			t <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;middleware&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>funcs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>middlewareTmp<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">Cause</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;创建中间件成功, 文件夹地址:&quot;</span><span class="token punctuation">,</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>pFolder<span class="token punctuation">,</span> folder<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> middlewareTmp <span class="token operator">=</span> <span class="token string">\`package {{.}}

import &quot;github.com/chenbihao/gob/framework/gin&quot;

// {{.|title}}Middleware 代表中间件函数
func {{.|title}}Middleware() gin.HandlerFunc {
	return func(context *gin.Context) {
		context.Next()
	}
}

\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="初始化脚手架工具" tabindex="-1"><a class="header-anchor" href="#初始化脚手架工具"><span>初始化脚手架工具</span></a></h4><p><code>framework/command/new.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// new相关的名称</span>
<span class="token keyword">func</span> <span class="token function">initNewCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	<span class="token keyword">return</span> newCommand
<span class="token punctuation">}</span>
<span class="token comment">// 创建一个新应用</span>
<span class="token keyword">var</span> newCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>     <span class="token string">&quot;new&quot;</span><span class="token punctuation">,</span>
	Aliases<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;create&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;init&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span>   <span class="token string">&quot;创建一个新的应用&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		currentPath <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">GetExecDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token keyword">var</span> name <span class="token builtin">string</span>
		<span class="token keyword">var</span> folder <span class="token builtin">string</span>
		<span class="token keyword">var</span> mod <span class="token builtin">string</span>
		<span class="token keyword">var</span> version <span class="token builtin">string</span>
		<span class="token keyword">var</span> release <span class="token operator">*</span>github<span class="token punctuation">.</span>RepositoryRelease
		<span class="token punctuation">{</span>
			prompt <span class="token operator">:=</span> <span class="token operator">&amp;</span>survey<span class="token punctuation">.</span>Input<span class="token punctuation">{</span>
				Message<span class="token punctuation">:</span> <span class="token string">&quot;请输入目录名称：&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			err <span class="token operator">:=</span> survey<span class="token punctuation">.</span><span class="token function">AskOne</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>

			folder <span class="token operator">=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>currentPath<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
			<span class="token keyword">if</span> util<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				isForce <span class="token operator">:=</span> <span class="token boolean">false</span>
				prompt2 <span class="token operator">:=</span> <span class="token operator">&amp;</span>survey<span class="token punctuation">.</span>Confirm<span class="token punctuation">{</span>
					Message<span class="token punctuation">:</span> <span class="token string">&quot;目录&quot;</span> <span class="token operator">+</span> folder <span class="token operator">+</span> <span class="token string">&quot;已经存在,是否删除重新创建？(确认后立刻执行删除操作！)&quot;</span><span class="token punctuation">,</span>
					Default<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
				<span class="token punctuation">}</span>
				err <span class="token operator">:=</span> survey<span class="token punctuation">.</span><span class="token function">AskOne</span><span class="token punctuation">(</span>prompt2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>isForce<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> err
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> isForce <span class="token punctuation">{</span>
					<span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">RemoveAll</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
						<span class="token keyword">return</span> err
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
					fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;目录已存在，创建应用失败&quot;</span><span class="token punctuation">)</span>
					<span class="token keyword">return</span> <span class="token boolean">nil</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token punctuation">{</span>
			prompt <span class="token operator">:=</span> <span class="token operator">&amp;</span>survey<span class="token punctuation">.</span>Input<span class="token punctuation">{</span>
				Message<span class="token punctuation">:</span> <span class="token string">&quot;请输入模块名称(go.mod中的module, 默认为文件夹名称)：&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			err <span class="token operator">:=</span> survey<span class="token punctuation">.</span><span class="token function">AskOne</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mod<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> mod <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
				mod <span class="token operator">=</span> name
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// 获取gob的版本</span>
			client <span class="token operator">:=</span> github<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
			prompt <span class="token operator">:=</span> <span class="token operator">&amp;</span>survey<span class="token punctuation">.</span>Input<span class="token punctuation">{</span>
				Message<span class="token punctuation">:</span> <span class="token string">&quot;请输入版本名称(参考 https://github.com/chenbihao/gob/releases，默认为最新版本)：&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			err <span class="token operator">:=</span> survey<span class="token punctuation">.</span><span class="token function">AskOne</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>version<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> version <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
				<span class="token comment">// 确认版本是否正确</span>
				release<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span>Repositories<span class="token punctuation">.</span><span class="token function">GetReleaseByTag</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;chenbihao&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gob&quot;</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> release <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;版本不存在，创建应用失败，请参考 https://github.com/chenbihao/gob/releases&quot;</span><span class="token punctuation">)</span>
					<span class="token keyword">return</span> <span class="token boolean">nil</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> version <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
				release<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span>Repositories<span class="token punctuation">.</span><span class="token function">GetLatestRelease</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;chenbihao&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gob&quot;</span><span class="token punctuation">)</span>
				version <span class="token operator">=</span> release<span class="token punctuation">.</span><span class="token function">GetTagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;====================================================&quot;</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;开始进行创建应用操作&quot;</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;创建目录：&quot;</span><span class="token punctuation">,</span> folder<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;应用名称：&quot;</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;gob框架版本：&quot;</span><span class="token punctuation">,</span> release<span class="token punctuation">.</span><span class="token function">GetTagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

		templateFolder <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>currentPath<span class="token punctuation">,</span> <span class="token string">&quot;template-gob-&quot;</span><span class="token operator">+</span>version<span class="token operator">+</span><span class="token string">&quot;-&quot;</span><span class="token operator">+</span>cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span>templateFolder<span class="token punctuation">,</span> os<span class="token punctuation">.</span>ModePerm<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;创建临时目录&quot;</span><span class="token punctuation">,</span> templateFolder<span class="token punctuation">)</span>

		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">RemoveAll</span><span class="token punctuation">(</span>templateFolder<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;删除临时文件夹错误：&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;删除临时文件夹&quot;</span><span class="token punctuation">,</span> templateFolder<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token comment">// 拷贝template项目</span>
		url <span class="token operator">:=</span> release<span class="token punctuation">.</span><span class="token function">GetZipballURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		err <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">DownloadFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>templateFolder<span class="token punctuation">,</span> <span class="token string">&quot;template.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;下载zip包到template.zip&quot;</span><span class="token punctuation">)</span>

		<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">Unzip</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>templateFolder<span class="token punctuation">,</span> <span class="token string">&quot;template.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> templateFolder<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>

		<span class="token comment">// 获取folder下的gob-xxx相关解压目录</span>
		fInfos<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadDir</span><span class="token punctuation">(</span>templateFolder<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> fInfo <span class="token operator">:=</span> <span class="token keyword">range</span> fInfos <span class="token punctuation">{</span>
			<span class="token comment">// 找到解压后的文件夹</span>
			<span class="token keyword">if</span> fInfo<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>fInfo<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;gob-&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Rename</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>templateFolder<span class="token punctuation">,</span> fInfo<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> folder<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> err
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;解压zip包&quot;</span><span class="token punctuation">)</span>

		<span class="token boolean">_</span> <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">RemoveAll</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> <span class="token string">&quot;.git&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;删除.git目录&quot;</span><span class="token punctuation">)</span>

		<span class="token comment">// 删除framework 目录</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">RemoveAll</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> <span class="token string">&quot;framework&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;删除framework目录&quot;</span><span class="token punctuation">)</span>

		filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info os<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> info<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span>
			<span class="token punctuation">}</span>
			b<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> path <span class="token operator">==</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> <span class="token string">&quot;go.mod&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;更新文件:&quot;</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>
				b <span class="token operator">=</span> bytes<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;module github.com/chenbihao/gob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;module &quot;</span><span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token punctuation">)</span>
				b <span class="token operator">=</span> bytes<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;require (&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;require (\\n\\tgithub.com/chenbihao/gob &quot;</span><span class="token operator">+</span>version<span class="token punctuation">)</span><span class="token punctuation">)</span>
				err <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> err
				<span class="token punctuation">}</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span>
			<span class="token punctuation">}</span>
			isContain <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;github.com/chenbihao/gob/app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> isContain <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;更新文件:&quot;</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>
				b <span class="token operator">=</span> bytes<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;github.com/chenbihao/gob/app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>mod<span class="token operator">+</span><span class="token string">&quot;/app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				err <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> err
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;创建应用结束&quot;</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;目录：&quot;</span><span class="token punctuation">,</span> folder<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;====================================================&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="挂载相关命令" tabindex="-1"><a class="header-anchor" href="#挂载相关命令"><span>挂载相关命令</span></a></h4><p>挂载相关命令， <code>framework/command/kernel.go</code> 增加：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 挂载 provider 命令</span>
	root<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">initProviderCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// 挂载 command 命令</span>
	root<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">initCmdCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// 挂载 middleware 命令</span>
	root<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">initMiddlewareCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// 挂载 new 命令</span>
	root<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">initNewCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码验证-10" tabindex="-1"><a class="header-anchor" href="#代码验证-10"><span>代码验证</span></a></h3><p>运行相关命令即可验证生成功能：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gob provider new
gob <span class="token builtin class-name">command</span> new
gob middleware new
gob middleware migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>脚手架功能：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 集成初始化脚手架，可通过以下命令在本地构建应用：</span>

<span class="token comment"># 使用命令来安装 gob 命令。</span>
go <span class="token function">install</span> github.com/chenbihao/gob@latest

<span class="token comment"># 运行初始化脚手架</span>
gob new
<span class="token comment"># 并根据命令行互动输入对应的应用名与模块名。</span>


<span class="token comment"># cd进入对应的文件夹，安装相关依赖，  </span>
go mod tidy

<span class="token comment"># 随后可以通过引用 \`github.com/chenbihao/gob/framework\` 来引用框架相关模块</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_23、管理接口-集成-swagger" tabindex="-1"><a class="header-anchor" href="#_23、管理接口-集成-swagger"><span>23、管理接口：集成 swagger</span></a></h2><p>swagger 产品有两类。</p><p>一类是规则，就是 OpenAPI 的文档，用来规定接口文档的字段含义与要求。</p>`,24),Pn={href:"https://petstore.swagger.io/",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://editor.swagger.io/",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://swagger.io/tools/swagger-codegen/download/",target:"_blank",rel:"noopener noreferrer"},_n=s("h3",{id:"如何实现-13",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#如何实现-13"},[s("span",null,"如何实现")])],-1),In={href:"https://github.com/swaggo/swag",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://github.com/swaggo/swag#declarative-comments-format",target:"_blank",rel:"noopener noreferrer"},An={href:"https://github.com/swaggo/gin-swagger",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://github.com/swaggo/gin-swagger",target:"_blank",rel:"noopener noreferrer"},Tn=p(`<h3 id="代码实现-15" tabindex="-1"><a class="header-anchor" href="#代码实现-15"><span>代码实现</span></a></h3><h4 id="引入-swag-与生成命令" tabindex="-1"><a class="header-anchor" href="#引入-swag-与生成命令"><span>引入 swag 与生成命令</span></a></h4><p>源码引入：<code>framework/middleware/gin-swagge/</code> ，并且调整 gin 为本项目模块 。</p><p>swagger 生成命令，<code>framework/command/swagger.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">initSwaggerCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	swaggerCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>swaggerGenCommand<span class="token punctuation">)</span>
	<span class="token keyword">return</span> swaggerCommand
<span class="token punctuation">}</span>
<span class="token keyword">var</span> swaggerCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;swagger&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;swagger对应命令&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// swaggerGenCommand 生成具体的swagger文档</span>
<span class="token keyword">var</span> swaggerGenCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;gen&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;生成对应的swagger文件, contain swagger.yaml, doc.go&quot;</span><span class="token punctuation">,</span>
	Run<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		appService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>

		httpFolder <span class="token operator">:=</span> appService<span class="token punctuation">.</span><span class="token function">HttpFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		outputDir <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>httpFolder<span class="token punctuation">,</span> <span class="token string">&quot;swagger&quot;</span><span class="token punctuation">)</span>

		conf <span class="token operator">:=</span> <span class="token operator">&amp;</span>gen<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
			<span class="token comment">// 遍历需要查询注释的目录</span>
			SearchDir<span class="token punctuation">:</span> httpFolder<span class="token punctuation">,</span>
			<span class="token comment">// 不包含哪些文件</span>
			Excludes<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
			<span class="token comment">// 输出目录</span>
			OutputDir<span class="token punctuation">:</span> outputDir<span class="token punctuation">,</span>
			<span class="token comment">// 输出类型 （这里应该有默认值的，但是运行时没找到？）</span>
			OutputTypes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;go&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yaml&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token comment">// 整个swagger接口的说明文档注释</span>
			MainAPIFile<span class="token punctuation">:</span> <span class="token string">&quot;swagger.go&quot;</span><span class="token punctuation">,</span>
			<span class="token comment">// 名字的显示策略，比如首字母大写等</span>
			PropNamingStrategy<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
			<span class="token comment">// 是否要解析vendor目录</span>
			ParseVendor<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
			<span class="token comment">// 是否要解析外部依赖库的包（ 0 none, 1 models, 2 operations, 3 all）</span>
			ParseDependency<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
			<span class="token comment">// 是否要解析标准库的包</span>
			ParseInternal<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
			<span class="token comment">// 是否要查找markdown文件，这个markdown文件能用来为tag增加说明格式</span>
			MarkdownFilesDir<span class="token punctuation">:</span> httpFolder<span class="token punctuation">,</span>
			<span class="token comment">// 是否应该在docs.go中生成时间戳</span>
			GeneratedTime<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> gen<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>挂载命令， <code>framework/command/kernel.go</code> 增加：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 挂载 swagger 命令</span>
	root<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">initSwaggerCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>整个 swagger 接口的说明文档注释， <code>app/http/swagger.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Package http API.</span>
<span class="token comment">// @title gob</span>
<span class="token comment">// @version 0.1.11</span>
<span class="token comment">// @description gob框架</span>
<span class="token comment">// @termsOfService https://github.com/swaggo/swag</span>

<span class="token comment">// @contact.name chenbihao</span>
<span class="token comment">// @contact.email chenbihao@foxmail.com</span>

<span class="token comment">// @license.name Apache 2.0</span>
<span class="token comment">// @license.url http://www.apache.org/licenses/LICENSE-2.0.html</span>

<span class="token comment">// @BasePath /</span>
<span class="token comment">// @query.collection.format multi</span>

<span class="token comment">// @securityDefinitions.basic BasicAuth</span>

<span class="token comment">// @securityDefinitions.apikey ApiKeyAuth</span>
<span class="token comment">// @in header</span>
<span class="token comment">// @name Authorization</span>

<span class="token comment">// @x-extension-openapi {&quot;example&quot;: &quot;value on a json format&quot;}</span>

<span class="token keyword">package</span> http

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token boolean">_</span> <span class="token string">&quot;github.com/chenbihao/gob/app/http/swagger&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动-swagger-ui" tabindex="-1"><a class="header-anchor" href="#启动-swagger-ui"><span>启动 swagger-ui</span></a></h4><p>配置文件，<code>config/dev/app.yaml</code> 添加：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>swagger<span class="token punctuation">:</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>路由注册，<code>app/http/route.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token operator">...</span>
	<span class="token comment">// docs &quot;github.com/go-project-name/docs&quot; </span>
	<span class="token comment">// 项目生成的docs，这里是 _ &quot;github.com/chenbihao/gob/app/http/swagger&quot; </span>
	<span class="token comment">// 放在  \`app/http/swagger.go\` 那边</span>
	ginSwagger <span class="token string">&quot;github.com/chenbihao/gob/framework/middleware/gin-swagger&quot;</span>
	swaggerFiles <span class="token string">&quot;github.com/swaggo/files&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// Routes 绑定业务层路由</span>
<span class="token keyword">func</span> <span class="token function">Routes</span><span class="token punctuation">(</span>r <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>

	container <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	configService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>

	<span class="token comment">// /路径先去./dist目录下查找文件是否存在，找到使用文件服务提供服务</span>
	r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>static<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> static<span class="token punctuation">.</span><span class="token function">LocalFile</span><span class="token punctuation">(</span><span class="token string">&quot;./gob_frontend/dist&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// 使用全链路追踪</span>
	r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>middleware<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// 使用中间件迁移工具迁移下来的 cors 中间件</span>
	r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>cors<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// 如果配置了swagger，则显示swagger的中间件</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">GetBool</span><span class="token punctuation">(</span><span class="token string">&quot;app.swagger&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>
		r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/swagger/*any&quot;</span><span class="token punctuation">,</span> ginSwagger<span class="token punctuation">.</span><span class="token function">WrapHandler</span><span class="token punctuation">(</span>swaggerFiles<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	demo<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">// 这个demo是业务App自定义的demo服务,位置在 \`app/http/module/demo/*\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Engine 设置容器相关 <code>framework/gin/gob_engine.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// SetContainer 设置服务容器</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">SetContainer</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	engine<span class="token punctuation">.</span>container <span class="token operator">=</span> container
<span class="token punctuation">}</span>

<span class="token comment">// GetContainer 从Engine中获取container</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> framework<span class="token punctuation">.</span>Container <span class="token punctuation">{</span>
	<span class="token keyword">return</span> engine<span class="token punctuation">.</span>container
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于在绑定业务层路由内就调用了 <code>r.GetContainer()</code>，所以需要把 set 方法行为提前到 <code>app/http/kernel.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// NewHttpEngine 创建了一个绑定了路由的 Web 引擎</span>
<span class="token keyword">func</span> <span class="token function">NewHttpEngine</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token comment">// 设置为 Release，为的是默认在启动中不输出调试信息</span>
	<span class="token comment">// if container.MustMake(contract.EnvKey).(contract.Env).AppEnv() == contract.EnvProd {}</span>
	gin<span class="token punctuation">.</span><span class="token function">SetMode</span><span class="token punctuation">(</span>gin<span class="token punctuation">.</span>ReleaseMode<span class="token punctuation">)</span>
	<span class="token comment">// 默认启动一个 Web 引擎 （Default 包含 Logger and Recovery）</span>
	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 设置容器</span>
	r<span class="token punctuation">.</span><span class="token function">SetContainer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>                           <span class="token comment">//  &lt;------</span>

	<span class="token comment">// 业务绑定路由操作</span>
	<span class="token function">Routes</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	<span class="token comment">// 返回绑定路由后的 Web 引擎</span>
	<span class="token keyword">return</span> r<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码验证-11" tabindex="-1"><a class="header-anchor" href="#代码验证-11"><span>代码验证</span></a></h3><p>命令 <code>./gob swagger gen</code> 可以生成 docs 文件。</p>`,20),Mn={href:"http://localhost:8888/swagger/index.html",target:"_blank",rel:"noopener noreferrer"},Nn=s("h2",{id:"_24、管理进程-完善运行命令",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_24、管理进程-完善运行命令"},[s("span",null,"24、管理进程，完善运行命令")])],-1),En=s("p",null,"让 app 服务增加管理服务进程的功能，并且命令参数附带配置地址与守护模式参数。",-1),Ln=s("h3",{id:"如何实现-14",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#如何实现-14"},[s("span",null,"如何实现")])],-1),Bn=s("p",null,[n("通过 "),s("code",null,"app/storage/runtime/app.pid"),n(" 存储获取 pid 来管理进程。")],-1),Hn={href:"https://github.com/sevlyar/go-daemon",target:"_blank",rel:"noopener noreferrer"},Wn={href:"https://github.com/erikdubbelboer/gspt",target:"_blank",rel:"noopener noreferrer"},Kn=p(`<h3 id="代码实现-16" tabindex="-1"><a class="header-anchor" href="#代码实现-16"><span>代码实现</span></a></h3><p><code>framework/command/app.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> appAddress <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>   <span class="token comment">// app 启动地址</span>
<span class="token keyword">var</span> appDaemon <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// app 守护模式</span>

<span class="token comment">// initAppCommand 初始化app命令和其子命令</span>
<span class="token keyword">func</span> <span class="token function">initAppCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>

	appStartCommand<span class="token punctuation">.</span><span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>appAddress<span class="token punctuation">,</span> <span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;设置app启动的地址，默认为:8080端口&quot;</span><span class="token punctuation">)</span>
	appStartCommand<span class="token punctuation">.</span><span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BoolVarP</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>appDaemon<span class="token punctuation">,</span> <span class="token string">&quot;daemon&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;以守护进程方式启动&quot;</span><span class="token punctuation">)</span>

	appCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>appStartCommand<span class="token punctuation">)</span>
	appCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>appRestartCommand<span class="token punctuation">)</span>
	appCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>appStateCommand<span class="token punctuation">)</span>
	appCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>appStopCommand<span class="token punctuation">)</span>
	<span class="token keyword">return</span> appCommand
<span class="token punctuation">}</span>

<span class="token comment">// AppCommand 是命令行参数第一级为app的命令，它没有实际功能，只是打印帮助文档</span>
<span class="token keyword">var</span> appCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;业务应用控制命令&quot;</span><span class="token punctuation">,</span>
	Long<span class="token punctuation">:</span>  <span class="token string">&quot;业务应用控制命令，其包含业务启动，关闭，重启，查询等功能&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token comment">// 打印帮助文档</span>
		c<span class="token punctuation">.</span><span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 启动AppServer, 这个函数会将当前goroutine阻塞</span>
<span class="token keyword">func</span> <span class="token function">startAppServe</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> server <span class="token operator">*</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// 这个goroutine是启动服务的goroutine</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 当前的goroutine等待信号量</span>
	quit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">)</span>
	<span class="token comment">// 监控信号：SIGINT, SIGTERM, SIGQUIT</span>
	signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>quit<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGINT<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGQUIT<span class="token punctuation">)</span>
	<span class="token comment">// 这里会阻塞当前goroutine等待信号</span>
	<span class="token operator">&lt;-</span>quit

	<span class="token comment">// 调用Server.Shutdown graceful结束</span>
	closeWait <span class="token operator">:=</span> <span class="token number">5</span>
	configService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;app.close_wait&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		closeWait <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">&quot;app.close_wait&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	timeoutCtx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>closeWait<span class="token punctuation">)</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span>timeoutCtx<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Server Shutdown:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// appStartCommand 启动一个Web服务</span>
<span class="token keyword">var</span> appStartCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;启动一个app服务&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token comment">// 从Command中获取服务容器</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 从服务容器中获取kernel的服务实例</span>
		kernelService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>KernelKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Kernel<span class="token punctuation">)</span>
		<span class="token comment">// 从kernel服务实例中获取引擎</span>
		core <span class="token operator">:=</span> kernelService<span class="token punctuation">.</span><span class="token function">HttpEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token keyword">if</span> appAddress <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
			envService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>EnvKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Env<span class="token punctuation">)</span>
			<span class="token keyword">if</span> envService<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;ADDRESS&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
				appAddress <span class="token operator">=</span> envService<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;ADDRESS&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				configService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
				<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;app.address&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					appAddress <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;app.address&quot;</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
					appAddress <span class="token operator">=</span> <span class="token string">&quot;:8080&quot;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 创建一个Server服务</span>
		server <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>
			Handler<span class="token punctuation">:</span> core<span class="token punctuation">,</span>
			Addr<span class="token punctuation">:</span>    appAddress<span class="token punctuation">,</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 设置app的日志地址和进程id地址</span>
		appService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>

		runtimeFolder <span class="token operator">:=</span> appService<span class="token punctuation">.</span><span class="token function">RuntimeFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		serverPidFile <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>runtimeFolder<span class="token punctuation">,</span> <span class="token string">&quot;app.pid&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">CreateFileIfNotExists</span><span class="token punctuation">(</span>runtimeFolder<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>

		logFolder <span class="token operator">:=</span> appService<span class="token punctuation">.</span><span class="token function">LogFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		serverLogFile <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>logFolder<span class="token punctuation">,</span> <span class="token string">&quot;app.log&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">CreateFileIfNotExists</span><span class="token punctuation">(</span>logFolder<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		currentFolder <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">GetExecDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token comment">// daemon 模式</span>
		<span class="token keyword">if</span> appDaemon <span class="token punctuation">{</span>
			<span class="token comment">// win不支持 daemon 模式</span>
			<span class="token keyword">if</span> util<span class="token punctuation">.</span><span class="token function">IsWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;daemon: Non-POSIX OS is not supported&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 创建一个Context</span>
			cntxt <span class="token operator">:=</span> <span class="token operator">&amp;</span>daemon<span class="token punctuation">.</span>Context<span class="token punctuation">{</span>
				<span class="token comment">// 设置pid文件</span>
				PidFileName<span class="token punctuation">:</span> serverPidFile<span class="token punctuation">,</span>
				PidFilePerm<span class="token punctuation">:</span> <span class="token number">0664</span><span class="token punctuation">,</span>
				<span class="token comment">// 设置日志文件</span>
				LogFileName<span class="token punctuation">:</span> serverLogFile<span class="token punctuation">,</span>
				LogFilePerm<span class="token punctuation">:</span> <span class="token number">0640</span><span class="token punctuation">,</span>
				<span class="token comment">// 设置工作路径</span>
				WorkDir<span class="token punctuation">:</span> currentFolder<span class="token punctuation">,</span>
				<span class="token comment">// 设置所有设置文件的mask，默认为750</span>
				Umask<span class="token punctuation">:</span> <span class="token number">027</span><span class="token punctuation">,</span>
				<span class="token comment">// 子进程的参数，按照这个参数设置，子进程的命令为 ./gob app start --daemon=true</span>
				Args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--daemon=true&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 启动子进程，d不为空表示当前是父进程，d为空表示当前是子进程</span>
			<span class="token comment">// 这里可以把 Reborn 理解成 fork，当调用这个函数的时候，父进程会继续往下走，但是返回值 d 不为空，它的信息是子进程的进程号等信息。</span>
			<span class="token comment">// 而子进程会重新运行对应的命令，再次进入到 Reborn 函数的时候，返回的 d 就为 nil</span>
			child<span class="token punctuation">,</span> err <span class="token operator">:=</span> cntxt<span class="token punctuation">.</span><span class="token function">Reborn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> child <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token comment">// 父进程直接打印启动成功信息，不做任何操作</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;app启动成功，pid:&quot;</span><span class="token punctuation">,</span> child<span class="token punctuation">.</span>Pid<span class="token punctuation">)</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;日志文件:&quot;</span><span class="token punctuation">,</span> serverLogFile<span class="token punctuation">)</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">defer</span> cntxt<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">// 子进程执行真正的app启动操作</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;daemon started&quot;</span><span class="token punctuation">)</span>
			util<span class="token punctuation">.</span><span class="token function">SetProcessTitle</span><span class="token punctuation">(</span><span class="token string">&quot;gob app&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">startAppServe</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 非 daemon 模式，直接执行</span>
		content <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">Getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;[PID]&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
		err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>serverPidFile<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		util<span class="token punctuation">.</span><span class="token function">SetProcessTitle</span><span class="token punctuation">(</span><span class="token string">&quot;gob app&quot;</span><span class="token punctuation">)</span>

		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;app serve url&quot;</span><span class="token punctuation">,</span> appAddress<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">startAppServe</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 重新启动一个app服务</span>
<span class="token keyword">var</span> appRestartCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;restart&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;重新启动一个app服务&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		appService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>

		<span class="token comment">// GetPid</span>
		serverPidFile <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>appService<span class="token punctuation">.</span><span class="token function">RuntimeFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;app.pid&quot;</span><span class="token punctuation">)</span>
		content<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>serverPidFile<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> content <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			pid<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> util<span class="token punctuation">.</span><span class="token function">CheckProcessExist</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 杀死进程</span>
				<span class="token keyword">if</span> err <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">KillProcess</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> err
				<span class="token punctuation">}</span>
				<span class="token comment">// 获取closeWait</span>
				closeWait <span class="token operator">:=</span> <span class="token number">5</span>
				configService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
				<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span><span class="token string">&quot;app.close_wait&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					closeWait <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">&quot;app.close_wait&quot;</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token comment">// 确认进程已经关闭,每秒检测一次， 最多检测closeWait * 2秒</span>
				<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> closeWait<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
					<span class="token keyword">if</span> util<span class="token punctuation">.</span><span class="token function">CheckProcessExist</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span>
						<span class="token keyword">break</span>
					<span class="token punctuation">}</span>
					time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token comment">// 如果进程等待了 2*closeWait 之后还没结束，返回错误，不进行后续的操作</span>
				<span class="token keyword">if</span> util<span class="token punctuation">.</span><span class="token function">CheckProcessExist</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>
					fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;结束进程失败:&quot;</span><span class="token operator">+</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;请查看原因&quot;</span><span class="token punctuation">)</span>
					<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;结束进程失败&quot;</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token comment">//  清空 PID 文件</span>
				<span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>serverPidFile<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> err
				<span class="token punctuation">}</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;结束进程成功:&quot;</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// todo 这里win下后台运行未实现</span>
		<span class="token keyword">if</span> util<span class="token punctuation">.</span><span class="token function">IsNotWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			appDaemon <span class="token operator">=</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> appStartCommand<span class="token punctuation">.</span><span class="token function">RunE</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 停止一个已经启动的app服务</span>
<span class="token keyword">var</span> appStopCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;stop&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;停止一个已经启动的app服务&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		appService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>

		<span class="token comment">// GetPid</span>
		serverPidFile <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>appService<span class="token punctuation">.</span><span class="token function">RuntimeFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;app.pid&quot;</span><span class="token punctuation">)</span>
		content<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>serverPidFile<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> content <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			pid<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			<span class="token comment">// 发送SIGTERM命令</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">KillProcess</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>serverPidFile<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;停止进程:&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取启动的app的pid</span>
<span class="token keyword">var</span> appStateCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;state&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;获取启动的app的pid&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		appService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>

		<span class="token comment">// 获取pid</span>
		serverPidFile <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>appService<span class="token punctuation">.</span><span class="token function">RuntimeFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;app.pid&quot;</span><span class="token punctuation">)</span>
		content<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>serverPidFile<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> content <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			pid<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> util<span class="token punctuation">.</span><span class="token function">CheckProcessExist</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;app服务已经启动, pid:&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;没有app服务存在&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时因为 win 也不支持给进程发信号，所以这里 util 的方法我设置成兼容不同平台的方式来调用：</p><p><code>framework/util/syscall.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//go:build !windows</span>
<span class="token keyword">package</span> util
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token operator">...</span>
	<span class="token string">&quot;github.com/erikdubbelboer/gspt&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// SetProcessTitle 设置进程名</span>
<span class="token keyword">func</span> <span class="token function">SetProcessTitle</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	gspt<span class="token punctuation">.</span><span class="token function">SetProcTitle</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// CheckProcessExist Will return true if the process with PID exists.</span>
<span class="token keyword">func</span> <span class="token function">CheckProcessExist</span><span class="token punctuation">(</span>pid <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token comment">// 查询这个pid</span>
	process<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">FindProcess</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 给进程发送signal 0, 如果返回nil，代表进程存在, 否则进程不存在</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">Signal</span><span class="token punctuation">(</span>syscall<span class="token punctuation">.</span><span class="token function">Signal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token comment">// KillProcess</span>
<span class="token keyword">func</span> <span class="token function">KillProcess</span><span class="token punctuation">(</span>pid <span class="token builtin">int</span><span class="token punctuation">,</span> signal syscall<span class="token punctuation">.</span>Signal<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 获取进程信息</span>
	process<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">FindProcess</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to find process: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 向进程发送 SIGTERM 信号</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">Signal</span><span class="token punctuation">(</span>signal<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to send signal: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>framework/util/syscall_win.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//go:build windows</span>
<span class="token keyword">package</span> util
<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>

<span class="token comment">// SetProcessTitle 设置进程名</span>
<span class="token keyword">func</span> <span class="token function">SetProcessTitle</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// win下无法设置进程名</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token comment">// CheckProcessExist Will return true if the process with PID exists.</span>
<span class="token keyword">func</span> <span class="token function">CheckProcessExist</span><span class="token punctuation">(</span>pid <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token comment">// 查询这个pid</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">FindProcess</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token comment">// KillProcess</span>
<span class="token keyword">func</span> <span class="token function">KillProcess</span><span class="token punctuation">(</span>pid <span class="token builtin">int</span><span class="token punctuation">,</span> signal syscall<span class="token punctuation">.</span>Signal<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 获取进程信息</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">FindProcess</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to find process: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">WinKillProcess</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">WinKillProcess</span><span class="token punctuation">(</span>pid <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">&quot;taskkill&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/F&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/PID&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">)</span>
	out<span class="token punctuation">,</span> err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">CombinedOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码验证-12" tabindex="-1"><a class="header-anchor" href="#代码验证-12"><span>代码验证</span></a></h3><p>运行相关命令进行验证：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./gob app start   <span class="token comment"># 启动一个 app 服务</span>
./gob app state   <span class="token comment"># 获取 app 进程信息</span>
./gob app stop    <span class="token comment"># 停止已经启动的 app 服务</span>
./gob app restart <span class="token comment"># 重新启动一个 app 服务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_25、26、gorm" tabindex="-1"><a class="header-anchor" href="#_25、26、gorm"><span>25、26、GORM</span></a></h2>`,12),On={href:"https://github.com/go-gorm/gorm",target:"_blank",rel:"noopener noreferrer"},Un={href:"https://gorm.io/zh_CN/",target:"_blank",rel:"noopener noreferrer"},jn=p(`<p>官方示例：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 创建 mysql 连接</span>
	dsn <span class="token operator">:=</span> <span class="token string">&quot;xxxxxxx&quot;</span>
	db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// 插入一条数据</span>
	db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;chenbihao&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	
	<span class="token comment">// 相当于： </span>
	<span class="token comment">// db, err = sql.Open(&quot;mysql&quot;, *dsn)</span>
	<span class="token comment">// result, err := db.ExecContext(ctx, &quot;INSERT INTO user (name) values (&#39;chenbihao&#39;)&quot;)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传入数据库连接器 <code>Dialector</code> （负责引入驱动 + 创建链接）以及可变长的 <code>Option</code>（负责初始化调整配置）。</p><p>返回 <code>gorm.DB</code> 结构（），一个 <code>gorm.DB</code> 结构就代表一个数据库连接，</p><p>其中嵌套了 <code>Config</code> 结构，包含日志输出 <code>Logger</code> 、连接池 <code>ConnPool</code> 和 <code>Callback</code> 。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Open initialize db session based on dialector</span>
<span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span>dialector Dialector<span class="token punctuation">,</span> opts <span class="token operator">...</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>

<span class="token comment">// Dialector GORM database dialectortype Dialector interface {  </span>
    <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>  
    <span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span>  
    <span class="token function">Migrator</span><span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> Migrator  
    <span class="token function">DataTypeOf</span><span class="token punctuation">(</span><span class="token operator">*</span>schema<span class="token punctuation">.</span>Field<span class="token punctuation">)</span> <span class="token builtin">string</span>  
    <span class="token function">DefaultValueOf</span><span class="token punctuation">(</span><span class="token operator">*</span>schema<span class="token punctuation">.</span>Field<span class="token punctuation">)</span> clause<span class="token punctuation">.</span>Expression  
    <span class="token function">BindVarTo</span><span class="token punctuation">(</span>writer clause<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> stmt <span class="token operator">*</span>Statement<span class="token punctuation">,</span> v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  
    <span class="token function">QuoteTo</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span>  
    <span class="token function">Explain</span><span class="token punctuation">(</span>sql <span class="token builtin">string</span><span class="token punctuation">,</span> vars <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">string</span>  
<span class="token punctuation">}</span>
<span class="token comment">// Option gorm option interfacetype Option interface {  </span>
    <span class="token function">Apply</span><span class="token punctuation">(</span><span class="token operator">*</span>Config<span class="token punctuation">)</span> <span class="token builtin">error</span>  
    <span class="token function">AfterInitialize</span><span class="token punctuation">(</span><span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span>  
<span class="token punctuation">}</span>
<span class="token comment">// DB GORM DB definition</span>
<span class="token keyword">type</span> DB <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
    <span class="token operator">*</span>Config  
    Error        <span class="token builtin">error</span>  
    RowsAffected <span class="token builtin">int64</span>  
    Statement    <span class="token operator">*</span>Statement  
    clone        <span class="token builtin">int</span>  
<span class="token punctuation">}</span>
<span class="token comment">// Config GORM config</span>
<span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token comment">// gorm 的日志输出</span>
	Logger logger<span class="token punctuation">.</span>Interface
	<span class="token comment">// db 的具体连接</span>
	ConnPool ConnPool
	<span class="token comment">// db 驱动器</span>
	Dialector
	<span class="token comment">// 回调方法</span>
	callbacks  <span class="token operator">*</span>callbacks  
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token comment">// callbacks gorm callbacks manager</span>
<span class="token keyword">type</span> callbacks <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	processors <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>processor
<span class="token punctuation">}</span>
<span class="token keyword">type</span> processor <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	db        <span class="token operator">*</span>DB         <span class="token comment">// 对应的 gorm.DB</span>
	Clauses   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token comment">// 处理器对应的 sql 片段</span>
	fns       <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token comment">// 这个处理器对应的处理函数</span>
	callbacks <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>callback <span class="token comment">// 这个处理器对应的回调函数，生成 fns</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何实现-15" tabindex="-1"><a class="header-anchor" href="#如何实现-15"><span>如何实现</span></a></h3><p>引入 gorm 作为服务提供者，通过读取 <code>database.yaml</code> 配置生成 DSN：</p><ul><li><code>GetBaseConfig</code> 获取 <code>database.yaml</code> 根目录下的配置，作为默认配置</li><li><code>WithConfigPath</code> 根据指定配置路径获取 Redis 配置</li><li><code>WithGormConfig</code> 可以直接修改 DBConfig 中的 <code>gorm.Config</code> 配置信息</li></ul><p>接入日志服务，以单例形式提供服务。</p><h3 id="代码实现-17" tabindex="-1"><a class="header-anchor" href="#代码实现-17"><span>代码实现</span></a></h3><p>引入 gorm 作为服务提供者，</p><p>服务契约 <code>framework/contract/orm.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// ORMKey 代表 ORM的服务  </span>
<span class="token keyword">const</span> ORMKey <span class="token operator">=</span> <span class="token string">&quot;gob:orm&quot;</span>  
  
<span class="token comment">// ORM 表示传入的参数  </span>
<span class="token keyword">type</span> ORM <span class="token keyword">interface</span> <span class="token punctuation">{</span>  
    <span class="token function">GetDB</span><span class="token punctuation">(</span>option <span class="token operator">...</span>DBOption<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// DBOption 代表初始化的时候的选项  </span>
<span class="token keyword">type</span> DBOption <span class="token keyword">func</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> config <span class="token operator">*</span>DBConfig<span class="token punctuation">)</span> <span class="token builtin">error</span>  
  
<span class="token comment">// DBConfig 代表数据库连接的所有配置  </span>
<span class="token keyword">type</span> DBConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 以下配置关于gorm  </span>
    <span class="token operator">*</span>gorm<span class="token punctuation">.</span>Config <span class="token comment">// 集成gorm的配置  </span>
  
    <span class="token comment">// 以下配置关于dsn  </span>
    WriteTimeout <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;write_timeout&quot;\`</span> <span class="token comment">// 写超时时间  </span>
    Loc          <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;loc&quot;\`</span>           <span class="token comment">// 时区  </span>
    Port         <span class="token builtin">int</span>    <span class="token string">\`yaml:&quot;port&quot;\`</span>          <span class="token comment">// 端口  </span>
    ReadTimeout  <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;read_timeout&quot;\`</span>  <span class="token comment">// 读超时时间  </span>
    Charset      <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;charset&quot;\`</span>       <span class="token comment">// 字符集  </span>
    ParseTime    <span class="token builtin">bool</span>   <span class="token string">\`yaml:&quot;parse_time&quot;\`</span>    <span class="token comment">// 是否解析时间  </span>
    Protocol     <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;protocol&quot;\`</span>      <span class="token comment">// 传输协议  </span>
    Dsn          <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;dsn&quot;\`</span>           <span class="token comment">// 直接传递dsn，如果传递了，其他关于dsn的配置均无效  </span>
    Database     <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;database&quot;\`</span>      <span class="token comment">// 数据库  </span>
    Collation    <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;collation&quot;\`</span>     <span class="token comment">// 字符序  </span>
    Timeout      <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;timeout&quot;\`</span>       <span class="token comment">// 连接超时时间  </span>
    Username     <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;username&quot;\`</span>      <span class="token comment">// 用户名  </span>
    Password     <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;password&quot;\`</span>      <span class="token comment">// 密码  </span>
    Driver       <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;driver&quot;\`</span>        <span class="token comment">// 驱动  </span>
    Host         <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;host&quot;\`</span>          <span class="token comment">// 数据库地址  </span>
  
    <span class="token comment">// 以下配置关于连接池  </span>
    ConnMaxIdle     <span class="token builtin">int</span>    <span class="token string">\`yaml:&quot;conn_max_idle&quot;\`</span>     <span class="token comment">// 最大空闲连接数  </span>
    ConnMaxOpen     <span class="token builtin">int</span>    <span class="token string">\`yaml:&quot;conn_max_open&quot;\`</span>     <span class="token comment">// 最大连接数  </span>
    ConnMaxLifetime <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;conn_max_lifetime&quot;\`</span> <span class="token comment">// 连接最大生命周期  </span>
    ConnMaxIdletime <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;conn_max_idletime&quot;\`</span> <span class="token comment">// 空闲最大生命周期  </span>
<span class="token punctuation">}</span>  
  
<span class="token comment">// FormatDsn 生成dsn  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>conf <span class="token operator">*</span>DBConfig<span class="token punctuation">)</span> <span class="token function">FormatDsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    port <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>Port<span class="token punctuation">)</span>  
    timeout<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>Timeout<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err  
    <span class="token punctuation">}</span>  
    readTimeout<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>ReadTimeout<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err  
    <span class="token punctuation">}</span>  
    writeTimeout<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>WriteTimeout<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err  
    <span class="token punctuation">}</span>  
    location<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">LoadLocation</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>Loc<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err  
    <span class="token punctuation">}</span>  
    driverConf <span class="token operator">:=</span> <span class="token operator">&amp;</span>mysql<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>  
       User<span class="token punctuation">:</span>         conf<span class="token punctuation">.</span>Username<span class="token punctuation">,</span>  
       Passwd<span class="token punctuation">:</span>       conf<span class="token punctuation">.</span>Password<span class="token punctuation">,</span>  
       Net<span class="token punctuation">:</span>          conf<span class="token punctuation">.</span>Protocol<span class="token punctuation">,</span>  
       Addr<span class="token punctuation">:</span>         net<span class="token punctuation">.</span><span class="token function">JoinHostPort</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>Host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">,</span>  
       DBName<span class="token punctuation">:</span>       conf<span class="token punctuation">.</span>Database<span class="token punctuation">,</span>  
       Collation<span class="token punctuation">:</span>    conf<span class="token punctuation">.</span>Collation<span class="token punctuation">,</span>  
       Loc<span class="token punctuation">:</span>          location<span class="token punctuation">,</span>  
       Timeout<span class="token punctuation">:</span>      timeout<span class="token punctuation">,</span>  
       ReadTimeout<span class="token punctuation">:</span>  readTimeout<span class="token punctuation">,</span>  
       WriteTimeout<span class="token punctuation">:</span> writeTimeout<span class="token punctuation">,</span>  
       ParseTime<span class="token punctuation">:</span>    conf<span class="token punctuation">.</span>ParseTime<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> driverConf<span class="token punctuation">.</span><span class="token function">FormatDSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务提供者 <code>framework/provider/orm/provider.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// GormProvider 提供App的具体实现方法  </span>
<span class="token keyword">type</span> GormProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  
<span class="token keyword">var</span> <span class="token boolean">_</span> framework<span class="token punctuation">.</span>ServiceProvider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>GormProvider<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>  
  
<span class="token comment">// Register 注册方法  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>GormProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> framework<span class="token punctuation">.</span>NewInstance <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> NewGormService  
<span class="token punctuation">}</span>  
<span class="token comment">// Boot 启动调用  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>GormProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
<span class="token comment">// IsDefer 是否延迟初始化</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>GormProvider<span class="token punctuation">)</span> <span class="token function">IsDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token boolean">true</span>   <span class="token comment">// ORM 需要延迟初始化  </span>
<span class="token punctuation">}</span>  
<span class="token comment">// Params 获取初始化参数  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>GormProvider<span class="token punctuation">)</span> <span class="token function">Params</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>container<span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
<span class="token comment">// Name 获取字符串凭证  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>provider <span class="token operator">*</span>GormProvider<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> contract<span class="token punctuation">.</span>ORMKey  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务实例 <code>framework/provider/orm/service.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// GormService 代表gob框架的orm实现  </span>
<span class="token keyword">type</span> GormService <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
    container framework<span class="token punctuation">.</span>Container <span class="token comment">// 服务容器  </span>
    dbs       <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token comment">// key为dsn, value为gorm.DB（连接池）  </span>
  
    lock <span class="token operator">*</span>sync<span class="token punctuation">.</span>RWMutex  
<span class="token punctuation">}</span>  
  
<span class="token comment">// NewGormService 代表实例化Gorm  </span>
<span class="token keyword">func</span> <span class="token function">NewGormService</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    container <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span>  
    dbs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span>  
    lock <span class="token operator">:=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>RWMutex<span class="token punctuation">{</span><span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>GormService<span class="token punctuation">{</span>  
       container<span class="token punctuation">:</span> container<span class="token punctuation">,</span>  
       dbs<span class="token punctuation">:</span>       dbs<span class="token punctuation">,</span>  
       lock<span class="token punctuation">:</span>      lock<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// GetDB 获取DB实例  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app <span class="token operator">*</span>GormService<span class="token punctuation">)</span> <span class="token function">GetDB</span><span class="token punctuation">(</span>option <span class="token operator">...</span>contract<span class="token punctuation">.</span>DBOption<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
  
    logService <span class="token operator">:=</span> app<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>LogKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Log<span class="token punctuation">)</span>  
  
    <span class="token comment">// 读取默认配置  </span>
    config <span class="token operator">:=</span> <span class="token function">GetBaseConfig</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>container<span class="token punctuation">)</span>  
    <span class="token comment">// 设置 Logger    ormLogger := NewOrmLogger(logService)  </span>
    config<span class="token punctuation">.</span>Config <span class="token operator">=</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>  
       Logger<span class="token punctuation">:</span> ormLogger<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token comment">// option 对 opt 进行修改  </span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> opt <span class="token operator">:=</span> <span class="token keyword">range</span> option <span class="token punctuation">{</span>  
       <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">opt</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>container<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
          <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err  
       <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
    <span class="token comment">// 如果最终的 config 没有设置 dsn 就生成 dsn    if config.Dsn == &quot;&quot; {  </span>
       dsn<span class="token punctuation">,</span> err <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">FormatDsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
       <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
          <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err  
       <span class="token punctuation">}</span>  
       config<span class="token punctuation">.</span>Dsn <span class="token operator">=</span> dsn  
    <span class="token punctuation">}</span>  
    <span class="token comment">// 判断是否已经实例化了gorm.DB  </span>
    app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">if</span> db<span class="token punctuation">,</span> ok <span class="token operator">:=</span> app<span class="token punctuation">.</span>dbs<span class="token punctuation">[</span>config<span class="token punctuation">.</span>Dsn<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
       app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
       <span class="token keyword">return</span> db<span class="token punctuation">,</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
    app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
  
    <span class="token comment">// 没有实例化gorm.DB，那么就要进行实例化操作  </span>
    app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">defer</span> app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    
    <span class="token comment">// 实例化gorm.DB  </span>
    <span class="token keyword">var</span> db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB  
    <span class="token keyword">var</span> err <span class="token builtin">error</span>  
    <span class="token keyword">switch</span> config<span class="token punctuation">.</span>Driver <span class="token punctuation">{</span>  
    <span class="token keyword">case</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">:</span>  
       db<span class="token punctuation">,</span> err <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span>  
    <span class="token keyword">case</span> <span class="token string">&quot;postgres&quot;</span><span class="token punctuation">:</span>  
       db<span class="token punctuation">,</span> err <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>postgres<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span>  
    <span class="token keyword">case</span> <span class="token string">&quot;sqlite&quot;</span><span class="token punctuation">:</span>  
       db<span class="token punctuation">,</span> err <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span>  
    <span class="token keyword">case</span> <span class="token string">&quot;sqlserver&quot;</span><span class="token punctuation">:</span>  
       db<span class="token punctuation">,</span> err <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlserver<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span>  
    <span class="token keyword">case</span> <span class="token string">&quot;clickhouse&quot;</span><span class="token punctuation">:</span>  
       db<span class="token punctuation">,</span> err <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>clickhouse<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token comment">// 设置对应的连接池配置  </span>
    sqlDB<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> db<span class="token punctuation">,</span> err  
    <span class="token punctuation">}</span>  
  
    <span class="token keyword">if</span> config<span class="token punctuation">.</span>ConnMaxIdle <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>  
       sqlDB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ConnMaxIdle<span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span> config<span class="token punctuation">.</span>ConnMaxOpen <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>  
       sqlDB<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ConnMaxOpen<span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span> config<span class="token punctuation">.</span>ConnMaxLifetime <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>  
       liftTime<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ConnMaxLifetime<span class="token punctuation">)</span>  
       <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
          logService<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;conn max lift time error&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
             <span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">,</span>  
          <span class="token punctuation">}</span><span class="token punctuation">)</span>  
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
          sqlDB<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>liftTime<span class="token punctuation">)</span>  
       <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span> config<span class="token punctuation">.</span>ConnMaxIdletime <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>  
       idleTime<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ConnMaxIdletime<span class="token punctuation">)</span>  
       <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
          logService<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;conn max idle time error&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
             <span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">,</span>  
          <span class="token punctuation">}</span><span class="token punctuation">)</span>  
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
          sqlDB<span class="token punctuation">.</span><span class="token function">SetConnMaxIdleTime</span><span class="token punctuation">(</span>idleTime<span class="token punctuation">)</span>  
       <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
    <span class="token comment">// 挂载到map中，结束配置  </span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       app<span class="token punctuation">.</span>dbs<span class="token punctuation">[</span>config<span class="token punctuation">.</span>Dsn<span class="token punctuation">]</span> <span class="token operator">=</span> db  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> db<span class="token punctuation">,</span> err  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接入日志，<code>framework/provider/orm/logger.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// OrmLogger orm的日志实现类, 实现了gorm.Logger.Interface  </span>
<span class="token keyword">type</span> OrmLogger <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
    logger contract<span class="token punctuation">.</span>Log <span class="token comment">// 有一个logger对象存放gob的log服务  </span>
<span class="token punctuation">}</span>  
<span class="token comment">// NewOrmLogger 初始化一个ormLogger,  </span>
<span class="token keyword">func</span> <span class="token function">NewOrmLogger</span><span class="token punctuation">(</span>logger contract<span class="token punctuation">.</span>Log<span class="token punctuation">)</span> <span class="token operator">*</span>OrmLogger <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>OrmLogger<span class="token punctuation">{</span>logger<span class="token punctuation">:</span> logger<span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
<span class="token comment">// LogMode 什么都不实现，日志级别完全依赖gob的日志定义  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>OrmLogger<span class="token punctuation">)</span> <span class="token function">LogMode</span><span class="token punctuation">(</span>level logger<span class="token punctuation">.</span>LogLevel<span class="token punctuation">)</span> logger<span class="token punctuation">.</span>Interface <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> o  
<span class="token punctuation">}</span>  
<span class="token comment">// Info 对接gob的info输出  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>OrmLogger<span class="token punctuation">)</span> <span class="token function">Info</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">,</span> i <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    fields <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
       <span class="token string">&quot;fields&quot;</span><span class="token punctuation">:</span> i<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span>  
    o<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> s<span class="token punctuation">,</span> fields<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
<span class="token comment">// Warn 对接gob的Warn输出  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>OrmLogger<span class="token punctuation">)</span> <span class="token function">Warn</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">,</span> i <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    fields <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
       <span class="token string">&quot;fields&quot;</span><span class="token punctuation">:</span> i<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span>  
    o<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> s<span class="token punctuation">,</span> fields<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
<span class="token comment">// Error 对接gob的Error输出  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>OrmLogger<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">,</span> i <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    fields <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
       <span class="token string">&quot;fields&quot;</span><span class="token punctuation">:</span> i<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span>  
    o<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> s<span class="token punctuation">,</span> fields<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
<span class="token comment">// Trace 对接gob的Trace输出  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>OrmLogger<span class="token punctuation">)</span> <span class="token function">Trace</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> begin time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> fc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sql <span class="token builtin">string</span><span class="token punctuation">,</span> rowsAffected <span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    sql<span class="token punctuation">,</span> rows <span class="token operator">:=</span> <span class="token function">fc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    elapsed <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span>  
    fields <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
       <span class="token string">&quot;begin&quot;</span><span class="token punctuation">:</span> begin<span class="token punctuation">,</span>  
       <span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">,</span>  
       <span class="token string">&quot;sql&quot;</span><span class="token punctuation">:</span>   sql<span class="token punctuation">,</span>  
       <span class="token string">&quot;rows&quot;</span><span class="token punctuation">:</span>  rows<span class="token punctuation">,</span>  
       <span class="token string">&quot;time&quot;</span><span class="token punctuation">:</span>  elapsed<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span>  
  
    s <span class="token operator">:=</span> <span class="token string">&quot;orm trace sql&quot;</span>  
    o<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> s<span class="token punctuation">,</span> fields<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接入 config，<code>framework/provider/orm/config.go</code>：：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// GetBaseConfig 读取database.yaml根目录结构  </span>
<span class="token keyword">func</span> <span class="token function">GetBaseConfig</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token operator">*</span>contract<span class="token punctuation">.</span>DBConfig <span class="token punctuation">{</span>  
    configService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>  
    logService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>LogKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Log<span class="token punctuation">)</span>  
    config <span class="token operator">:=</span> <span class="token operator">&amp;</span>contract<span class="token punctuation">.</span>DBConfig<span class="token punctuation">{</span><span class="token punctuation">}</span>  
    <span class="token comment">// 直接使用配置服务的load方法读取,yaml文件  </span>
    err <span class="token operator">:=</span> configService<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;database&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token comment">// 直接使用logService来打印错误信息  </span>
       logService<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;parse database config error&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>  
       <span class="token keyword">return</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> config  
<span class="token punctuation">}</span>  
  
<span class="token comment">// WithConfigPath 加载配置文件地址  </span>
<span class="token keyword">func</span> <span class="token function">WithConfigPath</span><span class="token punctuation">(</span>configPath <span class="token builtin">string</span><span class="token punctuation">)</span> contract<span class="token punctuation">.</span>DBOption <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> config <span class="token operator">*</span>contract<span class="token punctuation">.</span>DBConfig<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
       configService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>  
       <span class="token comment">// 加载configPath配置路径  </span>
       <span class="token keyword">if</span> err <span class="token operator">:=</span> configService<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>configPath<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
          <span class="token keyword">return</span> err  
       <span class="token punctuation">}</span>  
       <span class="token keyword">return</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
<span class="token operator">...</span>
<span class="token comment">// WithGormConfig 表示自行配置Gorm的配置信息  </span>
<span class="token comment">// WithDryRun 设置空跑模式  </span>
<span class="token comment">// WithFullSaveAssociations 设置保存时候关联  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过读取 <code>database.yaml</code> 配置生成 DSN，<code>config/dev/database.yaml</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">conn_max_idle</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 通用配置，连接池最大空闲连接数  </span>
<span class="token key atrule">conn_max_open</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token comment"># 通用配置，连接池最大连接数  </span>
<span class="token key atrule">conn_max_lifetime</span><span class="token punctuation">:</span> 1h <span class="token comment"># 通用配置，连接数最大生命周期  </span>
<span class="token key atrule">protocol</span><span class="token punctuation">:</span> tcp <span class="token comment"># 通用配置，传输协议  </span>
<span class="token key atrule">loc</span><span class="token punctuation">:</span> Local <span class="token comment"># 通用配置，时区  </span>
  
<span class="token key atrule">default</span><span class="token punctuation">:</span>  
  <span class="token key atrule">driver</span><span class="token punctuation">:</span> mysql <span class="token comment"># 连接驱动  </span>
  <span class="token key atrule">dsn</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span> <span class="token comment"># dsn，如果设置了dsn, 以下的所有设置都不生效  </span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost <span class="token comment"># ip地址  </span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span> <span class="token comment"># 端口  </span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span> demo <span class="token comment"># 数据库  </span>
  <span class="token key atrule">username</span><span class="token punctuation">:</span> demo <span class="token comment"># 用户名  </span>
  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;123456&quot;</span> <span class="token comment"># 密码  </span>
  <span class="token key atrule">charset</span><span class="token punctuation">:</span> utf8mb4 <span class="token comment"># 字符集  </span>
  <span class="token key atrule">collation</span><span class="token punctuation">:</span> utf8mb4_unicode_ci <span class="token comment"># 字符序  </span>
  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s <span class="token comment"># 连接超时  </span>
  <span class="token key atrule">read_timeout</span><span class="token punctuation">:</span> 2s <span class="token comment"># 读超时  </span>
  <span class="token key atrule">write_timeout</span><span class="token punctuation">:</span> 2s <span class="token comment"># 写超时  </span>
  <span class="token key atrule">parse_time</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否解析时间  </span>
  <span class="token key atrule">protocol</span><span class="token punctuation">:</span> tcp <span class="token comment"># 传输协议  </span>
  <span class="token key atrule">loc</span><span class="token punctuation">:</span> Local <span class="token comment"># 时区  </span>
  <span class="token key atrule">conn_max_idle</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 连接池最大空闲连接数  </span>
  <span class="token key atrule">conn_max_open</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token comment"># 连接池最大连接数  </span>
  <span class="token key atrule">conn_max_lifetime</span><span class="token punctuation">:</span> 1h <span class="token comment"># 连接数最大生命周期  </span>
  
<span class="token key atrule">read</span><span class="token punctuation">:</span>  
  <span class="token key atrule">driver</span><span class="token punctuation">:</span> mysql <span class="token comment"># 连接驱动  </span>
  <span class="token key atrule">dsn</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span> <span class="token comment"># dsn，如果设置了dsn, 以下的所有设置都不生效  </span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost <span class="token comment"># ip地址  </span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span> <span class="token comment"># 端口  </span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span> demo <span class="token comment"># 数据库  </span>
  <span class="token key atrule">username</span><span class="token punctuation">:</span> demo <span class="token comment"># 用户名  </span>
  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;123456&quot;</span> <span class="token comment"># 密码  </span>
  <span class="token key atrule">charset</span><span class="token punctuation">:</span> utf8mb4 <span class="token comment"># 字符集  </span>
  <span class="token key atrule">collation</span><span class="token punctuation">:</span> utf8mb4_unicode_ci <span class="token comment"># 字符序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绑定服务，<code>main.go</code> 增加：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 绑定 orm 服务提供者</span>
	container<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>orm<span class="token punctuation">.</span>GormProvider<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码验证-13" tabindex="-1"><a class="header-anchor" href="#代码验证-13"><span>代码验证</span></a></h3><p><code>app/http/module/demo/api.go</code> 的 <code>Register</code> 内添加：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/demo/orm&quot;</span><span class="token punctuation">,</span> api<span class="token punctuation">.</span>DemoOrm<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>app/http/module/demo/model.go</code> 添加：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// User is gorm model  </span>
<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
    ID           <span class="token builtin">uint</span>  
    Name         <span class="token builtin">string</span>  
    Email        <span class="token operator">*</span><span class="token builtin">string</span>  
    Age          <span class="token builtin">uint8</span>  
    Birthday     <span class="token operator">*</span>time<span class="token punctuation">.</span>Time  
    MemberNumber sql<span class="token punctuation">.</span>NullString  
    ActivatedAt  sql<span class="token punctuation">.</span>NullTime  
    CreatedAt    time<span class="token punctuation">.</span>Time  
    UpdatedAt    time<span class="token punctuation">.</span>Time  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>app/http/module/demo/api_orm.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// DemoOrm Orm的路由方法  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>api <span class="token operator">*</span>DemoApi<span class="token punctuation">)</span> <span class="token function">DemoOrm</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    logger <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMakeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;request start&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>  
  
    <span class="token comment">// 初始化一个orm.DB  </span>
    gormService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ORMKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ORM<span class="token punctuation">)</span>  
    db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gormService<span class="token punctuation">.</span><span class="token function">GetDB</span><span class="token punctuation">(</span>orm<span class="token punctuation">.</span><span class="token function">WithConfigPath</span><span class="token punctuation">(</span><span class="token string">&quot;database.default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>  
       c<span class="token punctuation">.</span><span class="token function">AbortWithError</span><span class="token punctuation">(</span><span class="token number">50001</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  
       <span class="token keyword">return</span>  
    <span class="token punctuation">}</span>  
    db<span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  
  
    <span class="token comment">// 将User模型创建到数据库中  </span>
    err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       c<span class="token punctuation">.</span><span class="token function">AbortWithError</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  
       <span class="token keyword">return</span>  
    <span class="token punctuation">}</span>  
    logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;migrate ok&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>  
  
    <span class="token comment">// 插入一条数据  </span>
    email <span class="token operator">:=</span> <span class="token string">&quot;foo@gmail.com&quot;</span>  
    name <span class="token operator">:=</span> <span class="token string">&quot;foo&quot;</span>  
    age <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>  
    birthday <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Local<span class="token punctuation">)</span>  
    user <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span>  
       Name<span class="token punctuation">:</span>         name<span class="token punctuation">,</span>  
       Email<span class="token punctuation">:</span>        <span class="token operator">&amp;</span>email<span class="token punctuation">,</span>  
       Age<span class="token punctuation">:</span>          age<span class="token punctuation">,</span>  
       Birthday<span class="token punctuation">:</span>     <span class="token operator">&amp;</span>birthday<span class="token punctuation">,</span>  
       MemberNumber<span class="token punctuation">:</span> sql<span class="token punctuation">.</span>NullString<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  
       ActivatedAt<span class="token punctuation">:</span>  sql<span class="token punctuation">.</span>NullTime<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  
       CreatedAt<span class="token punctuation">:</span>    time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
       UpdatedAt<span class="token punctuation">:</span>    time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
    <span class="token punctuation">}</span>  
    err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span>Error  
    logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;insert user&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
       <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span>  user<span class="token punctuation">.</span>ID<span class="token punctuation">,</span>  
       <span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span>  
  
    <span class="token comment">// 更新一条数据  </span>
    user<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span>  
    err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span>Error  
    logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;update user&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
       <span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">,</span>  
       <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span>  user<span class="token punctuation">.</span>ID<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span>  
  
    <span class="token comment">// 查询一条数据  </span>
    queryUser <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> user<span class="token punctuation">.</span>ID<span class="token punctuation">}</span>  
  
    err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>queryUser<span class="token punctuation">)</span><span class="token punctuation">.</span>Error  
    logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;query user&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
       <span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span>  err<span class="token punctuation">,</span>  
       <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> queryUser<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span>  
  
    <span class="token comment">// 删除一条数据  </span>
    err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>queryUser<span class="token punctuation">)</span><span class="token punctuation">.</span>Error  
    logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;delete user&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
       <span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">,</span>  
       <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span>  user<span class="token punctuation">.</span>ID<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span>  
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>/demo/orm</code> 即可验证。</p><h2 id="_27、缓存服务" tabindex="-1"><a class="header-anchor" href="#_27、缓存服务"><span>27、缓存服务</span></a></h2><p>先封装 redis 服务，再封装通用的 cache 服务。</p><h3 id="如何实现-16" tabindex="-1"><a class="header-anchor" href="#如何实现-16"><span>如何实现</span></a></h3>`,37),Jn={href:"https://github.com/redis/go-redis",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://redis.uptrace.dev/zh/",target:"_blank",rel:"noopener noreferrer"},zn=p(`<p>服务大体操作跟引入 gorm 差不多，也是通过读取配置来初始化。</p><ul><li><code>GetBaseConfig</code> 获取 <code>redis.yaml</code> 根目录下的 Redis 配置，作为默认配置</li><li><code>WithConfigPath</code> 根据指定配置路径获取 Redis 配置</li><li><code>WithRedisConfig</code> 可以直接修改 RedisConfig 中的 <code>redis.Options</code> 配置信息</li></ul><h3 id="代码实现-18" tabindex="-1"><a class="header-anchor" href="#代码实现-18"><span>代码实现</span></a></h3><h4 id="redis-服务" tabindex="-1"><a class="header-anchor" href="#redis-服务"><span>redis 服务</span></a></h4><p>服务契约 <code>framework/contract/redis.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> RedisKey <span class="token operator">=</span> <span class="token string">&quot;gob:redis&quot;</span>  
  
<span class="token comment">// RedisService 表示一个redis服务  </span>
<span class="token keyword">type</span> RedisService <span class="token keyword">interface</span> <span class="token punctuation">{</span>  
    <span class="token comment">// GetClient 获取redis连接实例  </span>
    <span class="token function">GetClient</span><span class="token punctuation">(</span>option <span class="token operator">...</span>RedisOption<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// RedisOption 代表初始化的时候的选项  </span>
<span class="token keyword">type</span> RedisOption <span class="token keyword">func</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> config <span class="token operator">*</span>RedisConfig<span class="token punctuation">)</span> <span class="token builtin">error</span>  
  
<span class="token comment">// RedisConfig 为gob定义的Redis配置结构  </span>
<span class="token keyword">type</span> RedisConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
    <span class="token operator">*</span>redis<span class="token punctuation">.</span>Options  
<span class="token punctuation">}</span>  
  
<span class="token comment">// UniqKey 用来唯一标识一个RedisConfig配置  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>config <span class="token operator">*</span>RedisConfig<span class="token punctuation">)</span> <span class="token function">UniqKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%v_%v_%v_%v&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>Addr<span class="token punctuation">,</span> config<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> config<span class="token punctuation">.</span>Username<span class="token punctuation">,</span> config<span class="token punctuation">.</span>Network<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务提供者 <code>framework/provider/redis/provider.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> RedisProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
    c framework<span class="token punctuation">.</span>Container  
<span class="token punctuation">}</span>  
<span class="token keyword">var</span> <span class="token boolean">_</span> framework<span class="token punctuation">.</span>ServiceProvider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>RedisProvider<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>sp <span class="token operator">*</span>RedisProvider<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> contract<span class="token punctuation">.</span>RedisKey  
<span class="token punctuation">}</span>  
<span class="token keyword">func</span> <span class="token punctuation">(</span>sp <span class="token operator">*</span>RedisProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> framework<span class="token punctuation">.</span>NewInstance <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> NewRedisService  
<span class="token punctuation">}</span>  
<span class="token keyword">func</span> <span class="token punctuation">(</span>sp <span class="token operator">*</span>RedisProvider<span class="token punctuation">)</span> <span class="token function">IsDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token boolean">true</span>  
<span class="token punctuation">}</span>  
<span class="token keyword">func</span> <span class="token punctuation">(</span>sp <span class="token operator">*</span>RedisProvider<span class="token punctuation">)</span> <span class="token function">Params</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>c<span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
<span class="token keyword">func</span> <span class="token punctuation">(</span>sp <span class="token operator">*</span>RedisProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务实例 <code>framework/provider/redis/service.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// RedisService 代表框架的redis实现  </span>
<span class="token keyword">type</span> RedisService <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
    container framework<span class="token punctuation">.</span>Container      <span class="token comment">// 服务容器  </span>
    clients   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>redis<span class="token punctuation">.</span>Client <span class="token comment">// key为uniqKey, value为redis.Client (连接池）  </span>
  
    lock <span class="token operator">*</span>sync<span class="token punctuation">.</span>RWMutex  
<span class="token punctuation">}</span>  
  
<span class="token comment">// NewRedisService 代表实例化Client  </span>
<span class="token keyword">func</span> <span class="token function">NewRedisService</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    container <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span>  
    clients <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">)</span>  
    lock <span class="token operator">:=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>RWMutex<span class="token punctuation">{</span><span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>RedisService<span class="token punctuation">{</span>  
       container<span class="token punctuation">:</span> container<span class="token punctuation">,</span>  
       clients<span class="token punctuation">:</span>   clients<span class="token punctuation">,</span>  
       lock<span class="token punctuation">:</span>      lock<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// GetClient 获取Client实例  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app <span class="token operator">*</span>RedisService<span class="token punctuation">)</span> <span class="token function">GetClient</span><span class="token punctuation">(</span>option <span class="token operator">...</span>contract<span class="token punctuation">.</span>RedisOption<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 读取默认配置  </span>
    config <span class="token operator">:=</span> <span class="token function">GetBaseConfig</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>container<span class="token punctuation">)</span>  
  
    <span class="token comment">// option对opt进行修改  </span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> opt <span class="token operator">:=</span> <span class="token keyword">range</span> option <span class="token punctuation">{</span>  
       <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">opt</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>container<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
          <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err  
       <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token comment">// 如果最终的config没有设置dsn,就生成dsn  </span>
    key <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">UniqKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
  
    <span class="token comment">// 判断是否已经实例化了redis.Client  </span>
    app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">if</span> db<span class="token punctuation">,</span> ok <span class="token operator">:=</span> app<span class="token punctuation">.</span>clients<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
       app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
       <span class="token keyword">return</span> db<span class="token punctuation">,</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
    app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
  
    <span class="token comment">// 没有实例化gorm.DB，那么就要进行实例化操作  </span>
    app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">defer</span> app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
  
    <span class="token comment">// 实例化gorm.DB  </span>
    client <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Options<span class="token punctuation">)</span>  
  
    <span class="token comment">// 挂载到map中，结束配置  </span>
    app<span class="token punctuation">.</span>clients<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> client  
    <span class="token keyword">return</span> client<span class="token punctuation">,</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取配置 <code>framework/provider/redis/config.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// GetBaseConfig 读取database.yaml根目录结构  </span>
<span class="token keyword">func</span> <span class="token function">GetBaseConfig</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token operator">*</span>contract<span class="token punctuation">.</span>RedisConfig <span class="token punctuation">{</span>  
    logService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>LogKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Log<span class="token punctuation">)</span>  
    config <span class="token operator">:=</span> <span class="token operator">&amp;</span>contract<span class="token punctuation">.</span>RedisConfig<span class="token punctuation">{</span>Options<span class="token punctuation">:</span> <span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Options<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  
    opt <span class="token operator">:=</span> <span class="token function">WithConfigPath</span><span class="token punctuation">(</span><span class="token string">&quot;redis&quot;</span><span class="token punctuation">)</span>  
    err <span class="token operator">:=</span> <span class="token function">opt</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> config<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token comment">// 直接使用logService来打印错误信息  </span>
       logService<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;parse cache config error&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>  
       <span class="token keyword">return</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> config  
<span class="token punctuation">}</span>  
  
<span class="token comment">// WithConfigPath 加载配置文件地址  </span>
<span class="token keyword">func</span> <span class="token function">WithConfigPath</span><span class="token punctuation">(</span>configPath <span class="token builtin">string</span><span class="token punctuation">)</span> contract<span class="token punctuation">.</span>RedisOption <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> config <span class="token operator">*</span>contract<span class="token punctuation">.</span>RedisConfig<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
       configService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>  
       conf <span class="token operator">:=</span> configService<span class="token punctuation">.</span><span class="token function">GetStringMapString</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>  
       <span class="token comment">// 读取config配置  </span>
       <span class="token keyword">if</span> host<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;host&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
          <span class="token keyword">if</span> port<span class="token punctuation">,</span> ok1 <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;port&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok1 <span class="token punctuation">{</span>  
             config<span class="token punctuation">.</span>Addr <span class="token operator">=</span> host <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> port  
          <span class="token punctuation">}</span>  
       <span class="token punctuation">}</span>  
       <span class="token keyword">if</span> db<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;db&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
          t<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>  
          <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
             <span class="token keyword">return</span> err  
          <span class="token punctuation">}</span>  
          config<span class="token punctuation">.</span>DB <span class="token operator">=</span> t  
       <span class="token punctuation">}</span>  
  
       <span class="token keyword">if</span> username<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
          config<span class="token punctuation">.</span>Username <span class="token operator">=</span> username  
       <span class="token punctuation">}</span>  
       <span class="token keyword">if</span> password<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
          config<span class="token punctuation">.</span>Password <span class="token operator">=</span> password  
       <span class="token punctuation">}</span>  
  
       <span class="token keyword">if</span> timeout<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;timeout&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
          t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>  
          <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
             <span class="token keyword">return</span> err  
          <span class="token punctuation">}</span>  
          config<span class="token punctuation">.</span>DialTimeout <span class="token operator">=</span> t  
       <span class="token punctuation">}</span>  
       <span class="token keyword">if</span> timeout<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;read_timeout&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
          t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>  
          <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
             <span class="token keyword">return</span> err  
          <span class="token punctuation">}</span>  
          config<span class="token punctuation">.</span>ReadTimeout <span class="token operator">=</span> t  
       <span class="token punctuation">}</span>  
       <span class="token keyword">if</span> timeout<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;write_timeout&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
          t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>  
          <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
             <span class="token keyword">return</span> err  
          <span class="token punctuation">}</span>  
          config<span class="token punctuation">.</span>WriteTimeout <span class="token operator">=</span> t  
       <span class="token punctuation">}</span>  
       <span class="token keyword">if</span> cnt<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;conn_min_idle&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
          t<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>  
          <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
             <span class="token keyword">return</span> err  
          <span class="token punctuation">}</span>  
          config<span class="token punctuation">.</span>MinIdleConns <span class="token operator">=</span> t  
       <span class="token punctuation">}</span>  
       <span class="token keyword">if</span> max<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;conn_max_open&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
          t<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span>  
          <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
             <span class="token keyword">return</span> err  
          <span class="token punctuation">}</span>  
          config<span class="token punctuation">.</span>PoolSize <span class="token operator">=</span> t  
       <span class="token punctuation">}</span>  
       <span class="token keyword">if</span> timeout<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;conn_max_lifetime&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
          t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>  
          <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
             <span class="token keyword">return</span> err  
          <span class="token punctuation">}</span>  
          config<span class="token punctuation">.</span>ConnMaxLifetime <span class="token operator">=</span> t  
       <span class="token punctuation">}</span>  
       <span class="token keyword">if</span> timeout<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;conn_max_idletime&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
          t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>  
          <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
             <span class="token keyword">return</span> err  
          <span class="token punctuation">}</span>  
          config<span class="token punctuation">.</span>ConnMaxIdleTime <span class="token operator">=</span> t  
       <span class="token punctuation">}</span>  
       <span class="token keyword">return</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// WithRedisConfig 表示自行配置redis的配置信息  </span>
<span class="token keyword">func</span> <span class="token function">WithRedisConfig</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span>options <span class="token operator">*</span>contract<span class="token punctuation">.</span>RedisConfig<span class="token punctuation">)</span><span class="token punctuation">)</span> contract<span class="token punctuation">.</span>RedisOption <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> config <span class="token operator">*</span>contract<span class="token punctuation">.</span>RedisConfig<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
       <span class="token function">f</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>  
       <span class="token keyword">return</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置 <code>config/dev/redis.yaml</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s <span class="token comment"># 连接超时  </span>
<span class="token key atrule">read_timeout</span><span class="token punctuation">:</span> 2s <span class="token comment"># 读超时  </span>
<span class="token key atrule">write_timeout</span><span class="token punctuation">:</span> 2s <span class="token comment"># 写超时  </span>
  
<span class="token key atrule">write</span><span class="token punctuation">:</span>  
  <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost <span class="token comment"># ip地址  </span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span> <span class="token comment"># 端口  </span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment">#db  </span>
  <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token comment"># 用户名  </span>
  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;5233&quot;</span> <span class="token comment"># 密码  </span>
  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s <span class="token comment"># 连接超时  </span>
  <span class="token key atrule">read_timeout</span><span class="token punctuation">:</span> 2s <span class="token comment"># 读超时  </span>
  <span class="token key atrule">write_timeout</span><span class="token punctuation">:</span> 2s <span class="token comment"># 写超时  </span>
  <span class="token key atrule">conn_min_idle</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 连接池最小空闲连接数  </span>
  <span class="token key atrule">conn_max_open</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token comment"># 连接池最大连接数  </span>
  <span class="token key atrule">conn_max_lifetime</span><span class="token punctuation">:</span> 1h <span class="token comment"># 连接数最大生命周期  </span>
  <span class="token key atrule">conn_max_idletime</span><span class="token punctuation">:</span> 1h <span class="token comment"># 连接数空闲时长</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="缓存服务" tabindex="-1"><a class="header-anchor" href="#缓存服务"><span>缓存服务</span></a></h4><p>服务契约 <code>framework/contract/cache.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> CacheKey <span class="token operator">=</span> <span class="token string">&quot;gob:cache&quot;</span>  
  
<span class="token comment">// RememberFunc 缓存的Remember方法使用，Cache-Aside模式对应的对象生成方法  </span>
<span class="token keyword">type</span> RememberFunc <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>  
  
<span class="token comment">// CacheService 缓存服务  </span>
<span class="token keyword">type</span> CacheService <span class="token keyword">interface</span> <span class="token punctuation">{</span>  
    <span class="token comment">// Get 获取某个key对应的值  </span>
    <span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>  
    <span class="token comment">// GetObj 获取某个key对应的对象, 对象必须实现 https://pkg.go.dev/encoding#BinaryUnMarshaler    GetObj(ctx context.Context, key string, model interface{}) error  </span>
    <span class="token comment">// GetMany 获取某些key对应的值  </span>
    <span class="token function">GetMany</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>  
  
    <span class="token comment">// Set 设置某个key和值到缓存，带超时时间  </span>
    <span class="token function">Set</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">error</span>  
    <span class="token comment">// SetObj 设置某个key和对象到缓存, 对象必须实现 https://pkg.go.dev/encoding#BinaryMarshaler    SetObj(ctx context.Context, key string, val interface{}, timeout time.Duration) error  </span>
    <span class="token comment">// SetMany 设置多个key和值到缓存  </span>
    <span class="token function">SetMany</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> data <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">error</span>  
    <span class="token comment">// SetForever 设置某个key和值到缓存，不带超时时间  </span>
    <span class="token function">SetForever</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>  
    <span class="token comment">// SetForeverObj 设置某个key和对象到缓存，不带超时时间，对象必须实现 https://pkg.go.dev/encoding#BinaryMarshaler    SetForeverObj(ctx context.Context, key string, val interface{}) error  </span>
  
    <span class="token comment">// SetTTL 设置某个key的超时时间  </span>
    <span class="token function">SetTTL</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">error</span>  
    <span class="token comment">// GetTTL 获取某个key的超时时间  </span>
    <span class="token function">GetTTL</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>  
  
    <span class="token comment">// Remember 实现缓存的Cache-Aside模式, 先去缓存中根据key获取对象，如果有的话，返回，如果没有，调用RememberFunc 生成  </span>
    <span class="token function">Remember</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> rememberFunc RememberFunc<span class="token punctuation">,</span> model <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>  
  
    <span class="token comment">// Calc 往key对应的值中增加step计数  </span>
    <span class="token function">Calc</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> step <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>  
    <span class="token comment">// Increment 往key对应的值中增加1  </span>
    <span class="token function">Increment</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>  
    <span class="token comment">// Decrement 往key对应的值中减去1  </span>
    <span class="token function">Decrement</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>  
  
    <span class="token comment">// Del 删除某个key  </span>
    <span class="token function">Del</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>  
    <span class="token comment">// DelMany 删除某些key  </span>
    <span class="token function">DelMany</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务提供者 <code>framework/provider/cache/provider.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// CacheProvider 服务提供者  </span>
<span class="token keyword">type</span> CacheProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
    Driver <span class="token builtin">string</span> <span class="token comment">// Driver  </span>
<span class="token punctuation">}</span>  
<span class="token keyword">var</span> <span class="token boolean">_</span> framework<span class="token punctuation">.</span>ServiceProvider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>CacheProvider<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>  
  
<span class="token comment">// Register 注册一个服务实例  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>CacheProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> framework<span class="token punctuation">.</span>NewInstance <span class="token punctuation">{</span>  
    <span class="token keyword">if</span> l<span class="token punctuation">.</span>Driver <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>  
       tcs<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span>  
       <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
          <span class="token comment">// 默认使用 内存模式  </span>
          <span class="token keyword">return</span> services<span class="token punctuation">.</span>NewMemoryCache  
       <span class="token punctuation">}</span>  
  
       cs <span class="token operator">:=</span> tcs<span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>  
       l<span class="token punctuation">.</span>Driver <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>cs<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;cache.driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token comment">// 根据driver的配置项确定  </span>
    <span class="token keyword">switch</span> l<span class="token punctuation">.</span>Driver <span class="token punctuation">{</span>  
    <span class="token keyword">case</span> <span class="token string">&quot;redis&quot;</span><span class="token punctuation">:</span>  
       <span class="token keyword">return</span> services<span class="token punctuation">.</span>NewRedisCache  
    <span class="token keyword">case</span> <span class="token string">&quot;memory&quot;</span><span class="token punctuation">:</span>  
       <span class="token keyword">return</span> services<span class="token punctuation">.</span>NewMemoryCache  
    <span class="token keyword">default</span><span class="token punctuation">:</span>  
       <span class="token keyword">return</span> services<span class="token punctuation">.</span>NewMemoryCache  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// Boot 启动的时候注入  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>CacheProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
<span class="token comment">// IsDefer 是否延迟加载  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>CacheProvider<span class="token punctuation">)</span> <span class="token function">IsDefer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token boolean">true</span>  
<span class="token punctuation">}</span>  
<span class="token comment">// Params 定义要传递给实例化方法的参数  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>CacheProvider<span class="token punctuation">)</span> <span class="token function">Params</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>c<span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
<span class="token comment">// Name 定义对应的服务字符串凭证  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>CacheProvider<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> contract<span class="token punctuation">.</span>CacheKey  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务实现 <code>framework/provider/cache/services/cache.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>  
    NoneDuration <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  
<span class="token punctuation">)</span>  
<span class="token keyword">var</span> ErrKeyNotFound <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;key not found&quot;</span><span class="token punctuation">)</span>  
<span class="token keyword">var</span> ErrTypeNotOk <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;val type not ok&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>redis 服务实现 <code>framework/provider/cache/services/redis.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// RedisCache 代表Redis缓存  </span>
<span class="token keyword">type</span> RedisCache <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
    container framework<span class="token punctuation">.</span>Container  
    client    <span class="token operator">*</span>redisv9<span class="token punctuation">.</span>Client  
    
    lock      sync<span class="token punctuation">.</span>RWMutex  
<span class="token punctuation">}</span>  
  
<span class="token comment">// NewRedisCache 初始化redis服务  </span>
<span class="token keyword">func</span> <span class="token function">NewRedisCache</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    container <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> <span class="token operator">!</span>container<span class="token punctuation">.</span><span class="token function">IsBind</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>RedisKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
       err <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>RedisProvider<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  
       <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
          <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err  
       <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token comment">// 获取redis服务配置，并且实例化redis.Client  </span>
    redisService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>RedisKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>RedisService<span class="token punctuation">)</span>  
    client<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisService<span class="token punctuation">.</span><span class="token function">GetClient</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">WithConfigPath</span><span class="token punctuation">(</span><span class="token string">&quot;cache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err  
    <span class="token punctuation">}</span>  
  
    <span class="token comment">// 返回RedisCache实例  </span>
    obj <span class="token operator">:=</span> <span class="token operator">&amp;</span>RedisCache<span class="token punctuation">{</span>  
       container<span class="token punctuation">:</span> container<span class="token punctuation">,</span>  
       client<span class="token punctuation">:</span>    client<span class="token punctuation">,</span>  
       lock<span class="token punctuation">:</span>      sync<span class="token punctuation">.</span>RWMutex<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> obj<span class="token punctuation">,</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// Get 获取某个key对应的值  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RedisCache<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    val<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token comment">// 这里判断了key是否为空  </span>
    <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> redisv9<span class="token punctuation">.</span>Nil<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> val<span class="token punctuation">,</span> ErrKeyNotFound  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> val<span class="token punctuation">,</span> err  
<span class="token punctuation">}</span>  
  
<span class="token comment">// GetObj 获取某个key对应的对象, 对象必须实现 https://pkg.go.dev/encoding#BinaryUnMarshalerfunc (r *RedisCache) GetObj(ctx context.Context, key string, model interface{}) error {  </span>
    cmd <span class="token operator">:=</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> redisv9<span class="token punctuation">.</span>Nil<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> ErrKeyNotFound  
    <span class="token punctuation">}</span>  
  
    err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> err  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// GetMany 获取某些key对应的值  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RedisCache<span class="token punctuation">)</span> <span class="token function">GetMany</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    pipeline <span class="token operator">:=</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    vals <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>  
    cmds <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>redisv9<span class="token punctuation">.</span>StringCmd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span>  
  
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">{</span>  
       cmds <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cmds<span class="token punctuation">,</span> pipeline<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> pipeline<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err  
    <span class="token punctuation">}</span>  
    errs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cmd <span class="token operator">:=</span> <span class="token keyword">range</span> cmds <span class="token punctuation">{</span>  
       val<span class="token punctuation">,</span> err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
       <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
          errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
          <span class="token keyword">continue</span>  
       <span class="token punctuation">}</span>  
       key <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>  
       vals<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> vals<span class="token punctuation">,</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// Set 设置某个key和值到缓存，带超时时间  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RedisCache<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// SetObj 设置某个key和对象到缓存, 对象必须实现 https://pkg.go.dev/encoding#BinaryMarshalerfunc (r *RedisCache) SetObj(ctx context.Context, key string, val interface{}, timeout time.Duration) error {  </span>
    <span class="token keyword">return</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// SetMany 设置多个key和值到缓存  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RedisCache<span class="token punctuation">)</span> <span class="token function">SetMany</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> data <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    pipline <span class="token operator">:=</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    cmds <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>redisv9<span class="token punctuation">.</span>StatusCmd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">{</span>  
       cmds <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cmds<span class="token punctuation">,</span> pipline<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> pipline<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>  
    <span class="token keyword">return</span> err  
<span class="token punctuation">}</span>  
  
<span class="token comment">// SetForever 设置某个key和值到缓存，不带超时时间  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RedisCache<span class="token punctuation">)</span> <span class="token function">SetForever</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> NoneDuration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// SetForeverObj 设置某个key和对象到缓存，不带超时时间，对象必须实现 https://pkg.go.dev/encoding#BinaryMarshalerfunc (r *RedisCache) SetForeverObj(ctx context.Context, key string, val interface{}) error {  </span>
    <span class="token keyword">return</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> NoneDuration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// SetTTL 设置某个key的超时时间  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RedisCache<span class="token punctuation">)</span> <span class="token function">SetTTL</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Expire</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// GetTTL 获取某个key的超时时间  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RedisCache<span class="token punctuation">)</span> <span class="token function">GetTTL</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">TTL</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RedisCache<span class="token punctuation">)</span> <span class="token function">Remember</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> rememberFunc contract<span class="token punctuation">.</span>RememberFunc<span class="token punctuation">,</span> obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">GetObj</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span> <span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ErrKeyNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> err  
    <span class="token punctuation">}</span>  
  
    <span class="token comment">// key not found  </span>
    objNew<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">rememberFunc</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> r<span class="token punctuation">.</span>container<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> err  
    <span class="token punctuation">}</span>  
  
    <span class="token keyword">if</span> err <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">SetObj</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> objNew<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> err  
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span> err <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">GetObj</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> err  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RedisCache<span class="token punctuation">)</span> <span class="token function">Calc</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> step <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">IncrBy</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RedisCache<span class="token punctuation">)</span> <span class="token function">Increment</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">IncrBy</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RedisCache<span class="token punctuation">)</span> <span class="token function">Decrement</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">IncrBy</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RedisCache<span class="token punctuation">)</span> <span class="token function">Del</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Del</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RedisCache<span class="token punctuation">)</span> <span class="token function">DelMany</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    pipline <span class="token operator">:=</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    cmds <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>redisv9<span class="token punctuation">.</span>IntCmd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">{</span>  
       cmds <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cmds<span class="token punctuation">,</span> pipline<span class="token punctuation">.</span><span class="token function">Del</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> pipline<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>  
    <span class="token keyword">return</span> err  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>memory 服务实现 <code>framework/provider/cache/services/memory.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> MemoryData <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
    val        <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  
    createTime time<span class="token punctuation">.</span>Time  
    ttl        time<span class="token punctuation">.</span>Duration  
<span class="token punctuation">}</span>  
  
<span class="token keyword">type</span> MemoryCache <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
    container framework<span class="token punctuation">.</span>Container  
    data      <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>MemoryData  
    lock      sync<span class="token punctuation">.</span>RWMutex  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token function">NewMemoryCache</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    container <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span>  
    obj <span class="token operator">:=</span> <span class="token operator">&amp;</span>MemoryCache<span class="token punctuation">{</span>  
       container<span class="token punctuation">:</span> container<span class="token punctuation">,</span>  
       data<span class="token punctuation">:</span>      <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>MemoryData<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  
       lock<span class="token punctuation">:</span>      sync<span class="token punctuation">.</span>RWMutex<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> obj<span class="token punctuation">,</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">var</span> val <span class="token builtin">string</span>  
    <span class="token keyword">if</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">GetObj</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> val<span class="token punctuation">,</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">GetObj</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">defer</span> m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
  
    <span class="token keyword">if</span> md<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
       <span class="token keyword">if</span> md<span class="token punctuation">.</span>ttl <span class="token operator">!=</span> NoneDuration <span class="token punctuation">{</span>  
          <span class="token keyword">if</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>md<span class="token punctuation">.</span>createTime<span class="token punctuation">)</span> <span class="token operator">&gt;</span> md<span class="token punctuation">.</span>ttl <span class="token punctuation">{</span>  
             <span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  
             <span class="token keyword">return</span> ErrKeyNotFound  
          <span class="token punctuation">}</span>  
       <span class="token punctuation">}</span>  
  
       bt<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>md<span class="token punctuation">.</span>val<span class="token punctuation">)</span>  
       err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>bt<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>  
       <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
          <span class="token keyword">return</span> err  
       <span class="token punctuation">}</span>  
       <span class="token keyword">return</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> ErrKeyNotFound  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">GetMany</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    errs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span>  
    rets <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>  
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">{</span>  
       val<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  
       <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
          errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
          <span class="token keyword">continue</span>  
       <span class="token punctuation">}</span>  
       rets<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val  
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> rets<span class="token punctuation">,</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> rets<span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>errs<span class="token punctuation">,</span> <span class="token string">&quot;||&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">SetObj</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">SetObj</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">defer</span> m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
  
    md <span class="token operator">:=</span> <span class="token operator">&amp;</span>MemoryData<span class="token punctuation">{</span>  
       val<span class="token punctuation">:</span>        val<span class="token punctuation">,</span>  
       createTime<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
       ttl<span class="token punctuation">:</span>        timeout<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span>  
    m<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> md  
    <span class="token keyword">return</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">SetMany</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> data <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    errs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  
    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">{</span>  
       err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>  
       <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
          errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
       <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>errs<span class="token punctuation">,</span> <span class="token string">&quot;||&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">SetForever</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> NoneDuration<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">SetForeverObj</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">SetObj</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> NoneDuration<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">Remember</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> rememberFunc contract<span class="token punctuation">.</span>RememberFunc<span class="token punctuation">,</span> obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">GetObj</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span> <span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ErrKeyNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> err  
    <span class="token punctuation">}</span>  
  
    <span class="token comment">// key not found  </span>
    objNew<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">rememberFunc</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> m<span class="token punctuation">.</span>container<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> err  
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">SetObj</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> objNew<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> err  
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">GetObj</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> err  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">SetTTL</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">defer</span> m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
  
    <span class="token keyword">if</span> md<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
       md<span class="token punctuation">.</span>ttl <span class="token operator">=</span> timeout  
       <span class="token keyword">return</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> ErrKeyNotFound  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">GetTTL</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">defer</span> m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
  
    <span class="token keyword">if</span> md<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> md<span class="token punctuation">.</span>ttl<span class="token punctuation">,</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> NoneDuration<span class="token punctuation">,</span> ErrKeyNotFound  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">Calc</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> step <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">var</span> val <span class="token builtin">int64</span>  
    err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">GetObj</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span>  
    val <span class="token operator">=</span> val <span class="token operator">+</span> step  
    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       m<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val  
       <span class="token keyword">return</span> val<span class="token punctuation">,</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token keyword">if</span> <span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ErrKeyNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err  
    <span class="token punctuation">}</span>  
  
    m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">defer</span> m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token comment">// key not found  </span>
    m<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>MemoryData<span class="token punctuation">{</span>  
       val<span class="token punctuation">:</span>        val<span class="token punctuation">,</span>  
       createTime<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
       ttl<span class="token punctuation">:</span>        NoneDuration<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token keyword">return</span> val<span class="token punctuation">,</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">Increment</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">Calc</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">Decrement</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">Calc</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">Del</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">defer</span> m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  
    <span class="token keyword">return</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MemoryCache<span class="token punctuation">)</span> <span class="token function">DelMany</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">defer</span> m<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">{</span>  
       <span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件 <code>config/dev/cache.yaml</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment"># driver: memory # 连接驱动（内存缓存）  </span>
<span class="token key atrule">driver</span><span class="token punctuation">:</span> redis <span class="token comment"># 连接驱动（redis缓存）  </span>
  
<span class="token key atrule">host</span><span class="token punctuation">:</span> localhost <span class="token comment"># ip地址  </span>
<span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span> <span class="token comment"># 端口  </span>
<span class="token key atrule">db</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment">#db  </span>
<span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;5233&quot;</span> <span class="token comment"># 密码  </span>
<span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s <span class="token comment"># 连接超时  </span>
<span class="token key atrule">read_timeout</span><span class="token punctuation">:</span> 2s <span class="token comment"># 读超时  </span>
<span class="token key atrule">write_timeout</span><span class="token punctuation">:</span> 2s <span class="token comment"># 写超时</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="挂载服务" tabindex="-1"><a class="header-anchor" href="#挂载服务"><span>挂载服务</span></a></h4><p><code>main.go</code>，添加：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>container<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>RedisProvider<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                  <span class="token comment">// 绑定 redis 服务提供者  </span>
container<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cache<span class="token punctuation">.</span>CacheProvider<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                  <span class="token comment">// 绑定 缓存 服务提供者</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码验证-14" tabindex="-1"><a class="header-anchor" href="#代码验证-14"><span>代码验证</span></a></h3><p>接口定义 <code>app/http/module/demo/api_cache.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// DemoRedis redis的路由方法  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>api <span class="token operator">*</span>DemoApi<span class="token punctuation">)</span> <span class="token function">DemoRedis</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    logger <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMakeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;request start&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>  
  
    <span class="token comment">// 初始化一个redis  </span>
    redisService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>RedisKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>RedisService<span class="token punctuation">)</span>  
    client<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisService<span class="token punctuation">.</span><span class="token function">GetClient</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">WithConfigPath</span><span class="token punctuation">(</span><span class="token string">&quot;cache.default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> redis<span class="token punctuation">.</span><span class="token function">WithRedisConfig</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>options <span class="token operator">*</span>contract<span class="token punctuation">.</span>RedisConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
       options<span class="token punctuation">.</span>MaxRetries <span class="token operator">=</span> <span class="token number">3</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>  
       c<span class="token punctuation">.</span><span class="token function">AbortWithError</span><span class="token punctuation">(</span><span class="token number">50001</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  
       <span class="token keyword">return</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       c<span class="token punctuation">.</span><span class="token function">AbortWithError</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  
       <span class="token keyword">return</span>  
    <span class="token punctuation">}</span>  
    val <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;redis get&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
       <span class="token string">&quot;val&quot;</span><span class="token punctuation">:</span> val<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span>  
  
    <span class="token keyword">if</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Del</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       c<span class="token punctuation">.</span><span class="token function">AbortWithError</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  
       <span class="token keyword">return</span>  
    <span class="token punctuation">}</span>  
  
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
    Name <span class="token builtin">string</span>  
    Age  <span class="token builtin">int</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">UnmarshalBinary</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  
    err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;解码失败: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
<span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">MarshalBinary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;编码失败: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> data<span class="token punctuation">,</span> <span class="token boolean">nil</span>  
<span class="token punctuation">}</span>  
  
<span class="token comment">// DemoCache cache的简单例子  </span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>api <span class="token operator">*</span>DemoApi<span class="token punctuation">)</span> <span class="token function">DemoCache</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    logger <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMakeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;request start&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>  
    <span class="token comment">// 初始化cache服务  </span>
    cacheService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>CacheKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>CacheService<span class="token punctuation">)</span>  
    <span class="token comment">// 设置key为foo  </span>
    err <span class="token operator">:=</span> cacheService<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       c<span class="token punctuation">.</span><span class="token function">AbortWithError</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  
       <span class="token keyword">return</span>  
    <span class="token punctuation">}</span>  
    <span class="token comment">// 获取key为foo  </span>
    val<span class="token punctuation">,</span> err <span class="token operator">:=</span> cacheService<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       c<span class="token punctuation">.</span><span class="token function">AbortWithError</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  
       <span class="token keyword">return</span>  
    <span class="token punctuation">}</span>  
    logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;cache get&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
       <span class="token string">&quot;val&quot;</span><span class="token punctuation">:</span> val<span class="token punctuation">,</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span>  
    <span class="token comment">// 删除key为foo  </span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> cacheService<span class="token punctuation">.</span><span class="token function">Del</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       c<span class="token punctuation">.</span><span class="token function">AbortWithError</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  
       <span class="token keyword">return</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token comment">// 定义回调函数，用于生成缓存内容  </span>
    rememberFunc <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> container framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
       <span class="token comment">// 在这里可以查询数据库或执行其他操作来获取缓存的内容  </span>
       <span class="token comment">// 这里仅做示例，直接将内容赋值给模型对象  </span>
       model <span class="token operator">:=</span> Person<span class="token punctuation">{</span><span class="token punctuation">}</span>  
       model<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span>  
       model<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">25</span>  
       <span class="token keyword">return</span> model<span class="token punctuation">,</span> <span class="token boolean">nil</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token comment">// 创建一个模型对象，用于存储缓存的内容  </span>
    model <span class="token operator">:=</span> <span class="token operator">&amp;</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span>  
    err <span class="token operator">=</span> cacheService<span class="token punctuation">.</span><span class="token function">Remember</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;fooR&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">,</span> rememberFunc<span class="token punctuation">,</span> model<span class="token punctuation">)</span>  
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
       c<span class="token punctuation">.</span><span class="token function">AbortWithError</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  
       <span class="token keyword">return</span>  
    <span class="token punctuation">}</span>  
    logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;cache remember&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  
       <span class="token string">&quot;model&quot;</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v&quot;</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">,</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span>  
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册接口 <code>app/http/module/demo/api.go</code> 添加：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/demo/redis&quot;</span><span class="token punctuation">,</span> api<span class="token punctuation">.</span>DemoRedis<span class="token punctuation">)</span>  
r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/demo/cache&quot;</span><span class="token punctuation">,</span> api<span class="token punctuation">.</span>DemoCache<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>验证：</p><p>运行 app 并访问 <code>/demo/redis</code> 与 <code>/demo/cache</code> 进行验证</p><h2 id="_28、ssh-发布自动化" tabindex="-1"><a class="header-anchor" href="#_28、ssh-发布自动化"><span>28、SSH：发布自动化</span></a></h2><p>框架发布自动化，可以实现开发后直接更新目标服务器应用。</p><h3 id="如何实现-17" tabindex="-1"><a class="header-anchor" href="#如何实现-17"><span>如何实现</span></a></h3>`,40),Qn={href:"https://golang.org/x/crypto/ssh",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://github.com/pkg/sftp",target:"_blank",rel:"noopener noreferrer"},Yn=p(`<h3 id="代码实现-19" tabindex="-1"><a class="header-anchor" href="#代码实现-19"><span>代码实现</span></a></h3><h4 id="引入-ssh" tabindex="-1"><a class="header-anchor" href="#引入-ssh"><span>引入 ssh</span></a></h4><p>服务契约，<code>framework/contract/ssh.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> SSHKey <span class="token operator">=</span> <span class="token string">&quot;gob:ssh&quot;</span>

<span class="token comment">// SSHService 表示一个ssh服务</span>
<span class="token keyword">type</span> SSHService <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// GetClient 获取ssh连接实例</span>
	<span class="token function">GetClient</span><span class="token punctuation">(</span>option <span class="token operator">...</span>SSHOption<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ssh<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// SSHOption 代表初始化的时候的选项</span>
<span class="token keyword">type</span> SSHOption <span class="token keyword">func</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> config <span class="token operator">*</span>SSHConfig<span class="token punctuation">)</span> <span class="token builtin">error</span>

<span class="token comment">// SSHConfig 为gob定义的SSH配置结构</span>
<span class="token keyword">type</span> SSHConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	NetWork <span class="token builtin">string</span>
	Host    <span class="token builtin">string</span>
	Port    <span class="token builtin">string</span>
	<span class="token operator">*</span>ssh<span class="token punctuation">.</span>ClientConfig
<span class="token punctuation">}</span>

<span class="token comment">// UniqKey 用来唯一标识一个SSHConfig配置</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>config <span class="token operator">*</span>SSHConfig<span class="token punctuation">)</span> <span class="token function">UniqKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%v_%v_%v&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>Host<span class="token punctuation">,</span> config<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> config<span class="token punctuation">.</span>User<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务提供者，<code>framework/provider/ssh/provider.go</code> 直接用生成的，延迟加载。</p><p>实现，<code>framework/provider/ssh/service.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> SSHService <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	container framework<span class="token punctuation">.</span>Container    <span class="token comment">// 服务容器</span>
	clients   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>ssh<span class="token punctuation">.</span>Client <span class="token comment">// key为uniqKey, value为ssh.Client(连接池）</span>
	lock <span class="token operator">*</span>sync<span class="token punctuation">.</span>RWMutex
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewSSHService</span><span class="token punctuation">(</span>params <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	container <span class="token operator">:=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span>
	clients <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>ssh<span class="token punctuation">.</span>Client<span class="token punctuation">)</span>
	lock <span class="token operator">:=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>RWMutex<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>SSHService<span class="token punctuation">{</span>
		container<span class="token punctuation">:</span> container<span class="token punctuation">,</span>
		clients<span class="token punctuation">:</span>   clients<span class="token punctuation">,</span>
		lock<span class="token punctuation">:</span>      lock<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// GetClient 获取Client实例</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>app <span class="token operator">*</span>SSHService<span class="token punctuation">)</span> <span class="token function">GetClient</span><span class="token punctuation">(</span>option <span class="token operator">...</span>contract<span class="token punctuation">.</span>SSHOption<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ssh<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	logService <span class="token operator">:=</span> app<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>LogKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Log<span class="token punctuation">)</span>
	<span class="token comment">// 读取默认配置</span>
	config <span class="token operator">:=</span> <span class="token function">GetBaseConfig</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>container<span class="token punctuation">)</span>
	<span class="token comment">// option对opt进行修改</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> opt <span class="token operator">:=</span> <span class="token keyword">range</span> option <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">opt</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>container<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 如果最终的config没有设置dsn,就生成dsn</span>
	key <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">UniqKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 判断是否已经实例化了</span>
	app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> db<span class="token punctuation">,</span> ok <span class="token operator">:=</span> app<span class="token punctuation">.</span>clients<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> db<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 没有实例化,那么就要进行实例化操作</span>
	app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> app<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 实例化</span>
	addr <span class="token operator">:=</span> config<span class="token punctuation">.</span>Host <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> config<span class="token punctuation">.</span>Port
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> ssh<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>NetWork<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> config<span class="token punctuation">.</span>ClientConfig<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		logService<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;ssh dial error&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
			<span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span>  err<span class="token punctuation">,</span>
			<span class="token string">&quot;addr&quot;</span><span class="token punctuation">:</span> addr<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 挂载到map中，结束配置</span>
	app<span class="token punctuation">.</span>clients<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> client
	<span class="token keyword">return</span> client<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置，<code>framework/provider/ssh/config.go</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// GetBaseConfig 读取database.yaml根目录结构</span>
<span class="token keyword">func</span> <span class="token function">GetBaseConfig</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token operator">*</span>contract<span class="token punctuation">.</span>SSHConfig <span class="token punctuation">{</span>
	logService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>LogKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Log<span class="token punctuation">)</span>
	config <span class="token operator">:=</span> <span class="token operator">&amp;</span>contract<span class="token punctuation">.</span>SSHConfig<span class="token punctuation">{</span>ClientConfig<span class="token punctuation">:</span> <span class="token operator">&amp;</span>ssh<span class="token punctuation">.</span>ClientConfig<span class="token punctuation">{</span>Auth<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ssh<span class="token punctuation">.</span>AuthMethod<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> HostKeyCallback<span class="token punctuation">:</span> ssh<span class="token punctuation">.</span><span class="token function">InsecureIgnoreHostKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
	opt <span class="token operator">:=</span> <span class="token function">WithConfigPath</span><span class="token punctuation">(</span><span class="token string">&quot;ssh&quot;</span><span class="token punctuation">)</span>
	err <span class="token operator">:=</span> <span class="token function">opt</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> config<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// 直接使用logService来打印错误信息</span>
		logService<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;parse cache config error&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
			<span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> config
<span class="token punctuation">}</span>

<span class="token comment">// WithConfigPath 加载配置文件地址</span>
<span class="token keyword">func</span> <span class="token function">WithConfigPath</span><span class="token punctuation">(</span>configPath <span class="token builtin">string</span><span class="token punctuation">)</span> contract<span class="token punctuation">.</span>SSHOption <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> config <span class="token operator">*</span>contract<span class="token punctuation">.</span>SSHConfig<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		configService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
		logService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>LogKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Log<span class="token punctuation">)</span>
		conf <span class="token operator">:=</span> configService<span class="token punctuation">.</span><span class="token function">GetStringMapString</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
		<span class="token comment">// 读取config配置</span>
		<span class="token keyword">if</span> network<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;network&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			config<span class="token punctuation">.</span>NetWork <span class="token operator">=</span> network
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> host<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;host&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			config<span class="token punctuation">.</span>Host <span class="token operator">=</span> host
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> port<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;port&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			config<span class="token punctuation">.</span>Port <span class="token operator">=</span> port
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> username<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			config<span class="token punctuation">.</span>User <span class="token operator">=</span> username
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> password<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			authPwd <span class="token operator">:=</span> ssh<span class="token punctuation">.</span><span class="token function">Password</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>
			config<span class="token punctuation">.</span>Auth <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Auth<span class="token punctuation">,</span> authPwd<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> rsaKey<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;rsa_key&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			key<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>rsaKey<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				logService<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;read rsa_key error&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
					<span class="token string">&quot;key&quot;</span><span class="token punctuation">:</span>  rsaKey<span class="token punctuation">,</span>
					<span class="token string">&quot;path&quot;</span><span class="token punctuation">:</span> configPath<span class="token punctuation">,</span>
					<span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span>  err<span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			signer<span class="token punctuation">,</span> err <span class="token operator">:=</span> ssh<span class="token punctuation">.</span><span class="token function">ParsePrivateKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				logService<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;create rsa_key signer error&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
					<span class="token string">&quot;key&quot;</span><span class="token punctuation">:</span>  rsaKey<span class="token punctuation">,</span>
					<span class="token string">&quot;path&quot;</span><span class="token punctuation">:</span> configPath<span class="token punctuation">,</span>
					<span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span>  err<span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			rsaKeyAuth <span class="token operator">:=</span> ssh<span class="token punctuation">.</span><span class="token function">PublicKeys</span><span class="token punctuation">(</span>signer<span class="token punctuation">)</span>
			config<span class="token punctuation">.</span>Auth <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Auth<span class="token punctuation">,</span> rsaKeyAuth<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> knownHosts<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;known_host&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			hostKeyCallback<span class="token punctuation">,</span> err <span class="token operator">:=</span> knownhosts<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>knownHosts<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				logService<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;knownhosts error&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
					<span class="token string">&quot;key&quot;</span><span class="token punctuation">:</span>  knownHosts<span class="token punctuation">,</span>
					<span class="token string">&quot;path&quot;</span><span class="token punctuation">:</span> configPath<span class="token punctuation">,</span>
					<span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span>  err<span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			config<span class="token punctuation">.</span>HostKeyCallback <span class="token operator">=</span> hostKeyCallback
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> timeout<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conf<span class="token punctuation">[</span><span class="token string">&quot;timeout&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			config<span class="token punctuation">.</span>Timeout <span class="token operator">=</span> t
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// WithSSHConfig 表示自行配置redis的配置信息</span>
<span class="token keyword">func</span> <span class="token function">WithSSHConfig</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span>options <span class="token operator">*</span>contract<span class="token punctuation">.</span>SSHConfig<span class="token punctuation">)</span><span class="token punctuation">)</span> contract<span class="token punctuation">.</span>SSHOption <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> config <span class="token operator">*</span>contract<span class="token punctuation">.</span>SSHConfig<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token function">f</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件，<code>config/dev/ssh.yaml</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">timeout</span><span class="token punctuation">:</span> 1s
<span class="token key atrule">network</span><span class="token punctuation">:</span> tcp
<span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.159.128
<span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">22</span>
<span class="token key atrule">username</span><span class="token punctuation">:</span> demo
<span class="token key atrule">web-pwd</span><span class="token punctuation">:</span>
  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;123456&quot;</span>
<span class="token key atrule">web-key</span><span class="token punctuation">:</span>
  <span class="token key atrule">rsa_key</span><span class="token punctuation">:</span> <span class="token string">&quot;C:/Users/99452/.ssh/id_rsa_manjarovm_demo_key&quot;</span>
  <span class="token key atrule">known_hosts</span><span class="token punctuation">:</span> <span class="token string">&quot;C:/Users/99452/.ssh/known_hosts&quot;</span>
<span class="token key atrule">web-ubuntu</span><span class="token punctuation">:</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.159.129
  <span class="token key atrule">username</span><span class="token punctuation">:</span> cbh
  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;5233&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现-deploy-命令" tabindex="-1"><a class="header-anchor" href="#实现-deploy-命令"><span>实现 deploy 命令</span></a></h4><p>命令 <code>framework/command/deploy.go</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> deploySkipBuild <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 跳过编译环节</span>
<span class="token comment">// initDeployCommand 为自动化部署的命令</span>
<span class="token keyword">func</span> <span class="token function">initDeployCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	deployFrontendCommand<span class="token punctuation">.</span><span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BoolVarP</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>deploySkipBuild<span class="token punctuation">,</span> <span class="token string">&quot;skip-build&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;s&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;跳过构建环节&quot;</span><span class="token punctuation">)</span>
	deployAllCommand<span class="token punctuation">.</span><span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BoolVarP</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>deploySkipBuild<span class="token punctuation">,</span> <span class="token string">&quot;skip-build&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;s&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;跳过构建环节&quot;</span><span class="token punctuation">)</span>
	deployCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>deployFrontendCommand<span class="token punctuation">)</span>
	deployCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>deployBackendCommand<span class="token punctuation">)</span>
	deployCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>deployAllCommand<span class="token punctuation">)</span>
	deployCommand<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>deployRollbackCommand<span class="token punctuation">)</span>
	<span class="token keyword">return</span> deployCommand
<span class="token punctuation">}</span>

<span class="token comment">// deployCommand 一级命令，显示帮助信息</span>
<span class="token keyword">var</span> deployCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;deploy&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;部署相关命令&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// deployFrontendCommand 部署前端</span>
<span class="token keyword">var</span> deployFrontendCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;frontend&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;部署前端&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 创建部署文件夹</span>
		deployFolder<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">createDeployFolder</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 编译前端到部署文件夹</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">deployBuildFrontend</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> deployFolder<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 上传部署文件夹并执行对应的shell</span>
		<span class="token keyword">return</span> <span class="token function">deployUploadAction</span><span class="token punctuation">(</span>deployFolder<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token string">&quot;frontend&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// deployBackendCommand 部署后端</span>
<span class="token keyword">var</span> deployBackendCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;backend&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;部署后端&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 创建部署文件夹</span>
		deployFolder<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">createDeployFolder</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 编译后端到部署文件夹</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">deployBuildBackend</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> deployFolder<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 上传部署文件夹并执行对应的shell</span>
		<span class="token keyword">return</span> <span class="token function">deployUploadAction</span><span class="token punctuation">(</span>deployFolder<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token string">&quot;backend&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> deployAllCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;全部部署&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		deployFolder<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">createDeployFolder</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 编译前端</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">deployBuildFrontend</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> deployFolder<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 编译后端</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">deployBuildBackend</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> deployFolder<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 上传前端+后端，并执行对应的shell</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">deployUploadAction</span><span class="token punctuation">(</span>deployFolder<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// deployRollbackCommand 部署回滚</span>
<span class="token keyword">var</span> deployRollbackCommand <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
	Use<span class="token punctuation">:</span>   <span class="token string">&quot;rollback&quot;</span><span class="token punctuation">,</span>
	Short<span class="token punctuation">:</span> <span class="token string">&quot;部署回滚&quot;</span><span class="token punctuation">,</span>
	RunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;参数错误,请按照参数进行回滚 ./gob deploy rollback [version] [frontend/backend/all]&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		version <span class="token operator">:=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		end <span class="token operator">:=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
		<span class="token comment">// 获取版本信息</span>
		appService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>
		deployFolder <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>appService<span class="token punctuation">.</span><span class="token function">DeployFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span>
		<span class="token comment">// 上传部署文件夹并执行对应的shell</span>
		<span class="token keyword">return</span> <span class="token function">deployUploadAction</span><span class="token punctuation">(</span>deployFolder<span class="token punctuation">,</span> container<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">deployBuildBackend</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> deployFolder <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	configService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
	appService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>
	envService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>EnvKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Env<span class="token punctuation">)</span>
	logger <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>LogKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Log<span class="token punctuation">)</span>
	
	env <span class="token operator">:=</span> envService<span class="token punctuation">.</span><span class="token function">AppEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	binFile <span class="token operator">:=</span> <span class="token string">&quot;gob&quot;</span>

	<span class="token comment">// 编译后端</span>
	path<span class="token punctuation">,</span> err <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">LookPath</span><span class="token punctuation">(</span><span class="token string">&quot;go&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;gob go: 请在Path路径中先安装go&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	deployBinFile <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>deployFolder<span class="token punctuation">,</span> binFile<span class="token punctuation">)</span>
	cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-o&quot;</span><span class="token punctuation">,</span> deployBinFile<span class="token punctuation">,</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">)</span>
	cmd<span class="token punctuation">.</span>Env <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Environ</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 设置GOOS和GOARCH</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.backend.goos&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		cmd<span class="token punctuation">.</span>Env <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>Env<span class="token punctuation">,</span> <span class="token string">&quot;GOOS=&quot;</span><span class="token operator">+</span>configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.backend.goos&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.backend.goarch&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		cmd<span class="token punctuation">.</span>Env <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>Env<span class="token punctuation">,</span> <span class="token string">&quot;GOARCH=&quot;</span><span class="token operator">+</span>configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.backend.goarch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 执行命令</span>
	ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	out<span class="token punctuation">,</span> err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">CombinedOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;go build err&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
			<span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">,</span>
			<span class="token string">&quot;out&quot;</span><span class="token punctuation">:</span> <span class="token function">string</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;后端编译成功&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>

	<span class="token comment">// 复制.env文件</span>
	<span class="token keyword">if</span> util<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>appService<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;.env&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">CopyFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>appService<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;.env&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>deployFolder<span class="token punctuation">,</span> <span class="token string">&quot;.env&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 复制config文件</span>
	deployConfigFolder <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>deployFolder<span class="token punctuation">,</span> <span class="token string">&quot;config&quot;</span><span class="token punctuation">,</span> env<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>util<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>deployConfigFolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span>deployConfigFolder<span class="token punctuation">,</span> os<span class="token punctuation">.</span>ModePerm<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">CopyFolder</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>appService<span class="token punctuation">.</span><span class="token function">ConfigFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">,</span> deployConfigFolder<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>

	logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;build local ok&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 上传部署文件夹，并且执行对应的前置和后置的shell</span>
<span class="token keyword">func</span> <span class="token function">deployUploadAction</span><span class="token punctuation">(</span>deployFolder <span class="token builtin">string</span><span class="token punctuation">,</span> container framework<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> end <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	configService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
	sshService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>SSHKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>SSHService<span class="token punctuation">)</span>
	logger <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>LogKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Log<span class="token punctuation">)</span>

	<span class="token comment">// 遍历所有deploy的服务器</span>
	deployNodes <span class="token operator">:=</span> configService<span class="token punctuation">.</span><span class="token function">GetStringSlice</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.connections&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>deployNodes<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;deploy connections len is zero&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	remoteFolder <span class="token operator">:=</span> configService<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.remote_folder&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> remoteFolder <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;remote folder is empty&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	preActions <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	postActions <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> end <span class="token operator">==</span> <span class="token string">&quot;frontend&quot;</span> <span class="token operator">||</span> end <span class="token operator">==</span> <span class="token string">&quot;all&quot;</span> <span class="token punctuation">{</span>
		preActions <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>preActions<span class="token punctuation">,</span> configService<span class="token punctuation">.</span><span class="token function">GetStringSlice</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.frontend.pre_action&quot;</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>
		postActions <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>postActions<span class="token punctuation">,</span> configService<span class="token punctuation">.</span><span class="token function">GetStringSlice</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.frontend.post_action&quot;</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> end <span class="token operator">==</span> <span class="token string">&quot;backend&quot;</span> <span class="token operator">||</span> end <span class="token operator">==</span> <span class="token string">&quot;all&quot;</span> <span class="token punctuation">{</span>
		preActions <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>preActions<span class="token punctuation">,</span> configService<span class="token punctuation">.</span><span class="token function">GetStringSlice</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.backend.pre_action&quot;</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>
		postActions <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>postActions<span class="token punctuation">,</span> configService<span class="token punctuation">.</span><span class="token function">GetStringSlice</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.backend.post_action&quot;</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 对每个远端服务</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> node <span class="token operator">:=</span> <span class="token keyword">range</span> deployNodes <span class="token punctuation">{</span>
		sshClient<span class="token punctuation">,</span> err <span class="token operator">:=</span> sshService<span class="token punctuation">.</span><span class="token function">GetClient</span><span class="token punctuation">(</span>ssh<span class="token punctuation">.</span><span class="token function">WithConfigPath</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		client<span class="token punctuation">,</span> err <span class="token operator">:=</span> sftp<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>sshClient<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 执行所有的前置命令</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> action <span class="token operator">:=</span> <span class="token keyword">range</span> preActions <span class="token punctuation">{</span>
			<span class="token comment">// 创建session</span>
			session<span class="token punctuation">,</span> err <span class="token operator">:=</span> sshClient<span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;execute pre action start&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
				<span class="token string">&quot;cmd&quot;</span><span class="token punctuation">:</span>        action<span class="token punctuation">,</span>
				<span class="token string">&quot;connection&quot;</span><span class="token punctuation">:</span> node<span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token comment">// 执行命令，并且等待返回</span>
			bts<span class="token punctuation">,</span> err <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">CombinedOutput</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token string">&quot;rm&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				session<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			session<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">// 执行前置命令成功</span>
			logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;execute pre action&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
				<span class="token string">&quot;cmd&quot;</span><span class="token punctuation">:</span>        action<span class="token punctuation">,</span>
				<span class="token string">&quot;connection&quot;</span><span class="token punctuation">:</span> node<span class="token punctuation">,</span>
				<span class="token string">&quot;out&quot;</span><span class="token punctuation">:</span>        strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>bts<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">uploadFolderToSFTP</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> deployFolder<span class="token punctuation">,</span> remoteFolder<span class="token punctuation">,</span> client<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;upload folder failed&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
				<span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;upload folder success&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>

		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> action <span class="token operator">:=</span> <span class="token keyword">range</span> postActions <span class="token punctuation">{</span>
			session<span class="token punctuation">,</span> err <span class="token operator">:=</span> sshClient<span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;execute post action start&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
				<span class="token string">&quot;cmd&quot;</span><span class="token punctuation">:</span>        action<span class="token punctuation">,</span>
				<span class="token string">&quot;connection&quot;</span><span class="token punctuation">:</span> node<span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
			bts<span class="token punctuation">,</span> err <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">CombinedOutput</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;execute post action err&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
					<span class="token string">&quot;cmd&quot;</span><span class="token punctuation">:</span>        action<span class="token punctuation">,</span>
					<span class="token string">&quot;connection&quot;</span><span class="token punctuation">:</span> node<span class="token punctuation">,</span>
					<span class="token string">&quot;out&quot;</span><span class="token punctuation">:</span>        strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>bts<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span>
				session<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;execute post action finish&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
				<span class="token string">&quot;cmd&quot;</span><span class="token punctuation">:</span>        action<span class="token punctuation">,</span>
				<span class="token string">&quot;connection&quot;</span><span class="token punctuation">:</span> node<span class="token punctuation">,</span>
				<span class="token string">&quot;out&quot;</span><span class="token punctuation">:</span>        strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>bts<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
			session<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 上传部署文件夹</span>
<span class="token keyword">func</span> <span class="token function">uploadFolderToSFTP</span><span class="token punctuation">(</span>container framework<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> localFolder<span class="token punctuation">,</span> remoteFolder <span class="token builtin">string</span><span class="token punctuation">,</span> client <span class="token operator">*</span>sftp<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	logger <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>LogKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Log<span class="token punctuation">)</span>
	config <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>ConfigKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>

	<span class="token comment">// 遍历本地文件</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span>localFolder<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info os<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token comment">// 获取除了folder前缀的后续文件名称</span>
		relPath <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> localFolder<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> relPath <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 这里做一道转换</span>
		remoteFile <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>remoteFolder<span class="token punctuation">,</span> relPath<span class="token punctuation">)</span>
		<span class="token keyword">if</span> config<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.backend.goos&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;linux&quot;</span> <span class="token punctuation">{</span>
			remoteFile <span class="token operator">=</span> filepath<span class="token punctuation">.</span><span class="token function">ToSlash</span><span class="token punctuation">(</span>remoteFile<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果是遍历到了一个目录</span>
		<span class="token keyword">if</span> info<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;mkdir: &quot;</span><span class="token operator">+</span>remoteFile<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token comment">// 创建这个目录</span>
			<span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span>remoteFile<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 打开本地的文件</span>
		rf<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>localFolder<span class="token punctuation">,</span> relPath<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;read file &quot;</span> <span class="token operator">+</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>localFolder<span class="token punctuation">,</span> relPath<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; error:&quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">defer</span> rf<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 检查文件大小</span>
		rfStat<span class="token punctuation">,</span> err <span class="token operator">:=</span> rf<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 打开/创建远端文件</span>
		f<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>remoteFile<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;create file &quot;</span> <span class="token operator">+</span> remoteFile <span class="token operator">+</span> <span class="token string">&quot; error:&quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 大于2M的文件显示进度</span>
		<span class="token keyword">if</span> rfStat<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span> <span class="token punctuation">{</span>
			logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;upload local file: &quot;</span><span class="token operator">+</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>localFolder<span class="token punctuation">,</span> relPath<span class="token punctuation">)</span><span class="token operator">+</span>
				<span class="token string">&quot; to remote file: &quot;</span><span class="token operator">+</span>remoteFile<span class="token operator">+</span><span class="token string">&quot; start&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token comment">// 开启一个goroutine来不断计算进度</span>
			<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>localFile<span class="token punctuation">,</span> remoteFile <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 每1s计算一次</span>
				ticker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
				<span class="token keyword">for</span> <span class="token keyword">range</span> ticker<span class="token punctuation">.</span>C <span class="token punctuation">{</span>
					<span class="token comment">// 获取远端文件信息</span>
					remoteFileInfo<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>remoteFile<span class="token punctuation">)</span>
					<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
						logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;stat error&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
							<span class="token string">&quot;err&quot;</span><span class="token punctuation">:</span>         err<span class="token punctuation">,</span>
							<span class="token string">&quot;remote_file&quot;</span><span class="token punctuation">:</span> remoteFile<span class="token punctuation">,</span>
						<span class="token punctuation">}</span><span class="token punctuation">)</span>
						<span class="token keyword">continue</span>
					<span class="token punctuation">}</span>
					<span class="token comment">// 如果远端文件大小等于本地文件大小，说明已经结束了</span>
					size <span class="token operator">:=</span> remoteFileInfo<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token keyword">if</span> size <span class="token operator">&gt;=</span> rfStat<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token keyword">break</span>
					<span class="token punctuation">}</span>
					<span class="token comment">// 计算进度并且打印进度</span>
					percent <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>size <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">/</span> rfStat<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
					logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;upload local file: &quot;</span><span class="token operator">+</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>localFolder<span class="token punctuation">,</span> relPath<span class="token punctuation">)</span><span class="token operator">+</span>
						<span class="token string">&quot; to remote file: &quot;</span><span class="token operator">+</span>remoteFile<span class="token operator">+</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot; %v%% %v/%v&quot;</span><span class="token punctuation">,</span> percent<span class="token punctuation">,</span> size<span class="token punctuation">,</span> rfStat<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>localFolder<span class="token punctuation">,</span> relPath<span class="token punctuation">)</span><span class="token punctuation">,</span> remoteFile<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 将本地文件并发读取到远端文件</span>
		<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">ReadFromWithConcurrency</span><span class="token punctuation">(</span>rf<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;Write file &quot;</span> <span class="token operator">+</span> remoteFile <span class="token operator">+</span> <span class="token string">&quot; error:&quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 记录成功信息</span>
		logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;upload local file: &quot;</span><span class="token operator">+</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>localFolder<span class="token punctuation">,</span> relPath<span class="token punctuation">)</span><span class="token operator">+</span>
			<span class="token string">&quot; to remote file: &quot;</span><span class="token operator">+</span>remoteFile<span class="token operator">+</span><span class="token string">&quot; finish&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">deployBuildFrontend</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> deployFolder <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	container <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	appService <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>deploySkipBuild <span class="token punctuation">{</span>
		<span class="token comment">// 编译前端</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> buildFrontendCommand<span class="token punctuation">.</span><span class="token function">RunE</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 复制前端文件到deploy文件夹</span>
	frontendFolder <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>deployFolder<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span>frontendFolder<span class="token punctuation">,</span> os<span class="token punctuation">.</span>ModePerm<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	buildFolder <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>appService<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;gob_frontend/dist&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">CopyFolder</span><span class="token punctuation">(</span>buildFolder<span class="token punctuation">,</span> frontendFolder<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建部署的folder</span>
<span class="token keyword">func</span> <span class="token function">createDeployFolder</span><span class="token punctuation">(</span>c framework<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	appService <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MustMake</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>AppKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>App<span class="token punctuation">)</span>
	deployFolder <span class="token operator">:=</span> appService<span class="token punctuation">.</span><span class="token function">DeployFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	deployVersion <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;20060102150405&quot;</span><span class="token punctuation">)</span>
	versionFolder <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>deployFolder<span class="token punctuation">,</span> deployVersion<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>util<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>versionFolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> versionFolder<span class="token punctuation">,</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span>versionFolder<span class="token punctuation">,</span> os<span class="token punctuation">.</span>ModePerm<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> versionFolder<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时新增：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">////////////////////   \`framework/contract/app.go\` 新增：</span>

<span class="token comment">// DeployFolder 存放部署的时候创建的文件夹  </span>
<span class="token function">DeployFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>

<span class="token comment">////////////////////   \`framework/provider/app/service.go\` 新增：</span>

<span class="token comment">// DeployFolder 定义部署文件夹信息</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s AppService<span class="token punctuation">)</span> <span class="token function">DeployFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> s<span class="token punctuation">.</span>configMap<span class="token punctuation">[</span><span class="token string">&quot;deploy_folder&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> val
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">BaseFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;deploy&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件， <code>config/dev/deploy.yaml</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">connections</span><span class="token punctuation">:</span> <span class="token comment"># 要自动化部署的连接  </span>
  <span class="token punctuation">-</span> ssh.web<span class="token punctuation">-</span>ubuntu  
  
<span class="token key atrule">remote_folder</span><span class="token punctuation">:</span> <span class="token string">&quot;/home/cbh/deploy/gobweb/&quot;</span>  <span class="token comment"># 远端的部署文件夹  </span>
  
<span class="token key atrule">frontend</span><span class="token punctuation">:</span> <span class="token comment"># 前端部署配置  </span>
  <span class="token key atrule">pre_action</span><span class="token punctuation">:</span> <span class="token comment"># 部署前置命令  </span>
    <span class="token punctuation">-</span> <span class="token string">&quot;pwd&quot;</span>  
  <span class="token key atrule">post_action</span><span class="token punctuation">:</span> <span class="token comment"># 部署后置命令  </span>
    <span class="token punctuation">-</span> <span class="token string">&quot;pwd&quot;</span>  
  
<span class="token key atrule">backend</span><span class="token punctuation">:</span> <span class="token comment"># 后端部署配置  </span>
  <span class="token key atrule">goos</span><span class="token punctuation">:</span> linux <span class="token comment"># 部署目标操作系统  </span>
  <span class="token key atrule">goarch</span><span class="token punctuation">:</span> amd64 <span class="token comment"># 部署目标cpu架构  </span>
  <span class="token key atrule">pre_action</span><span class="token punctuation">:</span> <span class="token comment"># 部署前置命令  </span>
    <span class="token punctuation">-</span> <span class="token string">&quot;mkdir -p /home/cbh/deploy/gobweb 2&gt;/dev/null&quot;</span>  
    <span class="token punctuation">-</span> <span class="token string">&quot;rm /home/cbh/deploy/gobweb/gob&quot;</span>  
  <span class="token key atrule">post_action</span><span class="token punctuation">:</span> <span class="token comment"># 部署后置命令  </span>
    <span class="token punctuation">-</span> <span class="token string">&quot;chmod 777 /home/cbh/deploy/gobweb/gob&quot;</span>  
    <span class="token punctuation">-</span> <span class="token string">&quot;cd /home/cbh/deploy/gobweb &amp;&amp; ./gob app restart&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码验证-15" tabindex="-1"><a class="header-anchor" href="#代码验证-15"><span>代码验证</span></a></h3><p>执行相关命令即可验证：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./gob deploy frontend	// 部署前端
./gob deploy backend	// 部署后端
./gob deploy all		// 同时部署前后端
./gob deploy rollback	// 部署回滚
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_29、周边" tabindex="-1"><a class="header-anchor" href="#_29、周边"><span>29、周边</span></a></h2><h2 id="_30、设计先于实战" tabindex="-1"><a class="header-anchor" href="#_30、设计先于实战"><span>30、设计先于实战</span></a></h2><h2 id="_31、32、通用模块" tabindex="-1"><a class="header-anchor" href="#_31、32、通用模块"><span>31、32、通用模块</span></a></h2><h2 id="_33、34、业务开发" tabindex="-1"><a class="header-anchor" href="#_33、34、业务开发"><span>33、34、业务开发</span></a></h2><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h2 id="todo" tabindex="-1"><a class="header-anchor" href="#todo"><span>Todo</span></a></h2><h3 id="框架已发现待优化" tabindex="-1"><a class="header-anchor" href="#框架已发现待优化"><span>框架已发现待优化</span></a></h3>`,28);function Zn($n,ns){const a=e("ExternalLinkIcon");return c(),i("div",null,[u,k,s("p",null,[n("项目地址："),s("a",r,[n("GitHub - chenbihao/gob: go语言编写的web框架"),t(a)])]),d,s("p",null,[n("实现接口，可以利用 "),s("a",v,[n("第三方库cast"),t(a)]),n(" 方便编码，利用官方库 "),s("a",m,[n("html/template"),t(a)]),n(" 方便模板数据替换。")]),b,s("p",null,[n("在 Golang 1.8 版本之前，"),f,n(" 没有提供，可以用第三方库例如："),s("a",g,[n("manners"),t(a)]),n(" 、 "),s("a",y,[n("graceful"),t(a)]),n(" 、 "),s("a",w,[n("grace"),t(a)]),n(" 。")]),h,s("p",null,[s("a",q,[n("第三方测评结果"),t(a)]),n(" 可以用来查看各框架之间的性能对比。")]),s("p",null,[s("a",C,[n("go-web-framework-stars"),t(a)]),n("，可以用来获取实时流行度对比。")]),s("ul",null,[x,S,s("li",null,[P,n("：轻量，路由使用 "),s("a",F,[n("httprouter"),t(a)]),n(" 包，链式加载调用 Middleware，并且制定标准并开放 "),s("a",D,[n("社区贡献 organizations"),t(a)]),n("，社区活跃度高，扩展性强，适合企业级团队使用。")])]),_,s("p",null,[n("同时，Gin 社区也有共享开源中间件， "),s("a",I,[n("官方GitHub"),t(a)]),n(" 组织收录的中间件有 23 个，非收录官方的在 "),s("a",R,[n("官方README"),t(a)]),n(" 记录的也有 45 个。")]),A,G,T,s("p",null,[M,n("。就拿 Gin 框架本身来说吧，它的路由是基于 "),s("a",N,[n("httprouter"),t(a)]),n(" 这个项目来定制化修改的；再比如 "),s("a",E,[n("Macaron"),t(a)]),n(" 框架，它是基于 "),s("a",L,[n("Martini"),t(a)]),n(" 框架的设计实现的。它们都是在原有的开源项目基础上，按照自己的设计思路重新改造的，也都获得了成功。")]),B,s("p",null,[n("Gin 框架使用的 "),s("a",H,[n("MIT开源许可证"),t(a)]),n(" ：")]),W,s("ul",null,[K,s("li",null,[n("路由（Gin 已有，用的 "),s("a",O,[n("httprouter"),t(a)]),n(" ） "),U]),j]),J,s("p",null,[n("引入命令行工具库 "),s("a",V,[n("cobra"),t(a)]),n("，许可证允许，复制进 "),z,n("，并且迁移 "),Q,n(" 内容。")]),X,s("p",null,[n("使用开源定时执行库 "),s("a",Y,[n("cron"),t(a)]),n(" ，支持极其丰富的“时间描述语言”，且支持秒级定时。")]),Z,s("p",null,[n("利用开源库 "),s("a",$,[n("go-daemon"),t(a)]),n(" 来实现守护进程模式。")]),nn,s("p",null,[n("这里的 "),sn,n(" 是利用 "),s("a",an,[n("uuid生成库"),t(a)]),n(" 生成的，在 "),tn,n(" 中增加 AppID 的接口函数：")]),pn,s("p",null,[n("通过 "),s("a",on,[n("go-yaml"),t(a)]),n(" 库读取 yaml 配置文件，并且利用环境变量替换掉配置文件中的占位符 "),en,n("。")]),cn,s("p",null,[n("使用 "),s("a",ln,[n("fsnotify"),t(a)]),n(" 库监控文件，实现热更新")]),un,s("p",null,[n("参考 Linux 的 "),s("a",kn,[n("syslog"),t(a)]),n(" 、Java 的 "),s("a",rn,[n("log4j"),t(a)]),n("，调整归并为下列七种日志级别：")]),dn,s("p",null,[s("a",vn,[n("file-rotatelogs"),t(a)]),n(" 库")]),mn,bn,fn,s("p",null,[n("参考 Google Dapper 中的链路 ID 定义， "),s("a",gn,[n("来自 Google Dapper 论文的见解"),t(a)]),n(" 。")]),yn,s("p",null,[n("利用 gin 社区 github.com/gin-contrib 中的一个中间件 "),s("a",wn,[n("static"),t(a)]),n(" ，在路由中将请求路由到静态文件、动态请求。")]),hn,s("p",null,[n("交互式输入，并利用官方库 "),s("a",qn,[n("text/template"),t(a)]),n(" 生成对应的代码文件。")]),s("blockquote",null,[s("p",null,[s("a",Cn,[n("survey"),t(a)]),n(" 于 2023 年 9 月 24 日 停止维护，新推荐 "),s("a",xn,[n("bubbletea"),t(a)])])]),Sn,s("p",null,[n("一类是工具，例如 "),s("a",Pn,[n("swagger-ui"),t(a)]),n("、"),s("a",Fn,[n("swagger-editor"),t(a)]),n(" 和 "),s("a",Dn,[n("swagger-codegen"),t(a)]),n("。")]),_n,s("p",null,[n("源码引入通过注释生成 json 与 ui 的开源项目 "),s("a",In,[n("swag"),t(a)]),n("，注释用法： "),s("a",Rn,[n("说明文档"),t(a)]),n("。")]),s("p",null,[n("使用 "),s("a",An,[n("gin-swagger"),t(a)]),n(" 中间件来启动 swagger-ui，用法： "),s("a",Gn,[n("例子"),t(a)]),n("。")]),Tn,s("p",null,[n("启动项目后打开 "),s("a",Mn,[n("http://localhost:8080/swagger/index.html"),t(a)]),n(" 可以看到 swagger-ui 的界面，并且点击 execute 可以调用接口。")]),Nn,En,Ln,Bn,s("p",null,[n("同时跟第十四节一样，利用开源库 "),s("a",Hn,[n("go-daemon"),t(a)]),n(" 来设置守护进程（win 不支持），利用第三方库 "),s("a",Wn,[n("gspt"),t(a)]),n(" 来设置进程名称（win 也不支持）。")]),Kn,s("p",null,[n("这节引入 "),s("a",On,[n("Gorm"),t(a)]),n(" 作为框架的 orm 服务，"),s("a",Un,[n("gorm 文档"),t(a)]),n("。")]),jn,s("p",null,[n("通过 "),s("a",Jn,[n("go-redis"),t(a)]),n(" 来引入 redis 服务（Redis 6 使用 v8 版本，Redis7 使用 v9 版本，"),s("a",Vn,[n("简中文档"),t(a)]),n("）。")]),zn,s("p",null,[n("通过官方的 "),s("a",Qn,[n("ssh"),t(a)]),n(" 库来连接 ssh，并且创建 deploy 命令，通过第三方库 "),s("a",Xn,[n("sftp"),t(a)]),n(" 来上传到服务器并执行启动脚本。")]),Yn])}const as=o(l,[["render",Zn],["__file","0.项目回顾.html.vue"]]);export{as as default};
